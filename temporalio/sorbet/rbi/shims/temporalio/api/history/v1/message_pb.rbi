# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: temporal/api/history/v1/message.proto
# typed: strict

# Always the first event in workflow history
class Temporalio::Api::History::V1::WorkflowExecutionStartedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::WorkflowExecutionStartedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionStartedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::WorkflowExecutionStartedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionStartedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      workflow_type: T.nilable(Temporalio::Api::Common::V1::WorkflowType),
      parent_workflow_namespace: T.nilable(String),
      parent_workflow_namespace_id: T.nilable(String),
      parent_workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      parent_initiated_event_id: T.nilable(Integer),
      task_queue: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue),
      input: T.nilable(Temporalio::Api::Common::V1::Payloads),
      workflow_execution_timeout: T.nilable(Google::Protobuf::Duration),
      workflow_run_timeout: T.nilable(Google::Protobuf::Duration),
      workflow_task_timeout: T.nilable(Google::Protobuf::Duration),
      continued_execution_run_id: T.nilable(String),
      initiator: T.nilable(T.any(Symbol, String, Integer)),
      continued_failure: T.nilable(Temporalio::Api::Failure::V1::Failure),
      last_completion_result: T.nilable(Temporalio::Api::Common::V1::Payloads),
      original_execution_run_id: T.nilable(String),
      identity: T.nilable(String),
      first_execution_run_id: T.nilable(String),
      retry_policy: T.nilable(Temporalio::Api::Common::V1::RetryPolicy),
      attempt: T.nilable(Integer),
      workflow_execution_expiration_time: T.nilable(Google::Protobuf::Timestamp),
      cron_schedule: T.nilable(String),
      first_workflow_task_backoff: T.nilable(Google::Protobuf::Duration),
      memo: T.nilable(Temporalio::Api::Common::V1::Memo),
      search_attributes: T.nilable(Temporalio::Api::Common::V1::SearchAttributes),
      prev_auto_reset_points: T.nilable(Temporalio::Api::Workflow::V1::ResetPoints),
      header: T.nilable(Temporalio::Api::Common::V1::Header),
      parent_initiated_event_version: T.nilable(Integer),
      workflow_id: T.nilable(String),
      source_version_stamp: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp),
      completion_callbacks: T.nilable(T::Array[T.nilable(Temporalio::Api::Common::V1::Callback)]),
      root_workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      inherited_build_id: T.nilable(String)
    ).void
  end
  def initialize(
    workflow_type: nil,
    parent_workflow_namespace: "",
    parent_workflow_namespace_id: "",
    parent_workflow_execution: nil,
    parent_initiated_event_id: 0,
    task_queue: nil,
    input: nil,
    workflow_execution_timeout: nil,
    workflow_run_timeout: nil,
    workflow_task_timeout: nil,
    continued_execution_run_id: "",
    initiator: :CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED,
    continued_failure: nil,
    last_completion_result: nil,
    original_execution_run_id: "",
    identity: "",
    first_execution_run_id: "",
    retry_policy: nil,
    attempt: 0,
    workflow_execution_expiration_time: nil,
    cron_schedule: "",
    first_workflow_task_backoff: nil,
    memo: nil,
    search_attributes: nil,
    prev_auto_reset_points: nil,
    header: nil,
    parent_initiated_event_version: 0,
    workflow_id: "",
    source_version_stamp: nil,
    completion_callbacks: [],
    root_workflow_execution: nil,
    inherited_build_id: ""
  )
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowType)) }
  def workflow_type
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowType)).void }
  def workflow_type=(value)
  end

  sig { void }
  def clear_workflow_type
  end

  # If this workflow is a child, the namespace our parent lives in.
# SDKs and UI tools should use `parent_workflow_namespace` field but server must use `parent_workflow_namespace_id` only.
  sig { returns(String) }
  def parent_workflow_namespace
  end

  # If this workflow is a child, the namespace our parent lives in.
# SDKs and UI tools should use `parent_workflow_namespace` field but server must use `parent_workflow_namespace_id` only.
  sig { params(value: String).void }
  def parent_workflow_namespace=(value)
  end

  # If this workflow is a child, the namespace our parent lives in.
# SDKs and UI tools should use `parent_workflow_namespace` field but server must use `parent_workflow_namespace_id` only.
  sig { void }
  def clear_parent_workflow_namespace
  end

  sig { returns(String) }
  def parent_workflow_namespace_id
  end

  sig { params(value: String).void }
  def parent_workflow_namespace_id=(value)
  end

  sig { void }
  def clear_parent_workflow_namespace_id
  end

  # Contains information about parent workflow execution that initiated the child workflow these attributes belong to.
# If the workflow these attributes belong to is not a child workflow of any other execution, this field will not be populated.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def parent_workflow_execution
  end

  # Contains information about parent workflow execution that initiated the child workflow these attributes belong to.
# If the workflow these attributes belong to is not a child workflow of any other execution, this field will not be populated.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def parent_workflow_execution=(value)
  end

  # Contains information about parent workflow execution that initiated the child workflow these attributes belong to.
# If the workflow these attributes belong to is not a child workflow of any other execution, this field will not be populated.
  sig { void }
  def clear_parent_workflow_execution
  end

  # EventID of the child execution initiated event in parent workflow
  sig { returns(Integer) }
  def parent_initiated_event_id
  end

  # EventID of the child execution initiated event in parent workflow
  sig { params(value: Integer).void }
  def parent_initiated_event_id=(value)
  end

  # EventID of the child execution initiated event in parent workflow
  sig { void }
  def clear_parent_initiated_event_id
  end

  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)) }
  def task_queue
  end

  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)).void }
  def task_queue=(value)
  end

  sig { void }
  def clear_task_queue
  end

  # SDK will deserialize this and provide it as arguments to the workflow function
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def input
  end

  # SDK will deserialize this and provide it as arguments to the workflow function
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def input=(value)
  end

  # SDK will deserialize this and provide it as arguments to the workflow function
  sig { void }
  def clear_input
  end

  # Total workflow execution timeout including retries and continue as new.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_execution_timeout
  end

  # Total workflow execution timeout including retries and continue as new.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_execution_timeout=(value)
  end

  # Total workflow execution timeout including retries and continue as new.
  sig { void }
  def clear_workflow_execution_timeout
  end

  # Timeout of a single workflow run.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_run_timeout
  end

  # Timeout of a single workflow run.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_run_timeout=(value)
  end

  # Timeout of a single workflow run.
  sig { void }
  def clear_workflow_run_timeout
  end

  # Timeout of a single workflow task.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_task_timeout
  end

  # Timeout of a single workflow task.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_task_timeout=(value)
  end

  # Timeout of a single workflow task.
  sig { void }
  def clear_workflow_task_timeout
  end

  # Run id of the previous workflow which continued-as-new or retired or cron executed into this
# workflow.
  sig { returns(String) }
  def continued_execution_run_id
  end

  # Run id of the previous workflow which continued-as-new or retired or cron executed into this
# workflow.
  sig { params(value: String).void }
  def continued_execution_run_id=(value)
  end

  # Run id of the previous workflow which continued-as-new or retired or cron executed into this
# workflow.
  sig { void }
  def clear_continued_execution_run_id
  end

  sig { returns(T.any(Symbol, Integer)) }
  def initiator
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def initiator=(value)
  end

  sig { void }
  def clear_initiator
  end

  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def continued_failure
  end

  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def continued_failure=(value)
  end

  sig { void }
  def clear_continued_failure
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def last_completion_result
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def last_completion_result=(value)
  end

  sig { void }
  def clear_last_completion_result
  end

  # This is the run id when the WorkflowExecutionStarted event was written.
# A workflow reset changes the execution run_id, but preserves this field.
  sig { returns(String) }
  def original_execution_run_id
  end

  # This is the run id when the WorkflowExecutionStarted event was written.
# A workflow reset changes the execution run_id, but preserves this field.
  sig { params(value: String).void }
  def original_execution_run_id=(value)
  end

  # This is the run id when the WorkflowExecutionStarted event was written.
# A workflow reset changes the execution run_id, but preserves this field.
  sig { void }
  def clear_original_execution_run_id
  end

  # Identity of the client who requested this execution
  sig { returns(String) }
  def identity
  end

  # Identity of the client who requested this execution
  sig { params(value: String).void }
  def identity=(value)
  end

  # Identity of the client who requested this execution
  sig { void }
  def clear_identity
  end

  # This is the very first runId along the chain of ContinueAsNew, Retry, Cron and Reset.
# Used to identify a chain.
  sig { returns(String) }
  def first_execution_run_id
  end

  # This is the very first runId along the chain of ContinueAsNew, Retry, Cron and Reset.
# Used to identify a chain.
  sig { params(value: String).void }
  def first_execution_run_id=(value)
  end

  # This is the very first runId along the chain of ContinueAsNew, Retry, Cron and Reset.
# Used to identify a chain.
  sig { void }
  def clear_first_execution_run_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::RetryPolicy)) }
  def retry_policy
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::RetryPolicy)).void }
  def retry_policy=(value)
  end

  sig { void }
  def clear_retry_policy
  end

  # Starting at 1, the number of times we have tried to execute this workflow
  sig { returns(Integer) }
  def attempt
  end

  # Starting at 1, the number of times we have tried to execute this workflow
  sig { params(value: Integer).void }
  def attempt=(value)
  end

  # Starting at 1, the number of times we have tried to execute this workflow
  sig { void }
  def clear_attempt
  end

  # The absolute time at which the workflow will be timed out.
# This is passed without change to the next run/retry of a workflow.
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def workflow_execution_expiration_time
  end

  # The absolute time at which the workflow will be timed out.
# This is passed without change to the next run/retry of a workflow.
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def workflow_execution_expiration_time=(value)
  end

  # The absolute time at which the workflow will be timed out.
# This is passed without change to the next run/retry of a workflow.
  sig { void }
  def clear_workflow_execution_expiration_time
  end

  # If this workflow runs on a cron schedule, it will appear here
  sig { returns(String) }
  def cron_schedule
  end

  # If this workflow runs on a cron schedule, it will appear here
  sig { params(value: String).void }
  def cron_schedule=(value)
  end

  # If this workflow runs on a cron schedule, it will appear here
  sig { void }
  def clear_cron_schedule
  end

  # For a cron workflow, this contains the amount of time between when this iteration of
# the cron workflow was scheduled and when it should run next per its cron_schedule.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def first_workflow_task_backoff
  end

  # For a cron workflow, this contains the amount of time between when this iteration of
# the cron workflow was scheduled and when it should run next per its cron_schedule.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def first_workflow_task_backoff=(value)
  end

  # For a cron workflow, this contains the amount of time between when this iteration of
# the cron workflow was scheduled and when it should run next per its cron_schedule.
  sig { void }
  def clear_first_workflow_task_backoff
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Memo)) }
  def memo
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Memo)).void }
  def memo=(value)
  end

  sig { void }
  def clear_memo
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::SearchAttributes)) }
  def search_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::SearchAttributes)).void }
  def search_attributes=(value)
  end

  sig { void }
  def clear_search_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::Workflow::V1::ResetPoints)) }
  def prev_auto_reset_points
  end

  sig { params(value: T.nilable(Temporalio::Api::Workflow::V1::ResetPoints)).void }
  def prev_auto_reset_points=(value)
  end

  sig { void }
  def clear_prev_auto_reset_points
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Header)) }
  def header
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Header)).void }
  def header=(value)
  end

  sig { void }
  def clear_header
  end

  # Version of the child execution initiated event in parent workflow
# It should be used together with parent_initiated_event_id to identify
# a child initiated event for global namespace
  sig { returns(Integer) }
  def parent_initiated_event_version
  end

  # Version of the child execution initiated event in parent workflow
# It should be used together with parent_initiated_event_id to identify
# a child initiated event for global namespace
  sig { params(value: Integer).void }
  def parent_initiated_event_version=(value)
  end

  # Version of the child execution initiated event in parent workflow
# It should be used together with parent_initiated_event_id to identify
# a child initiated event for global namespace
  sig { void }
  def clear_parent_initiated_event_version
  end

  # This field is new in 1.21.
  sig { returns(String) }
  def workflow_id
  end

  # This field is new in 1.21.
  sig { params(value: String).void }
  def workflow_id=(value)
  end

  # This field is new in 1.21.
  sig { void }
  def clear_workflow_id
  end

  # If this workflow intends to use anything other than the current overall default version for
# the queue, then we include it here.
# Deprecated. use `inherited_build_id` instead
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)) }
  def source_version_stamp
  end

  # If this workflow intends to use anything other than the current overall default version for
# the queue, then we include it here.
# Deprecated. use `inherited_build_id` instead
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)).void }
  def source_version_stamp=(value)
  end

  # If this workflow intends to use anything other than the current overall default version for
# the queue, then we include it here.
# Deprecated. use `inherited_build_id` instead
  sig { void }
  def clear_source_version_stamp
  end

  # Completion callbacks attached when this workflow was started.
  sig { returns(T::Array[T.nilable(Temporalio::Api::Common::V1::Callback)]) }
  def completion_callbacks
  end

  # Completion callbacks attached when this workflow was started.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def completion_callbacks=(value)
  end

  # Completion callbacks attached when this workflow was started.
  sig { void }
  def clear_completion_callbacks
  end

  # Contains information about the root workflow execution.
# The root workflow execution is defined as follows:
# 1. A workflow without parent workflow is its own root workflow.
# 2. A workflow that has a parent workflow has the same root workflow as its parent workflow.
# Note: workflows continued as new or reseted may or may not have parents, check examples below.
#
# Examples:
#   Scenario 1: Workflow W1 starts child workflow W2, and W2 starts child workflow W3.
#     - The root workflow of all three workflows is W1.
#   Scenario 2: Workflow W1 starts child workflow W2, and W2 continued as new W3.
#     - The root workflow of all three workflows is W1.
#   Scenario 3: Workflow W1 continued as new W2.
#     - The root workflow of W1 is W1 and the root workflow of W2 is W2.
#   Scenario 4: Workflow W1 starts child workflow W2, and W2 is reseted, creating W3
#     - The root workflow of all three workflows is W1.
#   Scenario 5: Workflow W1 is reseted, creating W2.
#     - The root workflow of W1 is W1 and the root workflow of W2 is W2.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def root_workflow_execution
  end

  # Contains information about the root workflow execution.
# The root workflow execution is defined as follows:
# 1. A workflow without parent workflow is its own root workflow.
# 2. A workflow that has a parent workflow has the same root workflow as its parent workflow.
# Note: workflows continued as new or reseted may or may not have parents, check examples below.
#
# Examples:
#   Scenario 1: Workflow W1 starts child workflow W2, and W2 starts child workflow W3.
#     - The root workflow of all three workflows is W1.
#   Scenario 2: Workflow W1 starts child workflow W2, and W2 continued as new W3.
#     - The root workflow of all three workflows is W1.
#   Scenario 3: Workflow W1 continued as new W2.
#     - The root workflow of W1 is W1 and the root workflow of W2 is W2.
#   Scenario 4: Workflow W1 starts child workflow W2, and W2 is reseted, creating W3
#     - The root workflow of all three workflows is W1.
#   Scenario 5: Workflow W1 is reseted, creating W2.
#     - The root workflow of W1 is W1 and the root workflow of W2 is W2.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def root_workflow_execution=(value)
  end

  # Contains information about the root workflow execution.
# The root workflow execution is defined as follows:
# 1. A workflow without parent workflow is its own root workflow.
# 2. A workflow that has a parent workflow has the same root workflow as its parent workflow.
# Note: workflows continued as new or reseted may or may not have parents, check examples below.
#
# Examples:
#   Scenario 1: Workflow W1 starts child workflow W2, and W2 starts child workflow W3.
#     - The root workflow of all three workflows is W1.
#   Scenario 2: Workflow W1 starts child workflow W2, and W2 continued as new W3.
#     - The root workflow of all three workflows is W1.
#   Scenario 3: Workflow W1 continued as new W2.
#     - The root workflow of W1 is W1 and the root workflow of W2 is W2.
#   Scenario 4: Workflow W1 starts child workflow W2, and W2 is reseted, creating W3
#     - The root workflow of all three workflows is W1.
#   Scenario 5: Workflow W1 is reseted, creating W2.
#     - The root workflow of W1 is W1 and the root workflow of W2 is W2.
  sig { void }
  def clear_root_workflow_execution
  end

  # When present, this execution is assigned to the build ID of its parent or previous execution.
  sig { returns(String) }
  def inherited_build_id
  end

  # When present, this execution is assigned to the build ID of its parent or previous execution.
  sig { params(value: String).void }
  def inherited_build_id=(value)
  end

  # When present, this execution is assigned to the build ID of its parent or previous execution.
  sig { void }
  def clear_inherited_build_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::WorkflowExecutionCompletedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::WorkflowExecutionCompletedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionCompletedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::WorkflowExecutionCompletedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionCompletedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      result: T.nilable(Temporalio::Api::Common::V1::Payloads),
      workflow_task_completed_event_id: T.nilable(Integer),
      new_execution_run_id: T.nilable(String)
    ).void
  end
  def initialize(
    result: nil,
    workflow_task_completed_event_id: 0,
    new_execution_run_id: ""
  )
  end

  # Serialized result of workflow completion (ie: The return value of the workflow function)
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def result
  end

  # Serialized result of workflow completion (ie: The return value of the workflow function)
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def result=(value)
  end

  # Serialized result of workflow completion (ie: The return value of the workflow function)
  sig { void }
  def clear_result
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { returns(Integer) }
  def workflow_task_completed_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { params(value: Integer).void }
  def workflow_task_completed_event_id=(value)
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { void }
  def clear_workflow_task_completed_event_id
  end

  # If another run is started by cron, this contains the new run id.
  sig { returns(String) }
  def new_execution_run_id
  end

  # If another run is started by cron, this contains the new run id.
  sig { params(value: String).void }
  def new_execution_run_id=(value)
  end

  # If another run is started by cron, this contains the new run id.
  sig { void }
  def clear_new_execution_run_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::WorkflowExecutionFailedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::WorkflowExecutionFailedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionFailedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::WorkflowExecutionFailedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionFailedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      failure: T.nilable(Temporalio::Api::Failure::V1::Failure),
      retry_state: T.nilable(T.any(Symbol, String, Integer)),
      workflow_task_completed_event_id: T.nilable(Integer),
      new_execution_run_id: T.nilable(String)
    ).void
  end
  def initialize(
    failure: nil,
    retry_state: :RETRY_STATE_UNSPECIFIED,
    workflow_task_completed_event_id: 0,
    new_execution_run_id: ""
  )
  end

  # Serialized result of workflow failure (ex: An exception thrown, or error returned)
  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def failure
  end

  # Serialized result of workflow failure (ex: An exception thrown, or error returned)
  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def failure=(value)
  end

  # Serialized result of workflow failure (ex: An exception thrown, or error returned)
  sig { void }
  def clear_failure
  end

  sig { returns(T.any(Symbol, Integer)) }
  def retry_state
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def retry_state=(value)
  end

  sig { void }
  def clear_retry_state
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { returns(Integer) }
  def workflow_task_completed_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { params(value: Integer).void }
  def workflow_task_completed_event_id=(value)
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { void }
  def clear_workflow_task_completed_event_id
  end

  # If another run is started by cron or retry, this contains the new run id.
  sig { returns(String) }
  def new_execution_run_id
  end

  # If another run is started by cron or retry, this contains the new run id.
  sig { params(value: String).void }
  def new_execution_run_id=(value)
  end

  # If another run is started by cron or retry, this contains the new run id.
  sig { void }
  def clear_new_execution_run_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::WorkflowExecutionTimedOutEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::WorkflowExecutionTimedOutEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionTimedOutEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::WorkflowExecutionTimedOutEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionTimedOutEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      retry_state: T.nilable(T.any(Symbol, String, Integer)),
      new_execution_run_id: T.nilable(String)
    ).void
  end
  def initialize(
    retry_state: :RETRY_STATE_UNSPECIFIED,
    new_execution_run_id: ""
  )
  end

  sig { returns(T.any(Symbol, Integer)) }
  def retry_state
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def retry_state=(value)
  end

  sig { void }
  def clear_retry_state
  end

  # If another run is started by cron or retry, this contains the new run id.
  sig { returns(String) }
  def new_execution_run_id
  end

  # If another run is started by cron or retry, this contains the new run id.
  sig { params(value: String).void }
  def new_execution_run_id=(value)
  end

  # If another run is started by cron or retry, this contains the new run id.
  sig { void }
  def clear_new_execution_run_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::WorkflowExecutionContinuedAsNewEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::WorkflowExecutionContinuedAsNewEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionContinuedAsNewEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::WorkflowExecutionContinuedAsNewEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionContinuedAsNewEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      new_execution_run_id: T.nilable(String),
      workflow_type: T.nilable(Temporalio::Api::Common::V1::WorkflowType),
      task_queue: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue),
      input: T.nilable(Temporalio::Api::Common::V1::Payloads),
      workflow_run_timeout: T.nilable(Google::Protobuf::Duration),
      workflow_task_timeout: T.nilable(Google::Protobuf::Duration),
      workflow_task_completed_event_id: T.nilable(Integer),
      backoff_start_interval: T.nilable(Google::Protobuf::Duration),
      initiator: T.nilable(T.any(Symbol, String, Integer)),
      failure: T.nilable(Temporalio::Api::Failure::V1::Failure),
      last_completion_result: T.nilable(Temporalio::Api::Common::V1::Payloads),
      header: T.nilable(Temporalio::Api::Common::V1::Header),
      memo: T.nilable(Temporalio::Api::Common::V1::Memo),
      search_attributes: T.nilable(Temporalio::Api::Common::V1::SearchAttributes),
      inherit_build_id: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    new_execution_run_id: "",
    workflow_type: nil,
    task_queue: nil,
    input: nil,
    workflow_run_timeout: nil,
    workflow_task_timeout: nil,
    workflow_task_completed_event_id: 0,
    backoff_start_interval: nil,
    initiator: :CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED,
    failure: nil,
    last_completion_result: nil,
    header: nil,
    memo: nil,
    search_attributes: nil,
    inherit_build_id: false
  )
  end

  # The run ID of the new workflow started by this continue-as-new
  sig { returns(String) }
  def new_execution_run_id
  end

  # The run ID of the new workflow started by this continue-as-new
  sig { params(value: String).void }
  def new_execution_run_id=(value)
  end

  # The run ID of the new workflow started by this continue-as-new
  sig { void }
  def clear_new_execution_run_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowType)) }
  def workflow_type
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowType)).void }
  def workflow_type=(value)
  end

  sig { void }
  def clear_workflow_type
  end

  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)) }
  def task_queue
  end

  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)).void }
  def task_queue=(value)
  end

  sig { void }
  def clear_task_queue
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def input
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def input=(value)
  end

  sig { void }
  def clear_input
  end

  # Timeout of a single workflow run.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_run_timeout
  end

  # Timeout of a single workflow run.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_run_timeout=(value)
  end

  # Timeout of a single workflow run.
  sig { void }
  def clear_workflow_run_timeout
  end

  # Timeout of a single workflow task.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_task_timeout
  end

  # Timeout of a single workflow task.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_task_timeout=(value)
  end

  # Timeout of a single workflow task.
  sig { void }
  def clear_workflow_task_timeout
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { returns(Integer) }
  def workflow_task_completed_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { params(value: Integer).void }
  def workflow_task_completed_event_id=(value)
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { void }
  def clear_workflow_task_completed_event_id
  end

  # TODO: How and is this used?
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def backoff_start_interval
  end

  # TODO: How and is this used?
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def backoff_start_interval=(value)
  end

  # TODO: How and is this used?
  sig { void }
  def clear_backoff_start_interval
  end

  sig { returns(T.any(Symbol, Integer)) }
  def initiator
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def initiator=(value)
  end

  sig { void }
  def clear_initiator
  end

  # TODO: David are these right?
# Deprecated. If a workflow's retry policy would cause a new run to start when the current one
# has failed, this field would be populated with that failure. Now (when supported by server
# and sdk) the final event will be `WORKFLOW_EXECUTION_FAILED` with `new_execution_run_id` set.
  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def failure
  end

  # TODO: David are these right?
# Deprecated. If a workflow's retry policy would cause a new run to start when the current one
# has failed, this field would be populated with that failure. Now (when supported by server
# and sdk) the final event will be `WORKFLOW_EXECUTION_FAILED` with `new_execution_run_id` set.
  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def failure=(value)
  end

  # TODO: David are these right?
# Deprecated. If a workflow's retry policy would cause a new run to start when the current one
# has failed, this field would be populated with that failure. Now (when supported by server
# and sdk) the final event will be `WORKFLOW_EXECUTION_FAILED` with `new_execution_run_id` set.
  sig { void }
  def clear_failure
  end

  # TODO: Is this the result of *this* workflow as it continued-as-new?
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def last_completion_result
  end

  # TODO: Is this the result of *this* workflow as it continued-as-new?
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def last_completion_result=(value)
  end

  # TODO: Is this the result of *this* workflow as it continued-as-new?
  sig { void }
  def clear_last_completion_result
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Header)) }
  def header
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Header)).void }
  def header=(value)
  end

  sig { void }
  def clear_header
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Memo)) }
  def memo
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Memo)).void }
  def memo=(value)
  end

  sig { void }
  def clear_memo
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::SearchAttributes)) }
  def search_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::SearchAttributes)).void }
  def search_attributes=(value)
  end

  sig { void }
  def clear_search_attributes
  end

  # If this is set, the new execution inherits the Build ID of the current execution. Otherwise,
# the assignment rules will be used to independently assign a Build ID to the new execution.
  sig { returns(T::Boolean) }
  def inherit_build_id
  end

  # If this is set, the new execution inherits the Build ID of the current execution. Otherwise,
# the assignment rules will be used to independently assign a Build ID to the new execution.
  sig { params(value: T::Boolean).void }
  def inherit_build_id=(value)
  end

  # If this is set, the new execution inherits the Build ID of the current execution. Otherwise,
# the assignment rules will be used to independently assign a Build ID to the new execution.
  sig { void }
  def clear_inherit_build_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::WorkflowTaskScheduledEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::WorkflowTaskScheduledEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowTaskScheduledEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::WorkflowTaskScheduledEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowTaskScheduledEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      task_queue: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue),
      start_to_close_timeout: T.nilable(Google::Protobuf::Duration),
      attempt: T.nilable(Integer)
    ).void
  end
  def initialize(
    task_queue: nil,
    start_to_close_timeout: nil,
    attempt: 0
  )
  end

  # The task queue this workflow task was enqueued in, which could be a normal or sticky queue
  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)) }
  def task_queue
  end

  # The task queue this workflow task was enqueued in, which could be a normal or sticky queue
  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)).void }
  def task_queue=(value)
  end

  # The task queue this workflow task was enqueued in, which could be a normal or sticky queue
  sig { void }
  def clear_task_queue
  end

  # How long the worker has to process this task once receiving it before it times out
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def start_to_close_timeout
  end

  # How long the worker has to process this task once receiving it before it times out
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def start_to_close_timeout=(value)
  end

  # How long the worker has to process this task once receiving it before it times out
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { void }
  def clear_start_to_close_timeout
  end

  # Starting at 1, how many attempts there have been to complete this task
  sig { returns(Integer) }
  def attempt
  end

  # Starting at 1, how many attempts there have been to complete this task
  sig { params(value: Integer).void }
  def attempt=(value)
  end

  # Starting at 1, how many attempts there have been to complete this task
  sig { void }
  def clear_attempt
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::WorkflowTaskStartedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::WorkflowTaskStartedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowTaskStartedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::WorkflowTaskStartedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowTaskStartedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      scheduled_event_id: T.nilable(Integer),
      identity: T.nilable(String),
      request_id: T.nilable(String),
      suggest_continue_as_new: T.nilable(T::Boolean),
      history_size_bytes: T.nilable(Integer),
      worker_version: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp),
      build_id_redirect_counter: T.nilable(Integer)
    ).void
  end
  def initialize(
    scheduled_event_id: 0,
    identity: "",
    request_id: "",
    suggest_continue_as_new: false,
    history_size_bytes: 0,
    worker_version: nil,
    build_id_redirect_counter: 0
  )
  end

  # The id of the `WORKFLOW_TASK_SCHEDULED` event this task corresponds to
  sig { returns(Integer) }
  def scheduled_event_id
  end

  # The id of the `WORKFLOW_TASK_SCHEDULED` event this task corresponds to
  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  # The id of the `WORKFLOW_TASK_SCHEDULED` event this task corresponds to
  sig { void }
  def clear_scheduled_event_id
  end

  # Identity of the worker who picked up this task
  sig { returns(String) }
  def identity
  end

  # Identity of the worker who picked up this task
  sig { params(value: String).void }
  def identity=(value)
  end

  # Identity of the worker who picked up this task
  sig { void }
  def clear_identity
  end

  # TODO: ? Appears unused?
  sig { returns(String) }
  def request_id
  end

  # TODO: ? Appears unused?
  sig { params(value: String).void }
  def request_id=(value)
  end

  # TODO: ? Appears unused?
  sig { void }
  def clear_request_id
  end

  # True if this workflow should continue-as-new soon because its history size (in
# either event count or bytes) is getting large.
  sig { returns(T::Boolean) }
  def suggest_continue_as_new
  end

  # True if this workflow should continue-as-new soon because its history size (in
# either event count or bytes) is getting large.
  sig { params(value: T::Boolean).void }
  def suggest_continue_as_new=(value)
  end

  # True if this workflow should continue-as-new soon because its history size (in
# either event count or bytes) is getting large.
  sig { void }
  def clear_suggest_continue_as_new
  end

  # Total history size in bytes, which the workflow might use to decide when to
# continue-as-new regardless of the suggestion. Note that history event count is
# just the event id of this event, so we don't include it explicitly here.
  sig { returns(Integer) }
  def history_size_bytes
  end

  # Total history size in bytes, which the workflow might use to decide when to
# continue-as-new regardless of the suggestion. Note that history event count is
# just the event id of this event, so we don't include it explicitly here.
  sig { params(value: Integer).void }
  def history_size_bytes=(value)
  end

  # Total history size in bytes, which the workflow might use to decide when to
# continue-as-new regardless of the suggestion. Note that history event count is
# just the event id of this event, so we don't include it explicitly here.
  sig { void }
  def clear_history_size_bytes
  end

  # Version info of the worker to whom this task was dispatched.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)) }
  def worker_version
  end

  # Version info of the worker to whom this task was dispatched.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)).void }
  def worker_version=(value)
  end

  # Version info of the worker to whom this task was dispatched.
  sig { void }
  def clear_worker_version
  end

  # Used by server internally to properly reapply build ID redirects to an execution
# when rebuilding it from events.
  sig { returns(Integer) }
  def build_id_redirect_counter
  end

  # Used by server internally to properly reapply build ID redirects to an execution
# when rebuilding it from events.
  sig { params(value: Integer).void }
  def build_id_redirect_counter=(value)
  end

  # Used by server internally to properly reapply build ID redirects to an execution
# when rebuilding it from events.
  sig { void }
  def clear_build_id_redirect_counter
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::WorkflowTaskCompletedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::WorkflowTaskCompletedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowTaskCompletedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::WorkflowTaskCompletedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowTaskCompletedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      scheduled_event_id: T.nilable(Integer),
      started_event_id: T.nilable(Integer),
      identity: T.nilable(String),
      binary_checksum: T.nilable(String),
      worker_version: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp),
      sdk_metadata: T.nilable(Temporalio::Api::Sdk::V1::WorkflowTaskCompletedMetadata),
      metering_metadata: T.nilable(Temporalio::Api::Common::V1::MeteringMetadata)
    ).void
  end
  def initialize(
    scheduled_event_id: 0,
    started_event_id: 0,
    identity: "",
    binary_checksum: "",
    worker_version: nil,
    sdk_metadata: nil,
    metering_metadata: nil
  )
  end

  # The id of the `WORKFLOW_TASK_SCHEDULED` event this task corresponds to
  sig { returns(Integer) }
  def scheduled_event_id
  end

  # The id of the `WORKFLOW_TASK_SCHEDULED` event this task corresponds to
  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  # The id of the `WORKFLOW_TASK_SCHEDULED` event this task corresponds to
  sig { void }
  def clear_scheduled_event_id
  end

  # The id of the `WORKFLOW_TASK_STARTED` event this task corresponds to
  sig { returns(Integer) }
  def started_event_id
  end

  # The id of the `WORKFLOW_TASK_STARTED` event this task corresponds to
  sig { params(value: Integer).void }
  def started_event_id=(value)
  end

  # The id of the `WORKFLOW_TASK_STARTED` event this task corresponds to
  sig { void }
  def clear_started_event_id
  end

  # Identity of the worker who completed this task
  sig { returns(String) }
  def identity
  end

  # Identity of the worker who completed this task
  sig { params(value: String).void }
  def identity=(value)
  end

  # Identity of the worker who completed this task
  sig { void }
  def clear_identity
  end

  # Binary ID of the worker who completed this task
  sig { returns(String) }
  def binary_checksum
  end

  # Binary ID of the worker who completed this task
  sig { params(value: String).void }
  def binary_checksum=(value)
  end

  # Binary ID of the worker who completed this task
  sig { void }
  def clear_binary_checksum
  end

  # Version info of the worker who processed this workflow task. If present, the `build_id` field
# within is also used as `binary_checksum`, which may be omitted in that case (it may also be
# populated to preserve compatibility).
# Deprecated. Use the info inside the corresponding WorkflowTaskStartedEvent
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)) }
  def worker_version
  end

  # Version info of the worker who processed this workflow task. If present, the `build_id` field
# within is also used as `binary_checksum`, which may be omitted in that case (it may also be
# populated to preserve compatibility).
# Deprecated. Use the info inside the corresponding WorkflowTaskStartedEvent
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)).void }
  def worker_version=(value)
  end

  # Version info of the worker who processed this workflow task. If present, the `build_id` field
# within is also used as `binary_checksum`, which may be omitted in that case (it may also be
# populated to preserve compatibility).
# Deprecated. Use the info inside the corresponding WorkflowTaskStartedEvent
  sig { void }
  def clear_worker_version
  end

  # Data the SDK wishes to record for itself, but server need not interpret, and does not
# directly impact workflow state.
  sig { returns(T.nilable(Temporalio::Api::Sdk::V1::WorkflowTaskCompletedMetadata)) }
  def sdk_metadata
  end

  # Data the SDK wishes to record for itself, but server need not interpret, and does not
# directly impact workflow state.
  sig { params(value: T.nilable(Temporalio::Api::Sdk::V1::WorkflowTaskCompletedMetadata)).void }
  def sdk_metadata=(value)
  end

  # Data the SDK wishes to record for itself, but server need not interpret, and does not
# directly impact workflow state.
  sig { void }
  def clear_sdk_metadata
  end

  # Local usage data sent during workflow task completion and recorded here for posterity
  sig { returns(T.nilable(Temporalio::Api::Common::V1::MeteringMetadata)) }
  def metering_metadata
  end

  # Local usage data sent during workflow task completion and recorded here for posterity
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::MeteringMetadata)).void }
  def metering_metadata=(value)
  end

  # Local usage data sent during workflow task completion and recorded here for posterity
  sig { void }
  def clear_metering_metadata
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::WorkflowTaskTimedOutEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::WorkflowTaskTimedOutEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowTaskTimedOutEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::WorkflowTaskTimedOutEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowTaskTimedOutEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      scheduled_event_id: T.nilable(Integer),
      started_event_id: T.nilable(Integer),
      timeout_type: T.nilable(T.any(Symbol, String, Integer))
    ).void
  end
  def initialize(
    scheduled_event_id: 0,
    started_event_id: 0,
    timeout_type: :TIMEOUT_TYPE_UNSPECIFIED
  )
  end

  # The id of the `WORKFLOW_TASK_SCHEDULED` event this task corresponds to
  sig { returns(Integer) }
  def scheduled_event_id
  end

  # The id of the `WORKFLOW_TASK_SCHEDULED` event this task corresponds to
  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  # The id of the `WORKFLOW_TASK_SCHEDULED` event this task corresponds to
  sig { void }
  def clear_scheduled_event_id
  end

  # The id of the `WORKFLOW_TASK_STARTED` event this task corresponds to
  sig { returns(Integer) }
  def started_event_id
  end

  # The id of the `WORKFLOW_TASK_STARTED` event this task corresponds to
  sig { params(value: Integer).void }
  def started_event_id=(value)
  end

  # The id of the `WORKFLOW_TASK_STARTED` event this task corresponds to
  sig { void }
  def clear_started_event_id
  end

  sig { returns(T.any(Symbol, Integer)) }
  def timeout_type
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def timeout_type=(value)
  end

  sig { void }
  def clear_timeout_type
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::WorkflowTaskFailedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::WorkflowTaskFailedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowTaskFailedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::WorkflowTaskFailedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowTaskFailedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      scheduled_event_id: T.nilable(Integer),
      started_event_id: T.nilable(Integer),
      cause: T.nilable(T.any(Symbol, String, Integer)),
      failure: T.nilable(Temporalio::Api::Failure::V1::Failure),
      identity: T.nilable(String),
      base_run_id: T.nilable(String),
      new_run_id: T.nilable(String),
      fork_event_version: T.nilable(Integer),
      binary_checksum: T.nilable(String),
      worker_version: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)
    ).void
  end
  def initialize(
    scheduled_event_id: 0,
    started_event_id: 0,
    cause: :WORKFLOW_TASK_FAILED_CAUSE_UNSPECIFIED,
    failure: nil,
    identity: "",
    base_run_id: "",
    new_run_id: "",
    fork_event_version: 0,
    binary_checksum: "",
    worker_version: nil
  )
  end

  # The id of the `WORKFLOW_TASK_SCHEDULED` event this task corresponds to
  sig { returns(Integer) }
  def scheduled_event_id
  end

  # The id of the `WORKFLOW_TASK_SCHEDULED` event this task corresponds to
  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  # The id of the `WORKFLOW_TASK_SCHEDULED` event this task corresponds to
  sig { void }
  def clear_scheduled_event_id
  end

  # The id of the `WORKFLOW_TASK_STARTED` event this task corresponds to
  sig { returns(Integer) }
  def started_event_id
  end

  # The id of the `WORKFLOW_TASK_STARTED` event this task corresponds to
  sig { params(value: Integer).void }
  def started_event_id=(value)
  end

  # The id of the `WORKFLOW_TASK_STARTED` event this task corresponds to
  sig { void }
  def clear_started_event_id
  end

  sig { returns(T.any(Symbol, Integer)) }
  def cause
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def cause=(value)
  end

  sig { void }
  def clear_cause
  end

  # The failure details
  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def failure
  end

  # The failure details
  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def failure=(value)
  end

  # The failure details
  sig { void }
  def clear_failure
  end

  # If a worker explicitly failed this task, it's identity. TODO: What is this set to if server fails the task?
  sig { returns(String) }
  def identity
  end

  # If a worker explicitly failed this task, it's identity. TODO: What is this set to if server fails the task?
  sig { params(value: String).void }
  def identity=(value)
  end

  # If a worker explicitly failed this task, it's identity. TODO: What is this set to if server fails the task?
  sig { void }
  def clear_identity
  end

  # The original run id of the workflow. For reset workflow.
  sig { returns(String) }
  def base_run_id
  end

  # The original run id of the workflow. For reset workflow.
  sig { params(value: String).void }
  def base_run_id=(value)
  end

  # The original run id of the workflow. For reset workflow.
  sig { void }
  def clear_base_run_id
  end

  # If the workflow is being reset, the new run id.
  sig { returns(String) }
  def new_run_id
  end

  # If the workflow is being reset, the new run id.
  sig { params(value: String).void }
  def new_run_id=(value)
  end

  # If the workflow is being reset, the new run id.
  sig { void }
  def clear_new_run_id
  end

  # TODO: ?
  sig { returns(Integer) }
  def fork_event_version
  end

  # TODO: ?
  sig { params(value: Integer).void }
  def fork_event_version=(value)
  end

  # TODO: ?
  sig { void }
  def clear_fork_event_version
  end

  # DEPRECATED since 1.21 - use `worker_version` instead.
# If a worker explicitly failed this task, its binary id
  sig { returns(String) }
  def binary_checksum
  end

  # DEPRECATED since 1.21 - use `worker_version` instead.
# If a worker explicitly failed this task, its binary id
  sig { params(value: String).void }
  def binary_checksum=(value)
  end

  # DEPRECATED since 1.21 - use `worker_version` instead.
# If a worker explicitly failed this task, its binary id
  sig { void }
  def clear_binary_checksum
  end

  # Version info of the worker who processed this workflow task. If present, the `build_id` field
# within is also used as `binary_checksum`, which may be omitted in that case (it may also be
# populated to preserve compatibility).
# Deprecated. Use the info inside the corresponding WorkflowTaskStartedEvent
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)) }
  def worker_version
  end

  # Version info of the worker who processed this workflow task. If present, the `build_id` field
# within is also used as `binary_checksum`, which may be omitted in that case (it may also be
# populated to preserve compatibility).
# Deprecated. Use the info inside the corresponding WorkflowTaskStartedEvent
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)).void }
  def worker_version=(value)
  end

  # Version info of the worker who processed this workflow task. If present, the `build_id` field
# within is also used as `binary_checksum`, which may be omitted in that case (it may also be
# populated to preserve compatibility).
# Deprecated. Use the info inside the corresponding WorkflowTaskStartedEvent
  sig { void }
  def clear_worker_version
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::ActivityTaskScheduledEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::ActivityTaskScheduledEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::ActivityTaskScheduledEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::ActivityTaskScheduledEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::ActivityTaskScheduledEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      activity_id: T.nilable(String),
      activity_type: T.nilable(Temporalio::Api::Common::V1::ActivityType),
      task_queue: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue),
      header: T.nilable(Temporalio::Api::Common::V1::Header),
      input: T.nilable(Temporalio::Api::Common::V1::Payloads),
      schedule_to_close_timeout: T.nilable(Google::Protobuf::Duration),
      schedule_to_start_timeout: T.nilable(Google::Protobuf::Duration),
      start_to_close_timeout: T.nilable(Google::Protobuf::Duration),
      heartbeat_timeout: T.nilable(Google::Protobuf::Duration),
      workflow_task_completed_event_id: T.nilable(Integer),
      retry_policy: T.nilable(Temporalio::Api::Common::V1::RetryPolicy),
      use_workflow_build_id: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    activity_id: "",
    activity_type: nil,
    task_queue: nil,
    header: nil,
    input: nil,
    schedule_to_close_timeout: nil,
    schedule_to_start_timeout: nil,
    start_to_close_timeout: nil,
    heartbeat_timeout: nil,
    workflow_task_completed_event_id: 0,
    retry_policy: nil,
    use_workflow_build_id: false
  )
  end

  # The worker/user assigned identifier for the activity
  sig { returns(String) }
  def activity_id
  end

  # The worker/user assigned identifier for the activity
  sig { params(value: String).void }
  def activity_id=(value)
  end

  # The worker/user assigned identifier for the activity
  sig { void }
  def clear_activity_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::ActivityType)) }
  def activity_type
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::ActivityType)).void }
  def activity_type=(value)
  end

  sig { void }
  def clear_activity_type
  end

  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)) }
  def task_queue
  end

  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)).void }
  def task_queue=(value)
  end

  sig { void }
  def clear_task_queue
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Header)) }
  def header
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Header)).void }
  def header=(value)
  end

  sig { void }
  def clear_header
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def input
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def input=(value)
  end

  sig { void }
  def clear_input
  end

  # Indicates how long the caller is willing to wait for an activity completion. Limits how long
# retries will be attempted. Either this or `start_to_close_timeout` must be specified.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def schedule_to_close_timeout
  end

  # Indicates how long the caller is willing to wait for an activity completion. Limits how long
# retries will be attempted. Either this or `start_to_close_timeout` must be specified.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def schedule_to_close_timeout=(value)
  end

  # Indicates how long the caller is willing to wait for an activity completion. Limits how long
# retries will be attempted. Either this or `start_to_close_timeout` must be specified.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { void }
  def clear_schedule_to_close_timeout
  end

  # Limits time an activity task can stay in a task queue before a worker picks it up. This
# timeout is always non retryable, as all a retry would achieve is to put it back into the same
# queue. Defaults to `schedule_to_close_timeout` or workflow execution timeout if not
# specified.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def schedule_to_start_timeout
  end

  # Limits time an activity task can stay in a task queue before a worker picks it up. This
# timeout is always non retryable, as all a retry would achieve is to put it back into the same
# queue. Defaults to `schedule_to_close_timeout` or workflow execution timeout if not
# specified.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def schedule_to_start_timeout=(value)
  end

  # Limits time an activity task can stay in a task queue before a worker picks it up. This
# timeout is always non retryable, as all a retry would achieve is to put it back into the same
# queue. Defaults to `schedule_to_close_timeout` or workflow execution timeout if not
# specified.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { void }
  def clear_schedule_to_start_timeout
  end

  # Maximum time an activity is allowed to execute after being picked up by a worker. This
# timeout is always retryable. Either this or `schedule_to_close_timeout` must be
# specified.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def start_to_close_timeout
  end

  # Maximum time an activity is allowed to execute after being picked up by a worker. This
# timeout is always retryable. Either this or `schedule_to_close_timeout` must be
# specified.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def start_to_close_timeout=(value)
  end

  # Maximum time an activity is allowed to execute after being picked up by a worker. This
# timeout is always retryable. Either this or `schedule_to_close_timeout` must be
# specified.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { void }
  def clear_start_to_close_timeout
  end

  # Maximum permitted time between successful worker heartbeats.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def heartbeat_timeout
  end

  # Maximum permitted time between successful worker heartbeats.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def heartbeat_timeout=(value)
  end

  # Maximum permitted time between successful worker heartbeats.
  sig { void }
  def clear_heartbeat_timeout
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { returns(Integer) }
  def workflow_task_completed_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { params(value: Integer).void }
  def workflow_task_completed_event_id=(value)
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { void }
  def clear_workflow_task_completed_event_id
  end

  # Activities are assigned a default retry policy controlled by the service's dynamic
# configuration. Retries will happen up to `schedule_to_close_timeout`. To disable retries set
# retry_policy.maximum_attempts to 1.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::RetryPolicy)) }
  def retry_policy
  end

  # Activities are assigned a default retry policy controlled by the service's dynamic
# configuration. Retries will happen up to `schedule_to_close_timeout`. To disable retries set
# retry_policy.maximum_attempts to 1.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::RetryPolicy)).void }
  def retry_policy=(value)
  end

  # Activities are assigned a default retry policy controlled by the service's dynamic
# configuration. Retries will happen up to `schedule_to_close_timeout`. To disable retries set
# retry_policy.maximum_attempts to 1.
  sig { void }
  def clear_retry_policy
  end

  # If this is set, the activity would be assigned to the Build ID of the workflow. Otherwise,
# Assignment rules of the activity's Task Queue will be used to determine the Build ID.
  sig { returns(T::Boolean) }
  def use_workflow_build_id
  end

  # If this is set, the activity would be assigned to the Build ID of the workflow. Otherwise,
# Assignment rules of the activity's Task Queue will be used to determine the Build ID.
  sig { params(value: T::Boolean).void }
  def use_workflow_build_id=(value)
  end

  # If this is set, the activity would be assigned to the Build ID of the workflow. Otherwise,
# Assignment rules of the activity's Task Queue will be used to determine the Build ID.
  sig { void }
  def clear_use_workflow_build_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::ActivityTaskStartedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::ActivityTaskStartedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::ActivityTaskStartedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::ActivityTaskStartedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::ActivityTaskStartedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      scheduled_event_id: T.nilable(Integer),
      identity: T.nilable(String),
      request_id: T.nilable(String),
      attempt: T.nilable(Integer),
      last_failure: T.nilable(Temporalio::Api::Failure::V1::Failure),
      worker_version: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp),
      build_id_redirect_counter: T.nilable(Integer)
    ).void
  end
  def initialize(
    scheduled_event_id: 0,
    identity: "",
    request_id: "",
    attempt: 0,
    last_failure: nil,
    worker_version: nil,
    build_id_redirect_counter: 0
  )
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this task corresponds to
  sig { returns(Integer) }
  def scheduled_event_id
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this task corresponds to
  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this task corresponds to
  sig { void }
  def clear_scheduled_event_id
  end

  # id of the worker that picked up this task
  sig { returns(String) }
  def identity
  end

  # id of the worker that picked up this task
  sig { params(value: String).void }
  def identity=(value)
  end

  # id of the worker that picked up this task
  sig { void }
  def clear_identity
  end

  # TODO ??
  sig { returns(String) }
  def request_id
  end

  # TODO ??
  sig { params(value: String).void }
  def request_id=(value)
  end

  # TODO ??
  sig { void }
  def clear_request_id
  end

  # Starting at 1, the number of times this task has been attempted
  sig { returns(Integer) }
  def attempt
  end

  # Starting at 1, the number of times this task has been attempted
  sig { params(value: Integer).void }
  def attempt=(value)
  end

  # Starting at 1, the number of times this task has been attempted
  sig { void }
  def clear_attempt
  end

  # Will be set to the most recent failure details, if this task has previously failed and then
# been retried.
  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def last_failure
  end

  # Will be set to the most recent failure details, if this task has previously failed and then
# been retried.
  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def last_failure=(value)
  end

  # Will be set to the most recent failure details, if this task has previously failed and then
# been retried.
  sig { void }
  def clear_last_failure
  end

  # Version info of the worker to whom this task was dispatched.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)) }
  def worker_version
  end

  # Version info of the worker to whom this task was dispatched.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)).void }
  def worker_version=(value)
  end

  # Version info of the worker to whom this task was dispatched.
  sig { void }
  def clear_worker_version
  end

  # Used by server internally to properly reapply build ID redirects to an execution
# when rebuilding it from events.
  sig { returns(Integer) }
  def build_id_redirect_counter
  end

  # Used by server internally to properly reapply build ID redirects to an execution
# when rebuilding it from events.
  sig { params(value: Integer).void }
  def build_id_redirect_counter=(value)
  end

  # Used by server internally to properly reapply build ID redirects to an execution
# when rebuilding it from events.
  sig { void }
  def clear_build_id_redirect_counter
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::ActivityTaskCompletedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::ActivityTaskCompletedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::ActivityTaskCompletedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::ActivityTaskCompletedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::ActivityTaskCompletedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      result: T.nilable(Temporalio::Api::Common::V1::Payloads),
      scheduled_event_id: T.nilable(Integer),
      started_event_id: T.nilable(Integer),
      identity: T.nilable(String),
      worker_version: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)
    ).void
  end
  def initialize(
    result: nil,
    scheduled_event_id: 0,
    started_event_id: 0,
    identity: "",
    worker_version: nil
  )
  end

  # Serialized results of the activity. IE: The return value of the activity function
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def result
  end

  # Serialized results of the activity. IE: The return value of the activity function
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def result=(value)
  end

  # Serialized results of the activity. IE: The return value of the activity function
  sig { void }
  def clear_result
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this completion corresponds to
  sig { returns(Integer) }
  def scheduled_event_id
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this completion corresponds to
  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this completion corresponds to
  sig { void }
  def clear_scheduled_event_id
  end

  # The id of the `ACTIVITY_TASK_STARTED` event this completion corresponds to
  sig { returns(Integer) }
  def started_event_id
  end

  # The id of the `ACTIVITY_TASK_STARTED` event this completion corresponds to
  sig { params(value: Integer).void }
  def started_event_id=(value)
  end

  # The id of the `ACTIVITY_TASK_STARTED` event this completion corresponds to
  sig { void }
  def clear_started_event_id
  end

  # id of the worker that completed this task
  sig { returns(String) }
  def identity
  end

  # id of the worker that completed this task
  sig { params(value: String).void }
  def identity=(value)
  end

  # id of the worker that completed this task
  sig { void }
  def clear_identity
  end

  # Version info of the worker who processed this workflow task.
# Deprecated. Use the info inside the corresponding ActivityTaskStartedEvent
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)) }
  def worker_version
  end

  # Version info of the worker who processed this workflow task.
# Deprecated. Use the info inside the corresponding ActivityTaskStartedEvent
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)).void }
  def worker_version=(value)
  end

  # Version info of the worker who processed this workflow task.
# Deprecated. Use the info inside the corresponding ActivityTaskStartedEvent
  sig { void }
  def clear_worker_version
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::ActivityTaskFailedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::ActivityTaskFailedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::ActivityTaskFailedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::ActivityTaskFailedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::ActivityTaskFailedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      failure: T.nilable(Temporalio::Api::Failure::V1::Failure),
      scheduled_event_id: T.nilable(Integer),
      started_event_id: T.nilable(Integer),
      identity: T.nilable(String),
      retry_state: T.nilable(T.any(Symbol, String, Integer)),
      worker_version: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)
    ).void
  end
  def initialize(
    failure: nil,
    scheduled_event_id: 0,
    started_event_id: 0,
    identity: "",
    retry_state: :RETRY_STATE_UNSPECIFIED,
    worker_version: nil
  )
  end

  # Failure details
  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def failure
  end

  # Failure details
  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def failure=(value)
  end

  # Failure details
  sig { void }
  def clear_failure
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this failure corresponds to
  sig { returns(Integer) }
  def scheduled_event_id
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this failure corresponds to
  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this failure corresponds to
  sig { void }
  def clear_scheduled_event_id
  end

  # The id of the `ACTIVITY_TASK_STARTED` event this failure corresponds to
  sig { returns(Integer) }
  def started_event_id
  end

  # The id of the `ACTIVITY_TASK_STARTED` event this failure corresponds to
  sig { params(value: Integer).void }
  def started_event_id=(value)
  end

  # The id of the `ACTIVITY_TASK_STARTED` event this failure corresponds to
  sig { void }
  def clear_started_event_id
  end

  # id of the worker that failed this task
  sig { returns(String) }
  def identity
  end

  # id of the worker that failed this task
  sig { params(value: String).void }
  def identity=(value)
  end

  # id of the worker that failed this task
  sig { void }
  def clear_identity
  end

  sig { returns(T.any(Symbol, Integer)) }
  def retry_state
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def retry_state=(value)
  end

  sig { void }
  def clear_retry_state
  end

  # Version info of the worker who processed this workflow task.
# Deprecated. Use the info inside the corresponding ActivityTaskStartedEvent
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)) }
  def worker_version
  end

  # Version info of the worker who processed this workflow task.
# Deprecated. Use the info inside the corresponding ActivityTaskStartedEvent
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)).void }
  def worker_version=(value)
  end

  # Version info of the worker who processed this workflow task.
# Deprecated. Use the info inside the corresponding ActivityTaskStartedEvent
  sig { void }
  def clear_worker_version
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::ActivityTaskTimedOutEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::ActivityTaskTimedOutEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::ActivityTaskTimedOutEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::ActivityTaskTimedOutEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::ActivityTaskTimedOutEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      failure: T.nilable(Temporalio::Api::Failure::V1::Failure),
      scheduled_event_id: T.nilable(Integer),
      started_event_id: T.nilable(Integer),
      retry_state: T.nilable(T.any(Symbol, String, Integer))
    ).void
  end
  def initialize(
    failure: nil,
    scheduled_event_id: 0,
    started_event_id: 0,
    retry_state: :RETRY_STATE_UNSPECIFIED
  )
  end

  # If this activity had failed, was retried, and then timed out, that failure is stored as the
# `cause` in here.
  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def failure
  end

  # If this activity had failed, was retried, and then timed out, that failure is stored as the
# `cause` in here.
  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def failure=(value)
  end

  # If this activity had failed, was retried, and then timed out, that failure is stored as the
# `cause` in here.
  sig { void }
  def clear_failure
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this timeout corresponds to
  sig { returns(Integer) }
  def scheduled_event_id
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this timeout corresponds to
  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this timeout corresponds to
  sig { void }
  def clear_scheduled_event_id
  end

  # The id of the `ACTIVITY_TASK_STARTED` event this timeout corresponds to
  sig { returns(Integer) }
  def started_event_id
  end

  # The id of the `ACTIVITY_TASK_STARTED` event this timeout corresponds to
  sig { params(value: Integer).void }
  def started_event_id=(value)
  end

  # The id of the `ACTIVITY_TASK_STARTED` event this timeout corresponds to
  sig { void }
  def clear_started_event_id
  end

  sig { returns(T.any(Symbol, Integer)) }
  def retry_state
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def retry_state=(value)
  end

  sig { void }
  def clear_retry_state
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::ActivityTaskCancelRequestedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::ActivityTaskCancelRequestedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::ActivityTaskCancelRequestedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::ActivityTaskCancelRequestedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::ActivityTaskCancelRequestedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      scheduled_event_id: T.nilable(Integer),
      workflow_task_completed_event_id: T.nilable(Integer)
    ).void
  end
  def initialize(
    scheduled_event_id: 0,
    workflow_task_completed_event_id: 0
  )
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this cancel request corresponds to
  sig { returns(Integer) }
  def scheduled_event_id
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this cancel request corresponds to
  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this cancel request corresponds to
  sig { void }
  def clear_scheduled_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { returns(Integer) }
  def workflow_task_completed_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { params(value: Integer).void }
  def workflow_task_completed_event_id=(value)
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { void }
  def clear_workflow_task_completed_event_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::ActivityTaskCanceledEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::ActivityTaskCanceledEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::ActivityTaskCanceledEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::ActivityTaskCanceledEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::ActivityTaskCanceledEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      details: T.nilable(Temporalio::Api::Common::V1::Payloads),
      latest_cancel_requested_event_id: T.nilable(Integer),
      scheduled_event_id: T.nilable(Integer),
      started_event_id: T.nilable(Integer),
      identity: T.nilable(String),
      worker_version: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)
    ).void
  end
  def initialize(
    details: nil,
    latest_cancel_requested_event_id: 0,
    scheduled_event_id: 0,
    started_event_id: 0,
    identity: "",
    worker_version: nil
  )
  end

  # Additional information that the activity reported upon confirming cancellation
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def details
  end

  # Additional information that the activity reported upon confirming cancellation
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def details=(value)
  end

  # Additional information that the activity reported upon confirming cancellation
  sig { void }
  def clear_details
  end

  # id of the most recent `ACTIVITY_TASK_CANCEL_REQUESTED` event which refers to the same
# activity
  sig { returns(Integer) }
  def latest_cancel_requested_event_id
  end

  # id of the most recent `ACTIVITY_TASK_CANCEL_REQUESTED` event which refers to the same
# activity
  sig { params(value: Integer).void }
  def latest_cancel_requested_event_id=(value)
  end

  # id of the most recent `ACTIVITY_TASK_CANCEL_REQUESTED` event which refers to the same
# activity
  sig { void }
  def clear_latest_cancel_requested_event_id
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this cancel confirmation corresponds to
  sig { returns(Integer) }
  def scheduled_event_id
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this cancel confirmation corresponds to
  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this cancel confirmation corresponds to
  sig { void }
  def clear_scheduled_event_id
  end

  # The id of the `ACTIVITY_TASK_STARTED` event this cancel confirmation corresponds to
  sig { returns(Integer) }
  def started_event_id
  end

  # The id of the `ACTIVITY_TASK_STARTED` event this cancel confirmation corresponds to
  sig { params(value: Integer).void }
  def started_event_id=(value)
  end

  # The id of the `ACTIVITY_TASK_STARTED` event this cancel confirmation corresponds to
  sig { void }
  def clear_started_event_id
  end

  # id of the worker who canceled this activity
  sig { returns(String) }
  def identity
  end

  # id of the worker who canceled this activity
  sig { params(value: String).void }
  def identity=(value)
  end

  # id of the worker who canceled this activity
  sig { void }
  def clear_identity
  end

  # Version info of the worker who processed this workflow task.
# Deprecated. Use the info inside the corresponding ActivityTaskStartedEvent
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)) }
  def worker_version
  end

  # Version info of the worker who processed this workflow task.
# Deprecated. Use the info inside the corresponding ActivityTaskStartedEvent
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)).void }
  def worker_version=(value)
  end

  # Version info of the worker who processed this workflow task.
# Deprecated. Use the info inside the corresponding ActivityTaskStartedEvent
  sig { void }
  def clear_worker_version
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::TimerStartedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::TimerStartedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::TimerStartedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::TimerStartedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::TimerStartedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      timer_id: T.nilable(String),
      start_to_fire_timeout: T.nilable(Google::Protobuf::Duration),
      workflow_task_completed_event_id: T.nilable(Integer)
    ).void
  end
  def initialize(
    timer_id: "",
    start_to_fire_timeout: nil,
    workflow_task_completed_event_id: 0
  )
  end

  # The worker/user assigned id for this timer
  sig { returns(String) }
  def timer_id
  end

  # The worker/user assigned id for this timer
  sig { params(value: String).void }
  def timer_id=(value)
  end

  # The worker/user assigned id for this timer
  sig { void }
  def clear_timer_id
  end

  # How long until this timer fires
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def start_to_fire_timeout
  end

  # How long until this timer fires
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def start_to_fire_timeout=(value)
  end

  # How long until this timer fires
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { void }
  def clear_start_to_fire_timeout
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { returns(Integer) }
  def workflow_task_completed_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { params(value: Integer).void }
  def workflow_task_completed_event_id=(value)
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { void }
  def clear_workflow_task_completed_event_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::TimerFiredEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::TimerFiredEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::TimerFiredEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::TimerFiredEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::TimerFiredEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      timer_id: T.nilable(String),
      started_event_id: T.nilable(Integer)
    ).void
  end
  def initialize(
    timer_id: "",
    started_event_id: 0
  )
  end

  # Will match the `timer_id` from `TIMER_STARTED` event for this timer
  sig { returns(String) }
  def timer_id
  end

  # Will match the `timer_id` from `TIMER_STARTED` event for this timer
  sig { params(value: String).void }
  def timer_id=(value)
  end

  # Will match the `timer_id` from `TIMER_STARTED` event for this timer
  sig { void }
  def clear_timer_id
  end

  # The id of the `TIMER_STARTED` event itself
  sig { returns(Integer) }
  def started_event_id
  end

  # The id of the `TIMER_STARTED` event itself
  sig { params(value: Integer).void }
  def started_event_id=(value)
  end

  # The id of the `TIMER_STARTED` event itself
  sig { void }
  def clear_started_event_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::TimerCanceledEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::TimerCanceledEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::TimerCanceledEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::TimerCanceledEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::TimerCanceledEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      timer_id: T.nilable(String),
      started_event_id: T.nilable(Integer),
      workflow_task_completed_event_id: T.nilable(Integer),
      identity: T.nilable(String)
    ).void
  end
  def initialize(
    timer_id: "",
    started_event_id: 0,
    workflow_task_completed_event_id: 0,
    identity: ""
  )
  end

  # Will match the `timer_id` from `TIMER_STARTED` event for this timer
  sig { returns(String) }
  def timer_id
  end

  # Will match the `timer_id` from `TIMER_STARTED` event for this timer
  sig { params(value: String).void }
  def timer_id=(value)
  end

  # Will match the `timer_id` from `TIMER_STARTED` event for this timer
  sig { void }
  def clear_timer_id
  end

  # The id of the `TIMER_STARTED` event itself
  sig { returns(Integer) }
  def started_event_id
  end

  # The id of the `TIMER_STARTED` event itself
  sig { params(value: Integer).void }
  def started_event_id=(value)
  end

  # The id of the `TIMER_STARTED` event itself
  sig { void }
  def clear_started_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { returns(Integer) }
  def workflow_task_completed_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { params(value: Integer).void }
  def workflow_task_completed_event_id=(value)
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { void }
  def clear_workflow_task_completed_event_id
  end

  # The id of the worker who requested this cancel
  sig { returns(String) }
  def identity
  end

  # The id of the worker who requested this cancel
  sig { params(value: String).void }
  def identity=(value)
  end

  # The id of the worker who requested this cancel
  sig { void }
  def clear_identity
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::WorkflowExecutionCancelRequestedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::WorkflowExecutionCancelRequestedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionCancelRequestedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::WorkflowExecutionCancelRequestedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionCancelRequestedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      cause: T.nilable(String),
      external_initiated_event_id: T.nilable(Integer),
      external_workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      identity: T.nilable(String)
    ).void
  end
  def initialize(
    cause: "",
    external_initiated_event_id: 0,
    external_workflow_execution: nil,
    identity: ""
  )
  end

  # User provided reason for requesting cancellation
# TODO: shall we create a new field with name "reason" and deprecate this one?
  sig { returns(String) }
  def cause
  end

  # User provided reason for requesting cancellation
# TODO: shall we create a new field with name "reason" and deprecate this one?
  sig { params(value: String).void }
  def cause=(value)
  end

  # User provided reason for requesting cancellation
# TODO: shall we create a new field with name "reason" and deprecate this one?
  sig { void }
  def clear_cause
  end

  # TODO: Is this the ID of the event in the workflow which initiated this cancel, if there was one?
  sig { returns(Integer) }
  def external_initiated_event_id
  end

  # TODO: Is this the ID of the event in the workflow which initiated this cancel, if there was one?
  sig { params(value: Integer).void }
  def external_initiated_event_id=(value)
  end

  # TODO: Is this the ID of the event in the workflow which initiated this cancel, if there was one?
  sig { void }
  def clear_external_initiated_event_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def external_workflow_execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def external_workflow_execution=(value)
  end

  sig { void }
  def clear_external_workflow_execution
  end

  # id of the worker or client who requested this cancel
  sig { returns(String) }
  def identity
  end

  # id of the worker or client who requested this cancel
  sig { params(value: String).void }
  def identity=(value)
  end

  # id of the worker or client who requested this cancel
  sig { void }
  def clear_identity
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::WorkflowExecutionCanceledEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::WorkflowExecutionCanceledEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionCanceledEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::WorkflowExecutionCanceledEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionCanceledEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      workflow_task_completed_event_id: T.nilable(Integer),
      details: T.nilable(Temporalio::Api::Common::V1::Payloads)
    ).void
  end
  def initialize(
    workflow_task_completed_event_id: 0,
    details: nil
  )
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { returns(Integer) }
  def workflow_task_completed_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { params(value: Integer).void }
  def workflow_task_completed_event_id=(value)
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { void }
  def clear_workflow_task_completed_event_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def details
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def details=(value)
  end

  sig { void }
  def clear_details
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::MarkerRecordedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::MarkerRecordedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::MarkerRecordedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::MarkerRecordedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::MarkerRecordedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      marker_name: T.nilable(String),
      details: T.nilable(T::Hash[String, T.nilable(Temporalio::Api::Common::V1::Payloads)]),
      workflow_task_completed_event_id: T.nilable(Integer),
      header: T.nilable(Temporalio::Api::Common::V1::Header),
      failure: T.nilable(Temporalio::Api::Failure::V1::Failure)
    ).void
  end
  def initialize(
    marker_name: "",
    details: ::Google::Protobuf::Map.new(:string, :message, Temporalio::Api::Common::V1::Payloads),
    workflow_task_completed_event_id: 0,
    header: nil,
    failure: nil
  )
  end

  # Workers use this to identify the "types" of various markers. Ex: Local activity, side effect.
  sig { returns(String) }
  def marker_name
  end

  # Workers use this to identify the "types" of various markers. Ex: Local activity, side effect.
  sig { params(value: String).void }
  def marker_name=(value)
  end

  # Workers use this to identify the "types" of various markers. Ex: Local activity, side effect.
  sig { void }
  def clear_marker_name
  end

  # Serialized information recorded in the marker
  sig { returns(T::Hash[String, T.nilable(Temporalio::Api::Common::V1::Payloads)]) }
  def details
  end

  # Serialized information recorded in the marker
  sig { params(value: ::Google::Protobuf::Map).void }
  def details=(value)
  end

  # Serialized information recorded in the marker
  sig { void }
  def clear_details
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { returns(Integer) }
  def workflow_task_completed_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { params(value: Integer).void }
  def workflow_task_completed_event_id=(value)
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { void }
  def clear_workflow_task_completed_event_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Header)) }
  def header
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Header)).void }
  def header=(value)
  end

  sig { void }
  def clear_header
  end

  # Some uses of markers, like a local activity, could "fail". If they did that is recorded here.
  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def failure
  end

  # Some uses of markers, like a local activity, could "fail". If they did that is recorded here.
  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def failure=(value)
  end

  # Some uses of markers, like a local activity, could "fail". If they did that is recorded here.
  sig { void }
  def clear_failure
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::WorkflowExecutionSignaledEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::WorkflowExecutionSignaledEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionSignaledEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::WorkflowExecutionSignaledEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionSignaledEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      signal_name: T.nilable(String),
      input: T.nilable(Temporalio::Api::Common::V1::Payloads),
      identity: T.nilable(String),
      header: T.nilable(Temporalio::Api::Common::V1::Header),
      skip_generate_workflow_task: T.nilable(T::Boolean),
      external_workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)
    ).void
  end
  def initialize(
    signal_name: "",
    input: nil,
    identity: "",
    header: nil,
    skip_generate_workflow_task: false,
    external_workflow_execution: nil
  )
  end

  # The name/type of the signal to fire
  sig { returns(String) }
  def signal_name
  end

  # The name/type of the signal to fire
  sig { params(value: String).void }
  def signal_name=(value)
  end

  # The name/type of the signal to fire
  sig { void }
  def clear_signal_name
  end

  # Will be deserialized and provided as argument(s) to the signal handler
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def input
  end

  # Will be deserialized and provided as argument(s) to the signal handler
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def input=(value)
  end

  # Will be deserialized and provided as argument(s) to the signal handler
  sig { void }
  def clear_input
  end

  # id of the worker/client who sent this signal
  sig { returns(String) }
  def identity
  end

  # id of the worker/client who sent this signal
  sig { params(value: String).void }
  def identity=(value)
  end

  # id of the worker/client who sent this signal
  sig { void }
  def clear_identity
  end

  # Headers that were passed by the sender of the signal and copied by temporal 
# server into the workflow task.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Header)) }
  def header
  end

  # Headers that were passed by the sender of the signal and copied by temporal 
# server into the workflow task.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Header)).void }
  def header=(value)
  end

  # Headers that were passed by the sender of the signal and copied by temporal 
# server into the workflow task.
  sig { void }
  def clear_header
  end

  # Indicates the signal did not generate a new workflow task when received.
  sig { returns(T::Boolean) }
  def skip_generate_workflow_task
  end

  # Indicates the signal did not generate a new workflow task when received.
  sig { params(value: T::Boolean).void }
  def skip_generate_workflow_task=(value)
  end

  # Indicates the signal did not generate a new workflow task when received.
  sig { void }
  def clear_skip_generate_workflow_task
  end

  # When signal origin is a workflow execution, this field is set.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def external_workflow_execution
  end

  # When signal origin is a workflow execution, this field is set.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def external_workflow_execution=(value)
  end

  # When signal origin is a workflow execution, this field is set.
  sig { void }
  def clear_external_workflow_execution
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::WorkflowExecutionTerminatedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::WorkflowExecutionTerminatedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionTerminatedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::WorkflowExecutionTerminatedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionTerminatedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      reason: T.nilable(String),
      details: T.nilable(Temporalio::Api::Common::V1::Payloads),
      identity: T.nilable(String)
    ).void
  end
  def initialize(
    reason: "",
    details: nil,
    identity: ""
  )
  end

  # User/client provided reason for termination
  sig { returns(String) }
  def reason
  end

  # User/client provided reason for termination
  sig { params(value: String).void }
  def reason=(value)
  end

  # User/client provided reason for termination
  sig { void }
  def clear_reason
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def details
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def details=(value)
  end

  sig { void }
  def clear_details
  end

  # id of the client who requested termination
  sig { returns(String) }
  def identity
  end

  # id of the client who requested termination
  sig { params(value: String).void }
  def identity=(value)
  end

  # id of the client who requested termination
  sig { void }
  def clear_identity
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::RequestCancelExternalWorkflowExecutionInitiatedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::RequestCancelExternalWorkflowExecutionInitiatedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::RequestCancelExternalWorkflowExecutionInitiatedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::RequestCancelExternalWorkflowExecutionInitiatedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      workflow_task_completed_event_id: T.nilable(Integer),
      namespace: T.nilable(String),
      namespace_id: T.nilable(String),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      control: T.nilable(String),
      child_workflow_only: T.nilable(T::Boolean),
      reason: T.nilable(String)
    ).void
  end
  def initialize(
    workflow_task_completed_event_id: 0,
    namespace: "",
    namespace_id: "",
    workflow_execution: nil,
    control: "",
    child_workflow_only: false,
    reason: ""
  )
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { returns(Integer) }
  def workflow_task_completed_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { params(value: Integer).void }
  def workflow_task_completed_event_id=(value)
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { void }
  def clear_workflow_task_completed_event_id
  end

  # The namespace the workflow to be cancelled lives in.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { returns(String) }
  def namespace
  end

  # The namespace the workflow to be cancelled lives in.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # The namespace the workflow to be cancelled lives in.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def namespace_id
  end

  sig { params(value: String).void }
  def namespace_id=(value)
  end

  sig { void }
  def clear_namespace_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  sig { void }
  def clear_workflow_execution
  end

  # Deprecated
  sig { returns(String) }
  def control
  end

  # Deprecated
  sig { params(value: String).void }
  def control=(value)
  end

  # Deprecated
  sig { void }
  def clear_control
  end

  # Workers are expected to set this to true if the workflow they are requesting to cancel is
# a child of the workflow which issued the request
  sig { returns(T::Boolean) }
  def child_workflow_only
  end

  # Workers are expected to set this to true if the workflow they are requesting to cancel is
# a child of the workflow which issued the request
  sig { params(value: T::Boolean).void }
  def child_workflow_only=(value)
  end

  # Workers are expected to set this to true if the workflow they are requesting to cancel is
# a child of the workflow which issued the request
  sig { void }
  def clear_child_workflow_only
  end

  # Reason for requesting the cancellation
  sig { returns(String) }
  def reason
  end

  # Reason for requesting the cancellation
  sig { params(value: String).void }
  def reason=(value)
  end

  # Reason for requesting the cancellation
  sig { void }
  def clear_reason
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::RequestCancelExternalWorkflowExecutionFailedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::RequestCancelExternalWorkflowExecutionFailedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::RequestCancelExternalWorkflowExecutionFailedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::RequestCancelExternalWorkflowExecutionFailedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::RequestCancelExternalWorkflowExecutionFailedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      cause: T.nilable(T.any(Symbol, String, Integer)),
      workflow_task_completed_event_id: T.nilable(Integer),
      namespace: T.nilable(String),
      namespace_id: T.nilable(String),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      initiated_event_id: T.nilable(Integer),
      control: T.nilable(String)
    ).void
  end
  def initialize(
    cause: :CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED,
    workflow_task_completed_event_id: 0,
    namespace: "",
    namespace_id: "",
    workflow_execution: nil,
    initiated_event_id: 0,
    control: ""
  )
  end

  sig { returns(T.any(Symbol, Integer)) }
  def cause
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def cause=(value)
  end

  sig { void }
  def clear_cause
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { returns(Integer) }
  def workflow_task_completed_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { params(value: Integer).void }
  def workflow_task_completed_event_id=(value)
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { void }
  def clear_workflow_task_completed_event_id
  end

  # Namespace of the workflow which failed to cancel.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { returns(String) }
  def namespace
  end

  # Namespace of the workflow which failed to cancel.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace of the workflow which failed to cancel.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def namespace_id
  end

  sig { params(value: String).void }
  def namespace_id=(value)
  end

  sig { void }
  def clear_namespace_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  sig { void }
  def clear_workflow_execution
  end

  # id of the `REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED` event this failure
# corresponds to
  sig { returns(Integer) }
  def initiated_event_id
  end

  # id of the `REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED` event this failure
# corresponds to
  sig { params(value: Integer).void }
  def initiated_event_id=(value)
  end

  # id of the `REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED` event this failure
# corresponds to
  sig { void }
  def clear_initiated_event_id
  end

  # Deprecated
  sig { returns(String) }
  def control
  end

  # Deprecated
  sig { params(value: String).void }
  def control=(value)
  end

  # Deprecated
  sig { void }
  def clear_control
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::ExternalWorkflowExecutionCancelRequestedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::ExternalWorkflowExecutionCancelRequestedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::ExternalWorkflowExecutionCancelRequestedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::ExternalWorkflowExecutionCancelRequestedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::ExternalWorkflowExecutionCancelRequestedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      initiated_event_id: T.nilable(Integer),
      namespace: T.nilable(String),
      namespace_id: T.nilable(String),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)
    ).void
  end
  def initialize(
    initiated_event_id: 0,
    namespace: "",
    namespace_id: "",
    workflow_execution: nil
  )
  end

  # id of the `REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED` event this event corresponds
# to
  sig { returns(Integer) }
  def initiated_event_id
  end

  # id of the `REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED` event this event corresponds
# to
  sig { params(value: Integer).void }
  def initiated_event_id=(value)
  end

  # id of the `REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED` event this event corresponds
# to
  sig { void }
  def clear_initiated_event_id
  end

  # Namespace of the to-be-cancelled workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { returns(String) }
  def namespace
  end

  # Namespace of the to-be-cancelled workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace of the to-be-cancelled workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def namespace_id
  end

  sig { params(value: String).void }
  def namespace_id=(value)
  end

  sig { void }
  def clear_namespace_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  sig { void }
  def clear_workflow_execution
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::SignalExternalWorkflowExecutionInitiatedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::SignalExternalWorkflowExecutionInitiatedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::SignalExternalWorkflowExecutionInitiatedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::SignalExternalWorkflowExecutionInitiatedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::SignalExternalWorkflowExecutionInitiatedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      workflow_task_completed_event_id: T.nilable(Integer),
      namespace: T.nilable(String),
      namespace_id: T.nilable(String),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      signal_name: T.nilable(String),
      input: T.nilable(Temporalio::Api::Common::V1::Payloads),
      control: T.nilable(String),
      child_workflow_only: T.nilable(T::Boolean),
      header: T.nilable(Temporalio::Api::Common::V1::Header)
    ).void
  end
  def initialize(
    workflow_task_completed_event_id: 0,
    namespace: "",
    namespace_id: "",
    workflow_execution: nil,
    signal_name: "",
    input: nil,
    control: "",
    child_workflow_only: false,
    header: nil
  )
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { returns(Integer) }
  def workflow_task_completed_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { params(value: Integer).void }
  def workflow_task_completed_event_id=(value)
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { void }
  def clear_workflow_task_completed_event_id
  end

  # Namespace of the to-be-signalled workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { returns(String) }
  def namespace
  end

  # Namespace of the to-be-signalled workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace of the to-be-signalled workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def namespace_id
  end

  sig { params(value: String).void }
  def namespace_id=(value)
  end

  sig { void }
  def clear_namespace_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  sig { void }
  def clear_workflow_execution
  end

  # name/type of the signal to fire in the external workflow
  sig { returns(String) }
  def signal_name
  end

  # name/type of the signal to fire in the external workflow
  sig { params(value: String).void }
  def signal_name=(value)
  end

  # name/type of the signal to fire in the external workflow
  sig { void }
  def clear_signal_name
  end

  # Serialized arguments to provide to the signal handler
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def input
  end

  # Serialized arguments to provide to the signal handler
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def input=(value)
  end

  # Serialized arguments to provide to the signal handler
  sig { void }
  def clear_input
  end

  # Deprecated
  sig { returns(String) }
  def control
  end

  # Deprecated
  sig { params(value: String).void }
  def control=(value)
  end

  # Deprecated
  sig { void }
  def clear_control
  end

  # Workers are expected to set this to true if the workflow they are requesting to cancel is
# a child of the workflow which issued the request
  sig { returns(T::Boolean) }
  def child_workflow_only
  end

  # Workers are expected to set this to true if the workflow they are requesting to cancel is
# a child of the workflow which issued the request
  sig { params(value: T::Boolean).void }
  def child_workflow_only=(value)
  end

  # Workers are expected to set this to true if the workflow they are requesting to cancel is
# a child of the workflow which issued the request
  sig { void }
  def clear_child_workflow_only
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Header)) }
  def header
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Header)).void }
  def header=(value)
  end

  sig { void }
  def clear_header
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::SignalExternalWorkflowExecutionFailedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::SignalExternalWorkflowExecutionFailedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::SignalExternalWorkflowExecutionFailedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::SignalExternalWorkflowExecutionFailedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::SignalExternalWorkflowExecutionFailedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      cause: T.nilable(T.any(Symbol, String, Integer)),
      workflow_task_completed_event_id: T.nilable(Integer),
      namespace: T.nilable(String),
      namespace_id: T.nilable(String),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      initiated_event_id: T.nilable(Integer),
      control: T.nilable(String)
    ).void
  end
  def initialize(
    cause: :SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED,
    workflow_task_completed_event_id: 0,
    namespace: "",
    namespace_id: "",
    workflow_execution: nil,
    initiated_event_id: 0,
    control: ""
  )
  end

  sig { returns(T.any(Symbol, Integer)) }
  def cause
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def cause=(value)
  end

  sig { void }
  def clear_cause
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { returns(Integer) }
  def workflow_task_completed_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { params(value: Integer).void }
  def workflow_task_completed_event_id=(value)
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { void }
  def clear_workflow_task_completed_event_id
  end

  # Namespace of the workflow which failed the signal.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { returns(String) }
  def namespace
  end

  # Namespace of the workflow which failed the signal.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace of the workflow which failed the signal.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def namespace_id
  end

  sig { params(value: String).void }
  def namespace_id=(value)
  end

  sig { void }
  def clear_namespace_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  sig { void }
  def clear_workflow_execution
  end

  sig { returns(Integer) }
  def initiated_event_id
  end

  sig { params(value: Integer).void }
  def initiated_event_id=(value)
  end

  sig { void }
  def clear_initiated_event_id
  end

  # Deprecated
  sig { returns(String) }
  def control
  end

  # Deprecated
  sig { params(value: String).void }
  def control=(value)
  end

  # Deprecated
  sig { void }
  def clear_control
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::ExternalWorkflowExecutionSignaledEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::ExternalWorkflowExecutionSignaledEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::ExternalWorkflowExecutionSignaledEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::ExternalWorkflowExecutionSignaledEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::ExternalWorkflowExecutionSignaledEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      initiated_event_id: T.nilable(Integer),
      namespace: T.nilable(String),
      namespace_id: T.nilable(String),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      control: T.nilable(String)
    ).void
  end
  def initialize(
    initiated_event_id: 0,
    namespace: "",
    namespace_id: "",
    workflow_execution: nil,
    control: ""
  )
  end

  # id of the `SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED` event this event corresponds to
  sig { returns(Integer) }
  def initiated_event_id
  end

  # id of the `SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED` event this event corresponds to
  sig { params(value: Integer).void }
  def initiated_event_id=(value)
  end

  # id of the `SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED` event this event corresponds to
  sig { void }
  def clear_initiated_event_id
  end

  # Namespace of the workflow which was signaled.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { returns(String) }
  def namespace
  end

  # Namespace of the workflow which was signaled.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace of the workflow which was signaled.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def namespace_id
  end

  sig { params(value: String).void }
  def namespace_id=(value)
  end

  sig { void }
  def clear_namespace_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  sig { void }
  def clear_workflow_execution
  end

  # Deprecated
  sig { returns(String) }
  def control
  end

  # Deprecated
  sig { params(value: String).void }
  def control=(value)
  end

  # Deprecated
  sig { void }
  def clear_control
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::UpsertWorkflowSearchAttributesEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::UpsertWorkflowSearchAttributesEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::UpsertWorkflowSearchAttributesEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::UpsertWorkflowSearchAttributesEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::UpsertWorkflowSearchAttributesEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      workflow_task_completed_event_id: T.nilable(Integer),
      search_attributes: T.nilable(Temporalio::Api::Common::V1::SearchAttributes)
    ).void
  end
  def initialize(
    workflow_task_completed_event_id: 0,
    search_attributes: nil
  )
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { returns(Integer) }
  def workflow_task_completed_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { params(value: Integer).void }
  def workflow_task_completed_event_id=(value)
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { void }
  def clear_workflow_task_completed_event_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::SearchAttributes)) }
  def search_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::SearchAttributes)).void }
  def search_attributes=(value)
  end

  sig { void }
  def clear_search_attributes
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::WorkflowPropertiesModifiedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::WorkflowPropertiesModifiedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowPropertiesModifiedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::WorkflowPropertiesModifiedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowPropertiesModifiedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      workflow_task_completed_event_id: T.nilable(Integer),
      upserted_memo: T.nilable(Temporalio::Api::Common::V1::Memo)
    ).void
  end
  def initialize(
    workflow_task_completed_event_id: 0,
    upserted_memo: nil
  )
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { returns(Integer) }
  def workflow_task_completed_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { params(value: Integer).void }
  def workflow_task_completed_event_id=(value)
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { void }
  def clear_workflow_task_completed_event_id
  end

  # If set, update the workflow memo with the provided values. The values will be merged with
# the existing memo. If the user wants to delete values, a default/empty Payload should be
# used as the value for the key being deleted.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Memo)) }
  def upserted_memo
  end

  # If set, update the workflow memo with the provided values. The values will be merged with
# the existing memo. If the user wants to delete values, a default/empty Payload should be
# used as the value for the key being deleted.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Memo)).void }
  def upserted_memo=(value)
  end

  # If set, update the workflow memo with the provided values. The values will be merged with
# the existing memo. If the user wants to delete values, a default/empty Payload should be
# used as the value for the key being deleted.
  sig { void }
  def clear_upserted_memo
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::StartChildWorkflowExecutionInitiatedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::StartChildWorkflowExecutionInitiatedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::StartChildWorkflowExecutionInitiatedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::StartChildWorkflowExecutionInitiatedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::StartChildWorkflowExecutionInitiatedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      namespace_id: T.nilable(String),
      workflow_id: T.nilable(String),
      workflow_type: T.nilable(Temporalio::Api::Common::V1::WorkflowType),
      task_queue: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue),
      input: T.nilable(Temporalio::Api::Common::V1::Payloads),
      workflow_execution_timeout: T.nilable(Google::Protobuf::Duration),
      workflow_run_timeout: T.nilable(Google::Protobuf::Duration),
      workflow_task_timeout: T.nilable(Google::Protobuf::Duration),
      parent_close_policy: T.nilable(T.any(Symbol, String, Integer)),
      control: T.nilable(String),
      workflow_task_completed_event_id: T.nilable(Integer),
      workflow_id_reuse_policy: T.nilable(T.any(Symbol, String, Integer)),
      retry_policy: T.nilable(Temporalio::Api::Common::V1::RetryPolicy),
      cron_schedule: T.nilable(String),
      header: T.nilable(Temporalio::Api::Common::V1::Header),
      memo: T.nilable(Temporalio::Api::Common::V1::Memo),
      search_attributes: T.nilable(Temporalio::Api::Common::V1::SearchAttributes),
      inherit_build_id: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    namespace: "",
    namespace_id: "",
    workflow_id: "",
    workflow_type: nil,
    task_queue: nil,
    input: nil,
    workflow_execution_timeout: nil,
    workflow_run_timeout: nil,
    workflow_task_timeout: nil,
    parent_close_policy: :PARENT_CLOSE_POLICY_UNSPECIFIED,
    control: "",
    workflow_task_completed_event_id: 0,
    workflow_id_reuse_policy: :WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED,
    retry_policy: nil,
    cron_schedule: "",
    header: nil,
    memo: nil,
    search_attributes: nil,
    inherit_build_id: false
  )
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { returns(String) }
  def namespace
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def namespace_id
  end

  sig { params(value: String).void }
  def namespace_id=(value)
  end

  sig { void }
  def clear_namespace_id
  end

  sig { returns(String) }
  def workflow_id
  end

  sig { params(value: String).void }
  def workflow_id=(value)
  end

  sig { void }
  def clear_workflow_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowType)) }
  def workflow_type
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowType)).void }
  def workflow_type=(value)
  end

  sig { void }
  def clear_workflow_type
  end

  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)) }
  def task_queue
  end

  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)).void }
  def task_queue=(value)
  end

  sig { void }
  def clear_task_queue
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def input
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def input=(value)
  end

  sig { void }
  def clear_input
  end

  # Total workflow execution timeout including retries and continue as new.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_execution_timeout
  end

  # Total workflow execution timeout including retries and continue as new.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_execution_timeout=(value)
  end

  # Total workflow execution timeout including retries and continue as new.
  sig { void }
  def clear_workflow_execution_timeout
  end

  # Timeout of a single workflow run.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_run_timeout
  end

  # Timeout of a single workflow run.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_run_timeout=(value)
  end

  # Timeout of a single workflow run.
  sig { void }
  def clear_workflow_run_timeout
  end

  # Timeout of a single workflow task.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_task_timeout
  end

  # Timeout of a single workflow task.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_task_timeout=(value)
  end

  # Timeout of a single workflow task.
  sig { void }
  def clear_workflow_task_timeout
  end

  # Default: PARENT_CLOSE_POLICY_TERMINATE.
  sig { returns(T.any(Symbol, Integer)) }
  def parent_close_policy
  end

  # Default: PARENT_CLOSE_POLICY_TERMINATE.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def parent_close_policy=(value)
  end

  # Default: PARENT_CLOSE_POLICY_TERMINATE.
  sig { void }
  def clear_parent_close_policy
  end

  # Deprecated
  sig { returns(String) }
  def control
  end

  # Deprecated
  sig { params(value: String).void }
  def control=(value)
  end

  # Deprecated
  sig { void }
  def clear_control
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { returns(Integer) }
  def workflow_task_completed_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { params(value: Integer).void }
  def workflow_task_completed_event_id=(value)
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { void }
  def clear_workflow_task_completed_event_id
  end

  # Default: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
  sig { returns(T.any(Symbol, Integer)) }
  def workflow_id_reuse_policy
  end

  # Default: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def workflow_id_reuse_policy=(value)
  end

  # Default: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
  sig { void }
  def clear_workflow_id_reuse_policy
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::RetryPolicy)) }
  def retry_policy
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::RetryPolicy)).void }
  def retry_policy=(value)
  end

  sig { void }
  def clear_retry_policy
  end

  # If this child runs on a cron schedule, it will appear here
  sig { returns(String) }
  def cron_schedule
  end

  # If this child runs on a cron schedule, it will appear here
  sig { params(value: String).void }
  def cron_schedule=(value)
  end

  # If this child runs on a cron schedule, it will appear here
  sig { void }
  def clear_cron_schedule
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Header)) }
  def header
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Header)).void }
  def header=(value)
  end

  sig { void }
  def clear_header
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Memo)) }
  def memo
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Memo)).void }
  def memo=(value)
  end

  sig { void }
  def clear_memo
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::SearchAttributes)) }
  def search_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::SearchAttributes)).void }
  def search_attributes=(value)
  end

  sig { void }
  def clear_search_attributes
  end

  # If this is set, the child workflow inherits the Build ID of the parent. Otherwise, the assignment
# rules of the child's Task Queue will be used to independently assign a Build ID to it.
  sig { returns(T::Boolean) }
  def inherit_build_id
  end

  # If this is set, the child workflow inherits the Build ID of the parent. Otherwise, the assignment
# rules of the child's Task Queue will be used to independently assign a Build ID to it.
  sig { params(value: T::Boolean).void }
  def inherit_build_id=(value)
  end

  # If this is set, the child workflow inherits the Build ID of the parent. Otherwise, the assignment
# rules of the child's Task Queue will be used to independently assign a Build ID to it.
  sig { void }
  def clear_inherit_build_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::StartChildWorkflowExecutionFailedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::StartChildWorkflowExecutionFailedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::StartChildWorkflowExecutionFailedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::StartChildWorkflowExecutionFailedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::StartChildWorkflowExecutionFailedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      namespace_id: T.nilable(String),
      workflow_id: T.nilable(String),
      workflow_type: T.nilable(Temporalio::Api::Common::V1::WorkflowType),
      cause: T.nilable(T.any(Symbol, String, Integer)),
      control: T.nilable(String),
      initiated_event_id: T.nilable(Integer),
      workflow_task_completed_event_id: T.nilable(Integer)
    ).void
  end
  def initialize(
    namespace: "",
    namespace_id: "",
    workflow_id: "",
    workflow_type: nil,
    cause: :START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED,
    control: "",
    initiated_event_id: 0,
    workflow_task_completed_event_id: 0
  )
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { returns(String) }
  def namespace
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def namespace_id
  end

  sig { params(value: String).void }
  def namespace_id=(value)
  end

  sig { void }
  def clear_namespace_id
  end

  sig { returns(String) }
  def workflow_id
  end

  sig { params(value: String).void }
  def workflow_id=(value)
  end

  sig { void }
  def clear_workflow_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowType)) }
  def workflow_type
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowType)).void }
  def workflow_type=(value)
  end

  sig { void }
  def clear_workflow_type
  end

  sig { returns(T.any(Symbol, Integer)) }
  def cause
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def cause=(value)
  end

  sig { void }
  def clear_cause
  end

  # Deprecated
  sig { returns(String) }
  def control
  end

  # Deprecated
  sig { params(value: String).void }
  def control=(value)
  end

  # Deprecated
  sig { void }
  def clear_control
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { returns(Integer) }
  def initiated_event_id
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { params(value: Integer).void }
  def initiated_event_id=(value)
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { void }
  def clear_initiated_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { returns(Integer) }
  def workflow_task_completed_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { params(value: Integer).void }
  def workflow_task_completed_event_id=(value)
  end

  # The `WORKFLOW_TASK_COMPLETED` event which this command was reported with
  sig { void }
  def clear_workflow_task_completed_event_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::ChildWorkflowExecutionStartedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::ChildWorkflowExecutionStartedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::ChildWorkflowExecutionStartedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::ChildWorkflowExecutionStartedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::ChildWorkflowExecutionStartedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      namespace_id: T.nilable(String),
      initiated_event_id: T.nilable(Integer),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      workflow_type: T.nilable(Temporalio::Api::Common::V1::WorkflowType),
      header: T.nilable(Temporalio::Api::Common::V1::Header)
    ).void
  end
  def initialize(
    namespace: "",
    namespace_id: "",
    initiated_event_id: 0,
    workflow_execution: nil,
    workflow_type: nil,
    header: nil
  )
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { returns(String) }
  def namespace
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def namespace_id
  end

  sig { params(value: String).void }
  def namespace_id=(value)
  end

  sig { void }
  def clear_namespace_id
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { returns(Integer) }
  def initiated_event_id
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { params(value: Integer).void }
  def initiated_event_id=(value)
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { void }
  def clear_initiated_event_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  sig { void }
  def clear_workflow_execution
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowType)) }
  def workflow_type
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowType)).void }
  def workflow_type=(value)
  end

  sig { void }
  def clear_workflow_type
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Header)) }
  def header
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Header)).void }
  def header=(value)
  end

  sig { void }
  def clear_header
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::ChildWorkflowExecutionCompletedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::ChildWorkflowExecutionCompletedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::ChildWorkflowExecutionCompletedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::ChildWorkflowExecutionCompletedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::ChildWorkflowExecutionCompletedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      result: T.nilable(Temporalio::Api::Common::V1::Payloads),
      namespace: T.nilable(String),
      namespace_id: T.nilable(String),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      workflow_type: T.nilable(Temporalio::Api::Common::V1::WorkflowType),
      initiated_event_id: T.nilable(Integer),
      started_event_id: T.nilable(Integer)
    ).void
  end
  def initialize(
    result: nil,
    namespace: "",
    namespace_id: "",
    workflow_execution: nil,
    workflow_type: nil,
    initiated_event_id: 0,
    started_event_id: 0
  )
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def result
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def result=(value)
  end

  sig { void }
  def clear_result
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { returns(String) }
  def namespace
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def namespace_id
  end

  sig { params(value: String).void }
  def namespace_id=(value)
  end

  sig { void }
  def clear_namespace_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  sig { void }
  def clear_workflow_execution
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowType)) }
  def workflow_type
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowType)).void }
  def workflow_type=(value)
  end

  sig { void }
  def clear_workflow_type
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { returns(Integer) }
  def initiated_event_id
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { params(value: Integer).void }
  def initiated_event_id=(value)
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { void }
  def clear_initiated_event_id
  end

  # Id of the `CHILD_WORKFLOW_EXECUTION_STARTED` event which this event corresponds to
  sig { returns(Integer) }
  def started_event_id
  end

  # Id of the `CHILD_WORKFLOW_EXECUTION_STARTED` event which this event corresponds to
  sig { params(value: Integer).void }
  def started_event_id=(value)
  end

  # Id of the `CHILD_WORKFLOW_EXECUTION_STARTED` event which this event corresponds to
  sig { void }
  def clear_started_event_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::ChildWorkflowExecutionFailedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::ChildWorkflowExecutionFailedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::ChildWorkflowExecutionFailedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::ChildWorkflowExecutionFailedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::ChildWorkflowExecutionFailedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      failure: T.nilable(Temporalio::Api::Failure::V1::Failure),
      namespace: T.nilable(String),
      namespace_id: T.nilable(String),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      workflow_type: T.nilable(Temporalio::Api::Common::V1::WorkflowType),
      initiated_event_id: T.nilable(Integer),
      started_event_id: T.nilable(Integer),
      retry_state: T.nilable(T.any(Symbol, String, Integer))
    ).void
  end
  def initialize(
    failure: nil,
    namespace: "",
    namespace_id: "",
    workflow_execution: nil,
    workflow_type: nil,
    initiated_event_id: 0,
    started_event_id: 0,
    retry_state: :RETRY_STATE_UNSPECIFIED
  )
  end

  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def failure
  end

  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def failure=(value)
  end

  sig { void }
  def clear_failure
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { returns(String) }
  def namespace
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def namespace_id
  end

  sig { params(value: String).void }
  def namespace_id=(value)
  end

  sig { void }
  def clear_namespace_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  sig { void }
  def clear_workflow_execution
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowType)) }
  def workflow_type
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowType)).void }
  def workflow_type=(value)
  end

  sig { void }
  def clear_workflow_type
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { returns(Integer) }
  def initiated_event_id
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { params(value: Integer).void }
  def initiated_event_id=(value)
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { void }
  def clear_initiated_event_id
  end

  # Id of the `CHILD_WORKFLOW_EXECUTION_STARTED` event which this event corresponds to
  sig { returns(Integer) }
  def started_event_id
  end

  # Id of the `CHILD_WORKFLOW_EXECUTION_STARTED` event which this event corresponds to
  sig { params(value: Integer).void }
  def started_event_id=(value)
  end

  # Id of the `CHILD_WORKFLOW_EXECUTION_STARTED` event which this event corresponds to
  sig { void }
  def clear_started_event_id
  end

  sig { returns(T.any(Symbol, Integer)) }
  def retry_state
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def retry_state=(value)
  end

  sig { void }
  def clear_retry_state
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::ChildWorkflowExecutionCanceledEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::ChildWorkflowExecutionCanceledEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::ChildWorkflowExecutionCanceledEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::ChildWorkflowExecutionCanceledEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::ChildWorkflowExecutionCanceledEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      details: T.nilable(Temporalio::Api::Common::V1::Payloads),
      namespace: T.nilable(String),
      namespace_id: T.nilable(String),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      workflow_type: T.nilable(Temporalio::Api::Common::V1::WorkflowType),
      initiated_event_id: T.nilable(Integer),
      started_event_id: T.nilable(Integer)
    ).void
  end
  def initialize(
    details: nil,
    namespace: "",
    namespace_id: "",
    workflow_execution: nil,
    workflow_type: nil,
    initiated_event_id: 0,
    started_event_id: 0
  )
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def details
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def details=(value)
  end

  sig { void }
  def clear_details
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { returns(String) }
  def namespace
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def namespace_id
  end

  sig { params(value: String).void }
  def namespace_id=(value)
  end

  sig { void }
  def clear_namespace_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  sig { void }
  def clear_workflow_execution
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowType)) }
  def workflow_type
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowType)).void }
  def workflow_type=(value)
  end

  sig { void }
  def clear_workflow_type
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { returns(Integer) }
  def initiated_event_id
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { params(value: Integer).void }
  def initiated_event_id=(value)
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { void }
  def clear_initiated_event_id
  end

  # Id of the `CHILD_WORKFLOW_EXECUTION_STARTED` event which this event corresponds to
  sig { returns(Integer) }
  def started_event_id
  end

  # Id of the `CHILD_WORKFLOW_EXECUTION_STARTED` event which this event corresponds to
  sig { params(value: Integer).void }
  def started_event_id=(value)
  end

  # Id of the `CHILD_WORKFLOW_EXECUTION_STARTED` event which this event corresponds to
  sig { void }
  def clear_started_event_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::ChildWorkflowExecutionTimedOutEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::ChildWorkflowExecutionTimedOutEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::ChildWorkflowExecutionTimedOutEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::ChildWorkflowExecutionTimedOutEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::ChildWorkflowExecutionTimedOutEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      namespace_id: T.nilable(String),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      workflow_type: T.nilable(Temporalio::Api::Common::V1::WorkflowType),
      initiated_event_id: T.nilable(Integer),
      started_event_id: T.nilable(Integer),
      retry_state: T.nilable(T.any(Symbol, String, Integer))
    ).void
  end
  def initialize(
    namespace: "",
    namespace_id: "",
    workflow_execution: nil,
    workflow_type: nil,
    initiated_event_id: 0,
    started_event_id: 0,
    retry_state: :RETRY_STATE_UNSPECIFIED
  )
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { returns(String) }
  def namespace
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def namespace_id
  end

  sig { params(value: String).void }
  def namespace_id=(value)
  end

  sig { void }
  def clear_namespace_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  sig { void }
  def clear_workflow_execution
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowType)) }
  def workflow_type
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowType)).void }
  def workflow_type=(value)
  end

  sig { void }
  def clear_workflow_type
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { returns(Integer) }
  def initiated_event_id
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { params(value: Integer).void }
  def initiated_event_id=(value)
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { void }
  def clear_initiated_event_id
  end

  # Id of the `CHILD_WORKFLOW_EXECUTION_STARTED` event which this event corresponds to
  sig { returns(Integer) }
  def started_event_id
  end

  # Id of the `CHILD_WORKFLOW_EXECUTION_STARTED` event which this event corresponds to
  sig { params(value: Integer).void }
  def started_event_id=(value)
  end

  # Id of the `CHILD_WORKFLOW_EXECUTION_STARTED` event which this event corresponds to
  sig { void }
  def clear_started_event_id
  end

  sig { returns(T.any(Symbol, Integer)) }
  def retry_state
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def retry_state=(value)
  end

  sig { void }
  def clear_retry_state
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::ChildWorkflowExecutionTerminatedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::ChildWorkflowExecutionTerminatedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::ChildWorkflowExecutionTerminatedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::ChildWorkflowExecutionTerminatedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::ChildWorkflowExecutionTerminatedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      namespace_id: T.nilable(String),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      workflow_type: T.nilable(Temporalio::Api::Common::V1::WorkflowType),
      initiated_event_id: T.nilable(Integer),
      started_event_id: T.nilable(Integer)
    ).void
  end
  def initialize(
    namespace: "",
    namespace_id: "",
    workflow_execution: nil,
    workflow_type: nil,
    initiated_event_id: 0,
    started_event_id: 0
  )
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { returns(String) }
  def namespace
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace of the child workflow.
# SDKs and UI tools should use `namespace` field but server must use `namespace_id` only.
  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def namespace_id
  end

  sig { params(value: String).void }
  def namespace_id=(value)
  end

  sig { void }
  def clear_namespace_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  sig { void }
  def clear_workflow_execution
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowType)) }
  def workflow_type
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowType)).void }
  def workflow_type=(value)
  end

  sig { void }
  def clear_workflow_type
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { returns(Integer) }
  def initiated_event_id
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { params(value: Integer).void }
  def initiated_event_id=(value)
  end

  # Id of the `START_CHILD_WORKFLOW_EXECUTION_INITIATED` event which this event corresponds to
  sig { void }
  def clear_initiated_event_id
  end

  # Id of the `CHILD_WORKFLOW_EXECUTION_STARTED` event which this event corresponds to
  sig { returns(Integer) }
  def started_event_id
  end

  # Id of the `CHILD_WORKFLOW_EXECUTION_STARTED` event which this event corresponds to
  sig { params(value: Integer).void }
  def started_event_id=(value)
  end

  # Id of the `CHILD_WORKFLOW_EXECUTION_STARTED` event which this event corresponds to
  sig { void }
  def clear_started_event_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::WorkflowPropertiesModifiedExternallyEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::WorkflowPropertiesModifiedExternallyEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowPropertiesModifiedExternallyEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::WorkflowPropertiesModifiedExternallyEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowPropertiesModifiedExternallyEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      new_task_queue: T.nilable(String),
      new_workflow_task_timeout: T.nilable(Google::Protobuf::Duration),
      new_workflow_run_timeout: T.nilable(Google::Protobuf::Duration),
      new_workflow_execution_timeout: T.nilable(Google::Protobuf::Duration),
      upserted_memo: T.nilable(Temporalio::Api::Common::V1::Memo)
    ).void
  end
  def initialize(
    new_task_queue: "",
    new_workflow_task_timeout: nil,
    new_workflow_run_timeout: nil,
    new_workflow_execution_timeout: nil,
    upserted_memo: nil
  )
  end

  # If set to a nonempty string, future workflow tasks for this workflow shall be dispatched on
# the provided queue.
  sig { returns(String) }
  def new_task_queue
  end

  # If set to a nonempty string, future workflow tasks for this workflow shall be dispatched on
# the provided queue.
  sig { params(value: String).void }
  def new_task_queue=(value)
  end

  # If set to a nonempty string, future workflow tasks for this workflow shall be dispatched on
# the provided queue.
  sig { void }
  def clear_new_task_queue
  end

  # If set, update the workflow task timeout to this value.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def new_workflow_task_timeout
  end

  # If set, update the workflow task timeout to this value.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def new_workflow_task_timeout=(value)
  end

  # If set, update the workflow task timeout to this value.
  sig { void }
  def clear_new_workflow_task_timeout
  end

  # If set, update the workflow run timeout to this value. May be set to 0 for no timeout.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def new_workflow_run_timeout
  end

  # If set, update the workflow run timeout to this value. May be set to 0 for no timeout.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def new_workflow_run_timeout=(value)
  end

  # If set, update the workflow run timeout to this value. May be set to 0 for no timeout.
  sig { void }
  def clear_new_workflow_run_timeout
  end

  # If set, update the workflow execution timeout to this value. May be set to 0 for no timeout.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def new_workflow_execution_timeout
  end

  # If set, update the workflow execution timeout to this value. May be set to 0 for no timeout.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def new_workflow_execution_timeout=(value)
  end

  # If set, update the workflow execution timeout to this value. May be set to 0 for no timeout.
  sig { void }
  def clear_new_workflow_execution_timeout
  end

  # If set, update the workflow memo with the provided values. The values will be merged with
# the existing memo. If the user wants to delete values, a default/empty Payload should be
# used as the value for the key being deleted.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Memo)) }
  def upserted_memo
  end

  # If set, update the workflow memo with the provided values. The values will be merged with
# the existing memo. If the user wants to delete values, a default/empty Payload should be
# used as the value for the key being deleted.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Memo)).void }
  def upserted_memo=(value)
  end

  # If set, update the workflow memo with the provided values. The values will be merged with
# the existing memo. If the user wants to delete values, a default/empty Payload should be
# used as the value for the key being deleted.
  sig { void }
  def clear_upserted_memo
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::ActivityPropertiesModifiedExternallyEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::ActivityPropertiesModifiedExternallyEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::ActivityPropertiesModifiedExternallyEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::ActivityPropertiesModifiedExternallyEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::ActivityPropertiesModifiedExternallyEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      scheduled_event_id: T.nilable(Integer),
      new_retry_policy: T.nilable(Temporalio::Api::Common::V1::RetryPolicy)
    ).void
  end
  def initialize(
    scheduled_event_id: 0,
    new_retry_policy: nil
  )
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this modification corresponds to.
  sig { returns(Integer) }
  def scheduled_event_id
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this modification corresponds to.
  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  # The id of the `ACTIVITY_TASK_SCHEDULED` event this modification corresponds to.
  sig { void }
  def clear_scheduled_event_id
  end

  # If set, update the retry policy of the activity, replacing it with the specified one.
# The number of attempts at the activity is preserved.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::RetryPolicy)) }
  def new_retry_policy
  end

  # If set, update the retry policy of the activity, replacing it with the specified one.
# The number of attempts at the activity is preserved.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::RetryPolicy)).void }
  def new_retry_policy=(value)
  end

  # If set, update the retry policy of the activity, replacing it with the specified one.
# The number of attempts at the activity is preserved.
  sig { void }
  def clear_new_retry_policy
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::WorkflowExecutionUpdateAcceptedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::WorkflowExecutionUpdateAcceptedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionUpdateAcceptedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::WorkflowExecutionUpdateAcceptedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionUpdateAcceptedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      protocol_instance_id: T.nilable(String),
      accepted_request_message_id: T.nilable(String),
      accepted_request_sequencing_event_id: T.nilable(Integer),
      accepted_request: T.nilable(Temporalio::Api::Update::V1::Request)
    ).void
  end
  def initialize(
    protocol_instance_id: "",
    accepted_request_message_id: "",
    accepted_request_sequencing_event_id: 0,
    accepted_request: nil
  )
  end

  # The instance ID of the update protocol that generated this event.
  sig { returns(String) }
  def protocol_instance_id
  end

  # The instance ID of the update protocol that generated this event.
  sig { params(value: String).void }
  def protocol_instance_id=(value)
  end

  # The instance ID of the update protocol that generated this event.
  sig { void }
  def clear_protocol_instance_id
  end

  # The message ID of the original request message that initiated this
# update. Needed so that the worker can recreate and deliver that same
# message as part of replay.
  sig { returns(String) }
  def accepted_request_message_id
  end

  # The message ID of the original request message that initiated this
# update. Needed so that the worker can recreate and deliver that same
# message as part of replay.
  sig { params(value: String).void }
  def accepted_request_message_id=(value)
  end

  # The message ID of the original request message that initiated this
# update. Needed so that the worker can recreate and deliver that same
# message as part of replay.
  sig { void }
  def clear_accepted_request_message_id
  end

  # The event ID used to sequence the original request message.
  sig { returns(Integer) }
  def accepted_request_sequencing_event_id
  end

  # The event ID used to sequence the original request message.
  sig { params(value: Integer).void }
  def accepted_request_sequencing_event_id=(value)
  end

  # The event ID used to sequence the original request message.
  sig { void }
  def clear_accepted_request_sequencing_event_id
  end

  # The message payload of the original request message that initiated this
# update.
  sig { returns(T.nilable(Temporalio::Api::Update::V1::Request)) }
  def accepted_request
  end

  # The message payload of the original request message that initiated this
# update.
  sig { params(value: T.nilable(Temporalio::Api::Update::V1::Request)).void }
  def accepted_request=(value)
  end

  # The message payload of the original request message that initiated this
# update.
  sig { void }
  def clear_accepted_request
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::WorkflowExecutionUpdateCompletedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::WorkflowExecutionUpdateCompletedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionUpdateCompletedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::WorkflowExecutionUpdateCompletedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionUpdateCompletedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      meta: T.nilable(Temporalio::Api::Update::V1::Meta),
      accepted_event_id: T.nilable(Integer),
      outcome: T.nilable(Temporalio::Api::Update::V1::Outcome)
    ).void
  end
  def initialize(
    meta: nil,
    accepted_event_id: 0,
    outcome: nil
  )
  end

  # The metadata about this update.
  sig { returns(T.nilable(Temporalio::Api::Update::V1::Meta)) }
  def meta
  end

  # The metadata about this update.
  sig { params(value: T.nilable(Temporalio::Api::Update::V1::Meta)).void }
  def meta=(value)
  end

  # The metadata about this update.
  sig { void }
  def clear_meta
  end

  # The event ID indicating the acceptance of this update.
  sig { returns(Integer) }
  def accepted_event_id
  end

  # The event ID indicating the acceptance of this update.
  sig { params(value: Integer).void }
  def accepted_event_id=(value)
  end

  # The event ID indicating the acceptance of this update.
  sig { void }
  def clear_accepted_event_id
  end

  # The outcome of executing the workflow update function.
  sig { returns(T.nilable(Temporalio::Api::Update::V1::Outcome)) }
  def outcome
  end

  # The outcome of executing the workflow update function.
  sig { params(value: T.nilable(Temporalio::Api::Update::V1::Outcome)).void }
  def outcome=(value)
  end

  # The outcome of executing the workflow update function.
  sig { void }
  def clear_outcome
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::WorkflowExecutionUpdateRejectedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::WorkflowExecutionUpdateRejectedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionUpdateRejectedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::WorkflowExecutionUpdateRejectedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionUpdateRejectedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      protocol_instance_id: T.nilable(String),
      rejected_request_message_id: T.nilable(String),
      rejected_request_sequencing_event_id: T.nilable(Integer),
      rejected_request: T.nilable(Temporalio::Api::Update::V1::Request),
      failure: T.nilable(Temporalio::Api::Failure::V1::Failure)
    ).void
  end
  def initialize(
    protocol_instance_id: "",
    rejected_request_message_id: "",
    rejected_request_sequencing_event_id: 0,
    rejected_request: nil,
    failure: nil
  )
  end

  # The instance ID of the update protocol that generated this event.
  sig { returns(String) }
  def protocol_instance_id
  end

  # The instance ID of the update protocol that generated this event.
  sig { params(value: String).void }
  def protocol_instance_id=(value)
  end

  # The instance ID of the update protocol that generated this event.
  sig { void }
  def clear_protocol_instance_id
  end

  # The message ID of the original request message that initiated this
# update. Needed so that the worker can recreate and deliver that same
# message as part of replay.
  sig { returns(String) }
  def rejected_request_message_id
  end

  # The message ID of the original request message that initiated this
# update. Needed so that the worker can recreate and deliver that same
# message as part of replay.
  sig { params(value: String).void }
  def rejected_request_message_id=(value)
  end

  # The message ID of the original request message that initiated this
# update. Needed so that the worker can recreate and deliver that same
# message as part of replay.
  sig { void }
  def clear_rejected_request_message_id
  end

  # The event ID used to sequence the original request message.
  sig { returns(Integer) }
  def rejected_request_sequencing_event_id
  end

  # The event ID used to sequence the original request message.
  sig { params(value: Integer).void }
  def rejected_request_sequencing_event_id=(value)
  end

  # The event ID used to sequence the original request message.
  sig { void }
  def clear_rejected_request_sequencing_event_id
  end

  # The message payload of the original request message that initiated this
# update.
  sig { returns(T.nilable(Temporalio::Api::Update::V1::Request)) }
  def rejected_request
  end

  # The message payload of the original request message that initiated this
# update.
  sig { params(value: T.nilable(Temporalio::Api::Update::V1::Request)).void }
  def rejected_request=(value)
  end

  # The message payload of the original request message that initiated this
# update.
  sig { void }
  def clear_rejected_request
  end

  # The cause of rejection.
  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def failure
  end

  # The cause of rejection.
  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def failure=(value)
  end

  # The cause of rejection.
  sig { void }
  def clear_failure
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::WorkflowExecutionUpdateAdmittedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::WorkflowExecutionUpdateAdmittedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionUpdateAdmittedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::WorkflowExecutionUpdateAdmittedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::WorkflowExecutionUpdateAdmittedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      request: T.nilable(Temporalio::Api::Update::V1::Request),
      origin: T.nilable(T.any(Symbol, String, Integer))
    ).void
  end
  def initialize(
    request: nil,
    origin: :UPDATE_ADMITTED_EVENT_ORIGIN_UNSPECIFIED
  )
  end

  # The update request associated with this event.
  sig { returns(T.nilable(Temporalio::Api::Update::V1::Request)) }
  def request
  end

  # The update request associated with this event.
  sig { params(value: T.nilable(Temporalio::Api::Update::V1::Request)).void }
  def request=(value)
  end

  # The update request associated with this event.
  sig { void }
  def clear_request
  end

  # An explanation of why this event was written to history.
  sig { returns(T.any(Symbol, Integer)) }
  def origin
  end

  # An explanation of why this event was written to history.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def origin=(value)
  end

  # An explanation of why this event was written to history.
  sig { void }
  def clear_origin
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Event marking that an operation was scheduled by a workflow via the ScheduleNexusOperation command.
class Temporalio::Api::History::V1::NexusOperationScheduledEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::NexusOperationScheduledEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::NexusOperationScheduledEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::NexusOperationScheduledEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::NexusOperationScheduledEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      endpoint: T.nilable(String),
      service: T.nilable(String),
      operation: T.nilable(String),
      input: T.nilable(Temporalio::Api::Common::V1::Payload),
      schedule_to_close_timeout: T.nilable(Google::Protobuf::Duration),
      nexus_header: T.nilable(T::Hash[String, String]),
      workflow_task_completed_event_id: T.nilable(Integer),
      request_id: T.nilable(String)
    ).void
  end
  def initialize(
    endpoint: "",
    service: "",
    operation: "",
    input: nil,
    schedule_to_close_timeout: nil,
    nexus_header: ::Google::Protobuf::Map.new(:string, :string),
    workflow_task_completed_event_id: 0,
    request_id: ""
  )
  end

  # Endpoint name, must exist in the endpoint registry.
  sig { returns(String) }
  def endpoint
  end

  # Endpoint name, must exist in the endpoint registry.
  sig { params(value: String).void }
  def endpoint=(value)
  end

  # Endpoint name, must exist in the endpoint registry.
  sig { void }
  def clear_endpoint
  end

  # Service name.
  sig { returns(String) }
  def service
  end

  # Service name.
  sig { params(value: String).void }
  def service=(value)
  end

  # Service name.
  sig { void }
  def clear_service
  end

  # Operation name.
  sig { returns(String) }
  def operation
  end

  # Operation name.
  sig { params(value: String).void }
  def operation=(value)
  end

  # Operation name.
  sig { void }
  def clear_operation
  end

  # Input for the operation. The server converts this into Nexus request content and the appropriate content headers
# internally when sending the StartOperation request. On the handler side, if it is also backed by Temporal, the
# content is transformed back to the original Payload stored in this event.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payload)) }
  def input
  end

  # Input for the operation. The server converts this into Nexus request content and the appropriate content headers
# internally when sending the StartOperation request. On the handler side, if it is also backed by Temporal, the
# content is transformed back to the original Payload stored in this event.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payload)).void }
  def input=(value)
  end

  # Input for the operation. The server converts this into Nexus request content and the appropriate content headers
# internally when sending the StartOperation request. On the handler side, if it is also backed by Temporal, the
# content is transformed back to the original Payload stored in this event.
  sig { void }
  def clear_input
  end

  # Schedule-to-close timeout for this operation.
# Indicates how long the caller is willing to wait for operation completion.
# Calls are retried internally by the server.
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def schedule_to_close_timeout
  end

  # Schedule-to-close timeout for this operation.
# Indicates how long the caller is willing to wait for operation completion.
# Calls are retried internally by the server.
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def schedule_to_close_timeout=(value)
  end

  # Schedule-to-close timeout for this operation.
# Indicates how long the caller is willing to wait for operation completion.
# Calls are retried internally by the server.
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { void }
  def clear_schedule_to_close_timeout
  end

  # Header to attach to the Nexus request. Note these headers are not the same as Temporal headers on internal
# activities and child workflows, these are transmitted to Nexus operations that may be external and are not
# traditional payloads.
  sig { returns(T::Hash[String, String]) }
  def nexus_header
  end

  # Header to attach to the Nexus request. Note these headers are not the same as Temporal headers on internal
# activities and child workflows, these are transmitted to Nexus operations that may be external and are not
# traditional payloads.
  sig { params(value: ::Google::Protobuf::Map).void }
  def nexus_header=(value)
  end

  # Header to attach to the Nexus request. Note these headers are not the same as Temporal headers on internal
# activities and child workflows, these are transmitted to Nexus operations that may be external and are not
# traditional payloads.
  sig { void }
  def clear_nexus_header
  end

  # The `WORKFLOW_TASK_COMPLETED` event that the corresponding ScheduleNexusOperation command was reported with.
  sig { returns(Integer) }
  def workflow_task_completed_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event that the corresponding ScheduleNexusOperation command was reported with.
  sig { params(value: Integer).void }
  def workflow_task_completed_event_id=(value)
  end

  # The `WORKFLOW_TASK_COMPLETED` event that the corresponding ScheduleNexusOperation command was reported with.
  sig { void }
  def clear_workflow_task_completed_event_id
  end

  # A unique ID generated by the history service upon creation of this event.
# The ID will be transmitted with all nexus StartOperation requests and is used as an idempotentency key.
  sig { returns(String) }
  def request_id
  end

  # A unique ID generated by the history service upon creation of this event.
# The ID will be transmitted with all nexus StartOperation requests and is used as an idempotentency key.
  sig { params(value: String).void }
  def request_id=(value)
  end

  # A unique ID generated by the history service upon creation of this event.
# The ID will be transmitted with all nexus StartOperation requests and is used as an idempotentency key.
  sig { void }
  def clear_request_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Event marking an asynchronous operation was started by the responding Nexus handler.
# If the operation completes synchronously, this event is not generated.
# In rare situations, such as request timeouts, the service may fail to record the actual start time and will fabricate
# this event upon receiving the operation completion via callback.
class Temporalio::Api::History::V1::NexusOperationStartedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::NexusOperationStartedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::NexusOperationStartedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::NexusOperationStartedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::NexusOperationStartedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      scheduled_event_id: T.nilable(Integer),
      operation_id: T.nilable(String)
    ).void
  end
  def initialize(
    scheduled_event_id: 0,
    operation_id: ""
  )
  end

  # The ID of the `NEXUS_OPERATION_SCHEDULED` event this task corresponds to.
  sig { returns(Integer) }
  def scheduled_event_id
  end

  # The ID of the `NEXUS_OPERATION_SCHEDULED` event this task corresponds to.
  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  # The ID of the `NEXUS_OPERATION_SCHEDULED` event this task corresponds to.
  sig { void }
  def clear_scheduled_event_id
  end

  # The operation ID returned by the Nexus handler in the response to the StartOperation request.
# This ID is used when canceling the operation.
  sig { returns(String) }
  def operation_id
  end

  # The operation ID returned by the Nexus handler in the response to the StartOperation request.
# This ID is used when canceling the operation.
  sig { params(value: String).void }
  def operation_id=(value)
  end

  # The operation ID returned by the Nexus handler in the response to the StartOperation request.
# This ID is used when canceling the operation.
  sig { void }
  def clear_operation_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Nexus operation completed successfully.
class Temporalio::Api::History::V1::NexusOperationCompletedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::NexusOperationCompletedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::NexusOperationCompletedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::NexusOperationCompletedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::NexusOperationCompletedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      scheduled_event_id: T.nilable(Integer),
      result: T.nilable(Temporalio::Api::Common::V1::Payload)
    ).void
  end
  def initialize(
    scheduled_event_id: 0,
    result: nil
  )
  end

  # The ID of the `NEXUS_OPERATION_SCHEDULED` event. Uniquely identifies this operation.
  sig { returns(Integer) }
  def scheduled_event_id
  end

  # The ID of the `NEXUS_OPERATION_SCHEDULED` event. Uniquely identifies this operation.
  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  # The ID of the `NEXUS_OPERATION_SCHEDULED` event. Uniquely identifies this operation.
  sig { void }
  def clear_scheduled_event_id
  end

  # Serialized result of the Nexus operation. The response of the Nexus handler.
# Delivered either via a completion callback or as a response to a synchronous operation.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payload)) }
  def result
  end

  # Serialized result of the Nexus operation. The response of the Nexus handler.
# Delivered either via a completion callback or as a response to a synchronous operation.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payload)).void }
  def result=(value)
  end

  # Serialized result of the Nexus operation. The response of the Nexus handler.
# Delivered either via a completion callback or as a response to a synchronous operation.
  sig { void }
  def clear_result
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Nexus operation failed.
class Temporalio::Api::History::V1::NexusOperationFailedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::NexusOperationFailedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::NexusOperationFailedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::NexusOperationFailedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::NexusOperationFailedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      scheduled_event_id: T.nilable(Integer),
      failure: T.nilable(Temporalio::Api::Failure::V1::Failure)
    ).void
  end
  def initialize(
    scheduled_event_id: 0,
    failure: nil
  )
  end

  # The ID of the `NEXUS_OPERATION_SCHEDULED` event. Uniquely identifies this operation.
  sig { returns(Integer) }
  def scheduled_event_id
  end

  # The ID of the `NEXUS_OPERATION_SCHEDULED` event. Uniquely identifies this operation.
  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  # The ID of the `NEXUS_OPERATION_SCHEDULED` event. Uniquely identifies this operation.
  sig { void }
  def clear_scheduled_event_id
  end

  # Failure details. A NexusOperationFailureInfo wrapping an ApplicationFailureInfo.
  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def failure
  end

  # Failure details. A NexusOperationFailureInfo wrapping an ApplicationFailureInfo.
  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def failure=(value)
  end

  # Failure details. A NexusOperationFailureInfo wrapping an ApplicationFailureInfo.
  sig { void }
  def clear_failure
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Nexus operation timed out.
class Temporalio::Api::History::V1::NexusOperationTimedOutEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::NexusOperationTimedOutEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::NexusOperationTimedOutEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::NexusOperationTimedOutEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::NexusOperationTimedOutEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      scheduled_event_id: T.nilable(Integer),
      failure: T.nilable(Temporalio::Api::Failure::V1::Failure)
    ).void
  end
  def initialize(
    scheduled_event_id: 0,
    failure: nil
  )
  end

  # The ID of the `NEXUS_OPERATION_SCHEDULED` event. Uniquely identifies this operation.
  sig { returns(Integer) }
  def scheduled_event_id
  end

  # The ID of the `NEXUS_OPERATION_SCHEDULED` event. Uniquely identifies this operation.
  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  # The ID of the `NEXUS_OPERATION_SCHEDULED` event. Uniquely identifies this operation.
  sig { void }
  def clear_scheduled_event_id
  end

  # Failure details. A NexusOperationFailureInfo wrapping a CanceledFailureInfo.
  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def failure
  end

  # Failure details. A NexusOperationFailureInfo wrapping a CanceledFailureInfo.
  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def failure=(value)
  end

  # Failure details. A NexusOperationFailureInfo wrapping a CanceledFailureInfo.
  sig { void }
  def clear_failure
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Nexus operation completed as canceled. May or may not have been due to a cancellation request by the workflow.
class Temporalio::Api::History::V1::NexusOperationCanceledEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::NexusOperationCanceledEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::NexusOperationCanceledEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::NexusOperationCanceledEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::NexusOperationCanceledEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      scheduled_event_id: T.nilable(Integer),
      failure: T.nilable(Temporalio::Api::Failure::V1::Failure)
    ).void
  end
  def initialize(
    scheduled_event_id: 0,
    failure: nil
  )
  end

  # The ID of the `NEXUS_OPERATION_SCHEDULED` event. Uniquely identifies this operation.
  sig { returns(Integer) }
  def scheduled_event_id
  end

  # The ID of the `NEXUS_OPERATION_SCHEDULED` event. Uniquely identifies this operation.
  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  # The ID of the `NEXUS_OPERATION_SCHEDULED` event. Uniquely identifies this operation.
  sig { void }
  def clear_scheduled_event_id
  end

  # Cancellation details.
  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def failure
  end

  # Cancellation details.
  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def failure=(value)
  end

  # Cancellation details.
  sig { void }
  def clear_failure
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::NexusOperationCancelRequestedEventAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::NexusOperationCancelRequestedEventAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::NexusOperationCancelRequestedEventAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::NexusOperationCancelRequestedEventAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::NexusOperationCancelRequestedEventAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      scheduled_event_id: T.nilable(Integer),
      workflow_task_completed_event_id: T.nilable(Integer)
    ).void
  end
  def initialize(
    scheduled_event_id: 0,
    workflow_task_completed_event_id: 0
  )
  end

  # The id of the `NEXUS_OPERATION_SCHEDULED` event this cancel request corresponds to.
  sig { returns(Integer) }
  def scheduled_event_id
  end

  # The id of the `NEXUS_OPERATION_SCHEDULED` event this cancel request corresponds to.
  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  # The id of the `NEXUS_OPERATION_SCHEDULED` event this cancel request corresponds to.
  sig { void }
  def clear_scheduled_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event that the corresponding RequestCancelNexusOperation command was reported
# with.
  sig { returns(Integer) }
  def workflow_task_completed_event_id
  end

  # The `WORKFLOW_TASK_COMPLETED` event that the corresponding RequestCancelNexusOperation command was reported
# with.
  sig { params(value: Integer).void }
  def workflow_task_completed_event_id=(value)
  end

  # The `WORKFLOW_TASK_COMPLETED` event that the corresponding RequestCancelNexusOperation command was reported
# with.
  sig { void }
  def clear_workflow_task_completed_event_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# History events are the method by which Temporal SDKs advance (or recreate) workflow state.
# See the `EventType` enum for more info about what each event is for.
class Temporalio::Api::History::V1::HistoryEvent
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::HistoryEvent) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::HistoryEvent).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::HistoryEvent) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::HistoryEvent, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      event_id: T.nilable(Integer),
      event_time: T.nilable(Google::Protobuf::Timestamp),
      event_type: T.nilable(T.any(Symbol, String, Integer)),
      version: T.nilable(Integer),
      task_id: T.nilable(Integer),
      worker_may_ignore: T.nilable(T::Boolean),
      user_metadata: T.nilable(Temporalio::Api::Sdk::V1::UserMetadata),
      workflow_execution_started_event_attributes: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionStartedEventAttributes),
      workflow_execution_completed_event_attributes: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionCompletedEventAttributes),
      workflow_execution_failed_event_attributes: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionFailedEventAttributes),
      workflow_execution_timed_out_event_attributes: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionTimedOutEventAttributes),
      workflow_task_scheduled_event_attributes: T.nilable(Temporalio::Api::History::V1::WorkflowTaskScheduledEventAttributes),
      workflow_task_started_event_attributes: T.nilable(Temporalio::Api::History::V1::WorkflowTaskStartedEventAttributes),
      workflow_task_completed_event_attributes: T.nilable(Temporalio::Api::History::V1::WorkflowTaskCompletedEventAttributes),
      workflow_task_timed_out_event_attributes: T.nilable(Temporalio::Api::History::V1::WorkflowTaskTimedOutEventAttributes),
      workflow_task_failed_event_attributes: T.nilable(Temporalio::Api::History::V1::WorkflowTaskFailedEventAttributes),
      activity_task_scheduled_event_attributes: T.nilable(Temporalio::Api::History::V1::ActivityTaskScheduledEventAttributes),
      activity_task_started_event_attributes: T.nilable(Temporalio::Api::History::V1::ActivityTaskStartedEventAttributes),
      activity_task_completed_event_attributes: T.nilable(Temporalio::Api::History::V1::ActivityTaskCompletedEventAttributes),
      activity_task_failed_event_attributes: T.nilable(Temporalio::Api::History::V1::ActivityTaskFailedEventAttributes),
      activity_task_timed_out_event_attributes: T.nilable(Temporalio::Api::History::V1::ActivityTaskTimedOutEventAttributes),
      timer_started_event_attributes: T.nilable(Temporalio::Api::History::V1::TimerStartedEventAttributes),
      timer_fired_event_attributes: T.nilable(Temporalio::Api::History::V1::TimerFiredEventAttributes),
      activity_task_cancel_requested_event_attributes: T.nilable(Temporalio::Api::History::V1::ActivityTaskCancelRequestedEventAttributes),
      activity_task_canceled_event_attributes: T.nilable(Temporalio::Api::History::V1::ActivityTaskCanceledEventAttributes),
      timer_canceled_event_attributes: T.nilable(Temporalio::Api::History::V1::TimerCanceledEventAttributes),
      marker_recorded_event_attributes: T.nilable(Temporalio::Api::History::V1::MarkerRecordedEventAttributes),
      workflow_execution_signaled_event_attributes: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionSignaledEventAttributes),
      workflow_execution_terminated_event_attributes: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionTerminatedEventAttributes),
      workflow_execution_cancel_requested_event_attributes: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionCancelRequestedEventAttributes),
      workflow_execution_canceled_event_attributes: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionCanceledEventAttributes),
      request_cancel_external_workflow_execution_initiated_event_attributes: T.nilable(Temporalio::Api::History::V1::RequestCancelExternalWorkflowExecutionInitiatedEventAttributes),
      request_cancel_external_workflow_execution_failed_event_attributes: T.nilable(Temporalio::Api::History::V1::RequestCancelExternalWorkflowExecutionFailedEventAttributes),
      external_workflow_execution_cancel_requested_event_attributes: T.nilable(Temporalio::Api::History::V1::ExternalWorkflowExecutionCancelRequestedEventAttributes),
      workflow_execution_continued_as_new_event_attributes: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionContinuedAsNewEventAttributes),
      start_child_workflow_execution_initiated_event_attributes: T.nilable(Temporalio::Api::History::V1::StartChildWorkflowExecutionInitiatedEventAttributes),
      start_child_workflow_execution_failed_event_attributes: T.nilable(Temporalio::Api::History::V1::StartChildWorkflowExecutionFailedEventAttributes),
      child_workflow_execution_started_event_attributes: T.nilable(Temporalio::Api::History::V1::ChildWorkflowExecutionStartedEventAttributes),
      child_workflow_execution_completed_event_attributes: T.nilable(Temporalio::Api::History::V1::ChildWorkflowExecutionCompletedEventAttributes),
      child_workflow_execution_failed_event_attributes: T.nilable(Temporalio::Api::History::V1::ChildWorkflowExecutionFailedEventAttributes),
      child_workflow_execution_canceled_event_attributes: T.nilable(Temporalio::Api::History::V1::ChildWorkflowExecutionCanceledEventAttributes),
      child_workflow_execution_timed_out_event_attributes: T.nilable(Temporalio::Api::History::V1::ChildWorkflowExecutionTimedOutEventAttributes),
      child_workflow_execution_terminated_event_attributes: T.nilable(Temporalio::Api::History::V1::ChildWorkflowExecutionTerminatedEventAttributes),
      signal_external_workflow_execution_initiated_event_attributes: T.nilable(Temporalio::Api::History::V1::SignalExternalWorkflowExecutionInitiatedEventAttributes),
      signal_external_workflow_execution_failed_event_attributes: T.nilable(Temporalio::Api::History::V1::SignalExternalWorkflowExecutionFailedEventAttributes),
      external_workflow_execution_signaled_event_attributes: T.nilable(Temporalio::Api::History::V1::ExternalWorkflowExecutionSignaledEventAttributes),
      upsert_workflow_search_attributes_event_attributes: T.nilable(Temporalio::Api::History::V1::UpsertWorkflowSearchAttributesEventAttributes),
      workflow_execution_update_accepted_event_attributes: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionUpdateAcceptedEventAttributes),
      workflow_execution_update_rejected_event_attributes: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionUpdateRejectedEventAttributes),
      workflow_execution_update_completed_event_attributes: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionUpdateCompletedEventAttributes),
      workflow_properties_modified_externally_event_attributes: T.nilable(Temporalio::Api::History::V1::WorkflowPropertiesModifiedExternallyEventAttributes),
      activity_properties_modified_externally_event_attributes: T.nilable(Temporalio::Api::History::V1::ActivityPropertiesModifiedExternallyEventAttributes),
      workflow_properties_modified_event_attributes: T.nilable(Temporalio::Api::History::V1::WorkflowPropertiesModifiedEventAttributes),
      workflow_execution_update_admitted_event_attributes: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionUpdateAdmittedEventAttributes),
      nexus_operation_scheduled_event_attributes: T.nilable(Temporalio::Api::History::V1::NexusOperationScheduledEventAttributes),
      nexus_operation_started_event_attributes: T.nilable(Temporalio::Api::History::V1::NexusOperationStartedEventAttributes),
      nexus_operation_completed_event_attributes: T.nilable(Temporalio::Api::History::V1::NexusOperationCompletedEventAttributes),
      nexus_operation_failed_event_attributes: T.nilable(Temporalio::Api::History::V1::NexusOperationFailedEventAttributes),
      nexus_operation_canceled_event_attributes: T.nilable(Temporalio::Api::History::V1::NexusOperationCanceledEventAttributes),
      nexus_operation_timed_out_event_attributes: T.nilable(Temporalio::Api::History::V1::NexusOperationTimedOutEventAttributes),
      nexus_operation_cancel_requested_event_attributes: T.nilable(Temporalio::Api::History::V1::NexusOperationCancelRequestedEventAttributes)
    ).void
  end
  def initialize(
    event_id: 0,
    event_time: nil,
    event_type: :EVENT_TYPE_UNSPECIFIED,
    version: 0,
    task_id: 0,
    worker_may_ignore: false,
    user_metadata: nil,
    workflow_execution_started_event_attributes: nil,
    workflow_execution_completed_event_attributes: nil,
    workflow_execution_failed_event_attributes: nil,
    workflow_execution_timed_out_event_attributes: nil,
    workflow_task_scheduled_event_attributes: nil,
    workflow_task_started_event_attributes: nil,
    workflow_task_completed_event_attributes: nil,
    workflow_task_timed_out_event_attributes: nil,
    workflow_task_failed_event_attributes: nil,
    activity_task_scheduled_event_attributes: nil,
    activity_task_started_event_attributes: nil,
    activity_task_completed_event_attributes: nil,
    activity_task_failed_event_attributes: nil,
    activity_task_timed_out_event_attributes: nil,
    timer_started_event_attributes: nil,
    timer_fired_event_attributes: nil,
    activity_task_cancel_requested_event_attributes: nil,
    activity_task_canceled_event_attributes: nil,
    timer_canceled_event_attributes: nil,
    marker_recorded_event_attributes: nil,
    workflow_execution_signaled_event_attributes: nil,
    workflow_execution_terminated_event_attributes: nil,
    workflow_execution_cancel_requested_event_attributes: nil,
    workflow_execution_canceled_event_attributes: nil,
    request_cancel_external_workflow_execution_initiated_event_attributes: nil,
    request_cancel_external_workflow_execution_failed_event_attributes: nil,
    external_workflow_execution_cancel_requested_event_attributes: nil,
    workflow_execution_continued_as_new_event_attributes: nil,
    start_child_workflow_execution_initiated_event_attributes: nil,
    start_child_workflow_execution_failed_event_attributes: nil,
    child_workflow_execution_started_event_attributes: nil,
    child_workflow_execution_completed_event_attributes: nil,
    child_workflow_execution_failed_event_attributes: nil,
    child_workflow_execution_canceled_event_attributes: nil,
    child_workflow_execution_timed_out_event_attributes: nil,
    child_workflow_execution_terminated_event_attributes: nil,
    signal_external_workflow_execution_initiated_event_attributes: nil,
    signal_external_workflow_execution_failed_event_attributes: nil,
    external_workflow_execution_signaled_event_attributes: nil,
    upsert_workflow_search_attributes_event_attributes: nil,
    workflow_execution_update_accepted_event_attributes: nil,
    workflow_execution_update_rejected_event_attributes: nil,
    workflow_execution_update_completed_event_attributes: nil,
    workflow_properties_modified_externally_event_attributes: nil,
    activity_properties_modified_externally_event_attributes: nil,
    workflow_properties_modified_event_attributes: nil,
    workflow_execution_update_admitted_event_attributes: nil,
    nexus_operation_scheduled_event_attributes: nil,
    nexus_operation_started_event_attributes: nil,
    nexus_operation_completed_event_attributes: nil,
    nexus_operation_failed_event_attributes: nil,
    nexus_operation_canceled_event_attributes: nil,
    nexus_operation_timed_out_event_attributes: nil,
    nexus_operation_cancel_requested_event_attributes: nil
  )
  end

  # Monotonically increasing event number, starts at 1.
  sig { returns(Integer) }
  def event_id
  end

  # Monotonically increasing event number, starts at 1.
  sig { params(value: Integer).void }
  def event_id=(value)
  end

  # Monotonically increasing event number, starts at 1.
  sig { void }
  def clear_event_id
  end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def event_time
  end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def event_time=(value)
  end

  sig { void }
  def clear_event_time
  end

  sig { returns(T.any(Symbol, Integer)) }
  def event_type
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def event_type=(value)
  end

  sig { void }
  def clear_event_type
  end

  # TODO: What is this? Appears unused by SDKs
  sig { returns(Integer) }
  def version
  end

  # TODO: What is this? Appears unused by SDKs
  sig { params(value: Integer).void }
  def version=(value)
  end

  # TODO: What is this? Appears unused by SDKs
  sig { void }
  def clear_version
  end

  # TODO: What is this? Appears unused by SDKs
  sig { returns(Integer) }
  def task_id
  end

  # TODO: What is this? Appears unused by SDKs
  sig { params(value: Integer).void }
  def task_id=(value)
  end

  # TODO: What is this? Appears unused by SDKs
  sig { void }
  def clear_task_id
  end

  # Set to true when the SDK may ignore the event as it does not impact workflow state or
# information in any way that the SDK need be concerned with. If an SDK encounters an event
# type which it does not understand, it must error unless this is true. If it is true, it's
# acceptable for the event type and/or attributes to be uninterpretable.
  sig { returns(T::Boolean) }
  def worker_may_ignore
  end

  # Set to true when the SDK may ignore the event as it does not impact workflow state or
# information in any way that the SDK need be concerned with. If an SDK encounters an event
# type which it does not understand, it must error unless this is true. If it is true, it's
# acceptable for the event type and/or attributes to be uninterpretable.
  sig { params(value: T::Boolean).void }
  def worker_may_ignore=(value)
  end

  # Set to true when the SDK may ignore the event as it does not impact workflow state or
# information in any way that the SDK need be concerned with. If an SDK encounters an event
# type which it does not understand, it must error unless this is true. If it is true, it's
# acceptable for the event type and/or attributes to be uninterpretable.
  sig { void }
  def clear_worker_may_ignore
  end

  # Metadata on the event. This is often carried over from commands and client calls. Most events
# won't have this information, and how this information is used is dependent upon the interface
# that reads it.
#
# Current well-known uses:
#  * workflow_execution_started_event_attributes - summary and details from start workflow.
#  * timer_started_event_attributes - summary represents an identifier for the timer for use by
#    user interfaces.
  sig { returns(T.nilable(Temporalio::Api::Sdk::V1::UserMetadata)) }
  def user_metadata
  end

  # Metadata on the event. This is often carried over from commands and client calls. Most events
# won't have this information, and how this information is used is dependent upon the interface
# that reads it.
#
# Current well-known uses:
#  * workflow_execution_started_event_attributes - summary and details from start workflow.
#  * timer_started_event_attributes - summary represents an identifier for the timer for use by
#    user interfaces.
  sig { params(value: T.nilable(Temporalio::Api::Sdk::V1::UserMetadata)).void }
  def user_metadata=(value)
  end

  # Metadata on the event. This is often carried over from commands and client calls. Most events
# won't have this information, and how this information is used is dependent upon the interface
# that reads it.
#
# Current well-known uses:
#  * workflow_execution_started_event_attributes - summary and details from start workflow.
#  * timer_started_event_attributes - summary represents an identifier for the timer for use by
#    user interfaces.
  sig { void }
  def clear_user_metadata
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::WorkflowExecutionStartedEventAttributes)) }
  def workflow_execution_started_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionStartedEventAttributes)).void }
  def workflow_execution_started_event_attributes=(value)
  end

  sig { void }
  def clear_workflow_execution_started_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::WorkflowExecutionCompletedEventAttributes)) }
  def workflow_execution_completed_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionCompletedEventAttributes)).void }
  def workflow_execution_completed_event_attributes=(value)
  end

  sig { void }
  def clear_workflow_execution_completed_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::WorkflowExecutionFailedEventAttributes)) }
  def workflow_execution_failed_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionFailedEventAttributes)).void }
  def workflow_execution_failed_event_attributes=(value)
  end

  sig { void }
  def clear_workflow_execution_failed_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::WorkflowExecutionTimedOutEventAttributes)) }
  def workflow_execution_timed_out_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionTimedOutEventAttributes)).void }
  def workflow_execution_timed_out_event_attributes=(value)
  end

  sig { void }
  def clear_workflow_execution_timed_out_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::WorkflowTaskScheduledEventAttributes)) }
  def workflow_task_scheduled_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::WorkflowTaskScheduledEventAttributes)).void }
  def workflow_task_scheduled_event_attributes=(value)
  end

  sig { void }
  def clear_workflow_task_scheduled_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::WorkflowTaskStartedEventAttributes)) }
  def workflow_task_started_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::WorkflowTaskStartedEventAttributes)).void }
  def workflow_task_started_event_attributes=(value)
  end

  sig { void }
  def clear_workflow_task_started_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::WorkflowTaskCompletedEventAttributes)) }
  def workflow_task_completed_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::WorkflowTaskCompletedEventAttributes)).void }
  def workflow_task_completed_event_attributes=(value)
  end

  sig { void }
  def clear_workflow_task_completed_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::WorkflowTaskTimedOutEventAttributes)) }
  def workflow_task_timed_out_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::WorkflowTaskTimedOutEventAttributes)).void }
  def workflow_task_timed_out_event_attributes=(value)
  end

  sig { void }
  def clear_workflow_task_timed_out_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::WorkflowTaskFailedEventAttributes)) }
  def workflow_task_failed_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::WorkflowTaskFailedEventAttributes)).void }
  def workflow_task_failed_event_attributes=(value)
  end

  sig { void }
  def clear_workflow_task_failed_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::ActivityTaskScheduledEventAttributes)) }
  def activity_task_scheduled_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::ActivityTaskScheduledEventAttributes)).void }
  def activity_task_scheduled_event_attributes=(value)
  end

  sig { void }
  def clear_activity_task_scheduled_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::ActivityTaskStartedEventAttributes)) }
  def activity_task_started_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::ActivityTaskStartedEventAttributes)).void }
  def activity_task_started_event_attributes=(value)
  end

  sig { void }
  def clear_activity_task_started_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::ActivityTaskCompletedEventAttributes)) }
  def activity_task_completed_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::ActivityTaskCompletedEventAttributes)).void }
  def activity_task_completed_event_attributes=(value)
  end

  sig { void }
  def clear_activity_task_completed_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::ActivityTaskFailedEventAttributes)) }
  def activity_task_failed_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::ActivityTaskFailedEventAttributes)).void }
  def activity_task_failed_event_attributes=(value)
  end

  sig { void }
  def clear_activity_task_failed_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::ActivityTaskTimedOutEventAttributes)) }
  def activity_task_timed_out_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::ActivityTaskTimedOutEventAttributes)).void }
  def activity_task_timed_out_event_attributes=(value)
  end

  sig { void }
  def clear_activity_task_timed_out_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::TimerStartedEventAttributes)) }
  def timer_started_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::TimerStartedEventAttributes)).void }
  def timer_started_event_attributes=(value)
  end

  sig { void }
  def clear_timer_started_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::TimerFiredEventAttributes)) }
  def timer_fired_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::TimerFiredEventAttributes)).void }
  def timer_fired_event_attributes=(value)
  end

  sig { void }
  def clear_timer_fired_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::ActivityTaskCancelRequestedEventAttributes)) }
  def activity_task_cancel_requested_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::ActivityTaskCancelRequestedEventAttributes)).void }
  def activity_task_cancel_requested_event_attributes=(value)
  end

  sig { void }
  def clear_activity_task_cancel_requested_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::ActivityTaskCanceledEventAttributes)) }
  def activity_task_canceled_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::ActivityTaskCanceledEventAttributes)).void }
  def activity_task_canceled_event_attributes=(value)
  end

  sig { void }
  def clear_activity_task_canceled_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::TimerCanceledEventAttributes)) }
  def timer_canceled_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::TimerCanceledEventAttributes)).void }
  def timer_canceled_event_attributes=(value)
  end

  sig { void }
  def clear_timer_canceled_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::MarkerRecordedEventAttributes)) }
  def marker_recorded_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::MarkerRecordedEventAttributes)).void }
  def marker_recorded_event_attributes=(value)
  end

  sig { void }
  def clear_marker_recorded_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::WorkflowExecutionSignaledEventAttributes)) }
  def workflow_execution_signaled_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionSignaledEventAttributes)).void }
  def workflow_execution_signaled_event_attributes=(value)
  end

  sig { void }
  def clear_workflow_execution_signaled_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::WorkflowExecutionTerminatedEventAttributes)) }
  def workflow_execution_terminated_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionTerminatedEventAttributes)).void }
  def workflow_execution_terminated_event_attributes=(value)
  end

  sig { void }
  def clear_workflow_execution_terminated_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::WorkflowExecutionCancelRequestedEventAttributes)) }
  def workflow_execution_cancel_requested_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionCancelRequestedEventAttributes)).void }
  def workflow_execution_cancel_requested_event_attributes=(value)
  end

  sig { void }
  def clear_workflow_execution_cancel_requested_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::WorkflowExecutionCanceledEventAttributes)) }
  def workflow_execution_canceled_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionCanceledEventAttributes)).void }
  def workflow_execution_canceled_event_attributes=(value)
  end

  sig { void }
  def clear_workflow_execution_canceled_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::RequestCancelExternalWorkflowExecutionInitiatedEventAttributes)) }
  def request_cancel_external_workflow_execution_initiated_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::RequestCancelExternalWorkflowExecutionInitiatedEventAttributes)).void }
  def request_cancel_external_workflow_execution_initiated_event_attributes=(value)
  end

  sig { void }
  def clear_request_cancel_external_workflow_execution_initiated_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::RequestCancelExternalWorkflowExecutionFailedEventAttributes)) }
  def request_cancel_external_workflow_execution_failed_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::RequestCancelExternalWorkflowExecutionFailedEventAttributes)).void }
  def request_cancel_external_workflow_execution_failed_event_attributes=(value)
  end

  sig { void }
  def clear_request_cancel_external_workflow_execution_failed_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::ExternalWorkflowExecutionCancelRequestedEventAttributes)) }
  def external_workflow_execution_cancel_requested_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::ExternalWorkflowExecutionCancelRequestedEventAttributes)).void }
  def external_workflow_execution_cancel_requested_event_attributes=(value)
  end

  sig { void }
  def clear_external_workflow_execution_cancel_requested_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::WorkflowExecutionContinuedAsNewEventAttributes)) }
  def workflow_execution_continued_as_new_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionContinuedAsNewEventAttributes)).void }
  def workflow_execution_continued_as_new_event_attributes=(value)
  end

  sig { void }
  def clear_workflow_execution_continued_as_new_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::StartChildWorkflowExecutionInitiatedEventAttributes)) }
  def start_child_workflow_execution_initiated_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::StartChildWorkflowExecutionInitiatedEventAttributes)).void }
  def start_child_workflow_execution_initiated_event_attributes=(value)
  end

  sig { void }
  def clear_start_child_workflow_execution_initiated_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::StartChildWorkflowExecutionFailedEventAttributes)) }
  def start_child_workflow_execution_failed_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::StartChildWorkflowExecutionFailedEventAttributes)).void }
  def start_child_workflow_execution_failed_event_attributes=(value)
  end

  sig { void }
  def clear_start_child_workflow_execution_failed_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::ChildWorkflowExecutionStartedEventAttributes)) }
  def child_workflow_execution_started_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::ChildWorkflowExecutionStartedEventAttributes)).void }
  def child_workflow_execution_started_event_attributes=(value)
  end

  sig { void }
  def clear_child_workflow_execution_started_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::ChildWorkflowExecutionCompletedEventAttributes)) }
  def child_workflow_execution_completed_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::ChildWorkflowExecutionCompletedEventAttributes)).void }
  def child_workflow_execution_completed_event_attributes=(value)
  end

  sig { void }
  def clear_child_workflow_execution_completed_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::ChildWorkflowExecutionFailedEventAttributes)) }
  def child_workflow_execution_failed_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::ChildWorkflowExecutionFailedEventAttributes)).void }
  def child_workflow_execution_failed_event_attributes=(value)
  end

  sig { void }
  def clear_child_workflow_execution_failed_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::ChildWorkflowExecutionCanceledEventAttributes)) }
  def child_workflow_execution_canceled_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::ChildWorkflowExecutionCanceledEventAttributes)).void }
  def child_workflow_execution_canceled_event_attributes=(value)
  end

  sig { void }
  def clear_child_workflow_execution_canceled_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::ChildWorkflowExecutionTimedOutEventAttributes)) }
  def child_workflow_execution_timed_out_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::ChildWorkflowExecutionTimedOutEventAttributes)).void }
  def child_workflow_execution_timed_out_event_attributes=(value)
  end

  sig { void }
  def clear_child_workflow_execution_timed_out_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::ChildWorkflowExecutionTerminatedEventAttributes)) }
  def child_workflow_execution_terminated_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::ChildWorkflowExecutionTerminatedEventAttributes)).void }
  def child_workflow_execution_terminated_event_attributes=(value)
  end

  sig { void }
  def clear_child_workflow_execution_terminated_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::SignalExternalWorkflowExecutionInitiatedEventAttributes)) }
  def signal_external_workflow_execution_initiated_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::SignalExternalWorkflowExecutionInitiatedEventAttributes)).void }
  def signal_external_workflow_execution_initiated_event_attributes=(value)
  end

  sig { void }
  def clear_signal_external_workflow_execution_initiated_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::SignalExternalWorkflowExecutionFailedEventAttributes)) }
  def signal_external_workflow_execution_failed_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::SignalExternalWorkflowExecutionFailedEventAttributes)).void }
  def signal_external_workflow_execution_failed_event_attributes=(value)
  end

  sig { void }
  def clear_signal_external_workflow_execution_failed_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::ExternalWorkflowExecutionSignaledEventAttributes)) }
  def external_workflow_execution_signaled_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::ExternalWorkflowExecutionSignaledEventAttributes)).void }
  def external_workflow_execution_signaled_event_attributes=(value)
  end

  sig { void }
  def clear_external_workflow_execution_signaled_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::UpsertWorkflowSearchAttributesEventAttributes)) }
  def upsert_workflow_search_attributes_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::UpsertWorkflowSearchAttributesEventAttributes)).void }
  def upsert_workflow_search_attributes_event_attributes=(value)
  end

  sig { void }
  def clear_upsert_workflow_search_attributes_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::WorkflowExecutionUpdateAcceptedEventAttributes)) }
  def workflow_execution_update_accepted_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionUpdateAcceptedEventAttributes)).void }
  def workflow_execution_update_accepted_event_attributes=(value)
  end

  sig { void }
  def clear_workflow_execution_update_accepted_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::WorkflowExecutionUpdateRejectedEventAttributes)) }
  def workflow_execution_update_rejected_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionUpdateRejectedEventAttributes)).void }
  def workflow_execution_update_rejected_event_attributes=(value)
  end

  sig { void }
  def clear_workflow_execution_update_rejected_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::WorkflowExecutionUpdateCompletedEventAttributes)) }
  def workflow_execution_update_completed_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionUpdateCompletedEventAttributes)).void }
  def workflow_execution_update_completed_event_attributes=(value)
  end

  sig { void }
  def clear_workflow_execution_update_completed_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::WorkflowPropertiesModifiedExternallyEventAttributes)) }
  def workflow_properties_modified_externally_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::WorkflowPropertiesModifiedExternallyEventAttributes)).void }
  def workflow_properties_modified_externally_event_attributes=(value)
  end

  sig { void }
  def clear_workflow_properties_modified_externally_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::ActivityPropertiesModifiedExternallyEventAttributes)) }
  def activity_properties_modified_externally_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::ActivityPropertiesModifiedExternallyEventAttributes)).void }
  def activity_properties_modified_externally_event_attributes=(value)
  end

  sig { void }
  def clear_activity_properties_modified_externally_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::WorkflowPropertiesModifiedEventAttributes)) }
  def workflow_properties_modified_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::WorkflowPropertiesModifiedEventAttributes)).void }
  def workflow_properties_modified_event_attributes=(value)
  end

  sig { void }
  def clear_workflow_properties_modified_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::WorkflowExecutionUpdateAdmittedEventAttributes)) }
  def workflow_execution_update_admitted_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::WorkflowExecutionUpdateAdmittedEventAttributes)).void }
  def workflow_execution_update_admitted_event_attributes=(value)
  end

  sig { void }
  def clear_workflow_execution_update_admitted_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::NexusOperationScheduledEventAttributes)) }
  def nexus_operation_scheduled_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::NexusOperationScheduledEventAttributes)).void }
  def nexus_operation_scheduled_event_attributes=(value)
  end

  sig { void }
  def clear_nexus_operation_scheduled_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::NexusOperationStartedEventAttributes)) }
  def nexus_operation_started_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::NexusOperationStartedEventAttributes)).void }
  def nexus_operation_started_event_attributes=(value)
  end

  sig { void }
  def clear_nexus_operation_started_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::NexusOperationCompletedEventAttributes)) }
  def nexus_operation_completed_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::NexusOperationCompletedEventAttributes)).void }
  def nexus_operation_completed_event_attributes=(value)
  end

  sig { void }
  def clear_nexus_operation_completed_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::NexusOperationFailedEventAttributes)) }
  def nexus_operation_failed_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::NexusOperationFailedEventAttributes)).void }
  def nexus_operation_failed_event_attributes=(value)
  end

  sig { void }
  def clear_nexus_operation_failed_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::NexusOperationCanceledEventAttributes)) }
  def nexus_operation_canceled_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::NexusOperationCanceledEventAttributes)).void }
  def nexus_operation_canceled_event_attributes=(value)
  end

  sig { void }
  def clear_nexus_operation_canceled_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::NexusOperationTimedOutEventAttributes)) }
  def nexus_operation_timed_out_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::NexusOperationTimedOutEventAttributes)).void }
  def nexus_operation_timed_out_event_attributes=(value)
  end

  sig { void }
  def clear_nexus_operation_timed_out_event_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::NexusOperationCancelRequestedEventAttributes)) }
  def nexus_operation_cancel_requested_event_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::NexusOperationCancelRequestedEventAttributes)).void }
  def nexus_operation_cancel_requested_event_attributes=(value)
  end

  sig { void }
  def clear_nexus_operation_cancel_requested_event_attributes
  end

  sig { returns(T.nilable(Symbol)) }
  def attributes
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::History::V1::History
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::History::V1::History) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::History::V1::History).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::History::V1::History) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::History::V1::History, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      events: T.nilable(T::Array[T.nilable(Temporalio::Api::History::V1::HistoryEvent)])
    ).void
  end
  def initialize(
    events: []
  )
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::History::V1::HistoryEvent)]) }
  def events
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def events=(value)
  end

  sig { void }
  def clear_events
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end
