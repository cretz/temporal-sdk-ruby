# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: temporal/api/workflowservice/v1/request_response.proto
# typed: strict

class Temporalio::Api::WorkflowService::V1::RegisterNamespaceRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RegisterNamespaceRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RegisterNamespaceRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RegisterNamespaceRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RegisterNamespaceRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      description: T.nilable(String),
      owner_email: T.nilable(String),
      workflow_execution_retention_period: T.nilable(Google::Protobuf::Duration),
      clusters: T.nilable(T::Array[T.nilable(Temporalio::Api::Replication::V1::ClusterReplicationConfig)]),
      active_cluster_name: T.nilable(String),
      data: T.nilable(T::Hash[String, String]),
      security_token: T.nilable(String),
      is_global_namespace: T.nilable(T::Boolean),
      history_archival_state: T.nilable(T.any(Symbol, String, Integer)),
      history_archival_uri: T.nilable(String),
      visibility_archival_state: T.nilable(T.any(Symbol, String, Integer)),
      visibility_archival_uri: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    description: "",
    owner_email: "",
    workflow_execution_retention_period: nil,
    clusters: [],
    active_cluster_name: "",
    data: ::Google::Protobuf::Map.new(:string, :string),
    security_token: "",
    is_global_namespace: false,
    history_archival_state: :ARCHIVAL_STATE_UNSPECIFIED,
    history_archival_uri: "",
    visibility_archival_state: :ARCHIVAL_STATE_UNSPECIFIED,
    visibility_archival_uri: ""
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def description
  end

  sig { params(value: String).void }
  def description=(value)
  end

  sig { void }
  def clear_description
  end

  sig { returns(String) }
  def owner_email
  end

  sig { params(value: String).void }
  def owner_email=(value)
  end

  sig { void }
  def clear_owner_email
  end

  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_execution_retention_period
  end

  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_execution_retention_period=(value)
  end

  sig { void }
  def clear_workflow_execution_retention_period
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::Replication::V1::ClusterReplicationConfig)]) }
  def clusters
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def clusters=(value)
  end

  sig { void }
  def clear_clusters
  end

  sig { returns(String) }
  def active_cluster_name
  end

  sig { params(value: String).void }
  def active_cluster_name=(value)
  end

  sig { void }
  def clear_active_cluster_name
  end

  # A key-value map for any customized purpose.
  sig { returns(T::Hash[String, String]) }
  def data
  end

  # A key-value map for any customized purpose.
  sig { params(value: ::Google::Protobuf::Map).void }
  def data=(value)
  end

  # A key-value map for any customized purpose.
  sig { void }
  def clear_data
  end

  sig { returns(String) }
  def security_token
  end

  sig { params(value: String).void }
  def security_token=(value)
  end

  sig { void }
  def clear_security_token
  end

  sig { returns(T::Boolean) }
  def is_global_namespace
  end

  sig { params(value: T::Boolean).void }
  def is_global_namespace=(value)
  end

  sig { void }
  def clear_is_global_namespace
  end

  # If unspecified (ARCHIVAL_STATE_UNSPECIFIED) then default server configuration is used.
  sig { returns(T.any(Symbol, Integer)) }
  def history_archival_state
  end

  # If unspecified (ARCHIVAL_STATE_UNSPECIFIED) then default server configuration is used.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def history_archival_state=(value)
  end

  # If unspecified (ARCHIVAL_STATE_UNSPECIFIED) then default server configuration is used.
  sig { void }
  def clear_history_archival_state
  end

  sig { returns(String) }
  def history_archival_uri
  end

  sig { params(value: String).void }
  def history_archival_uri=(value)
  end

  sig { void }
  def clear_history_archival_uri
  end

  # If unspecified (ARCHIVAL_STATE_UNSPECIFIED) then default server configuration is used.
  sig { returns(T.any(Symbol, Integer)) }
  def visibility_archival_state
  end

  # If unspecified (ARCHIVAL_STATE_UNSPECIFIED) then default server configuration is used.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def visibility_archival_state=(value)
  end

  # If unspecified (ARCHIVAL_STATE_UNSPECIFIED) then default server configuration is used.
  sig { void }
  def clear_visibility_archival_state
  end

  sig { returns(String) }
  def visibility_archival_uri
  end

  sig { params(value: String).void }
  def visibility_archival_uri=(value)
  end

  sig { void }
  def clear_visibility_archival_uri
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RegisterNamespaceResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RegisterNamespaceResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RegisterNamespaceResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RegisterNamespaceResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RegisterNamespaceResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ListNamespacesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ListNamespacesRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListNamespacesRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ListNamespacesRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListNamespacesRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      page_size: T.nilable(Integer),
      next_page_token: T.nilable(String),
      namespace_filter: T.nilable(Temporalio::Api::Namespace::V1::NamespaceFilter)
    ).void
  end
  def initialize(
    page_size: 0,
    next_page_token: "",
    namespace_filter: nil
  )
  end

  sig { returns(Integer) }
  def page_size
  end

  sig { params(value: Integer).void }
  def page_size=(value)
  end

  sig { void }
  def clear_page_size
  end

  sig { returns(String) }
  def next_page_token
  end

  sig { params(value: String).void }
  def next_page_token=(value)
  end

  sig { void }
  def clear_next_page_token
  end

  sig { returns(T.nilable(Temporalio::Api::Namespace::V1::NamespaceFilter)) }
  def namespace_filter
  end

  sig { params(value: T.nilable(Temporalio::Api::Namespace::V1::NamespaceFilter)).void }
  def namespace_filter=(value)
  end

  sig { void }
  def clear_namespace_filter
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ListNamespacesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ListNamespacesResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListNamespacesResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ListNamespacesResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListNamespacesResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespaces: T.nilable(T::Array[T.nilable(Temporalio::Api::WorkflowService::V1::DescribeNamespaceResponse)]),
      next_page_token: T.nilable(String)
    ).void
  end
  def initialize(
    namespaces: [],
    next_page_token: ""
  )
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::WorkflowService::V1::DescribeNamespaceResponse)]) }
  def namespaces
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def namespaces=(value)
  end

  sig { void }
  def clear_namespaces
  end

  sig { returns(String) }
  def next_page_token
  end

  sig { params(value: String).void }
  def next_page_token=(value)
  end

  sig { void }
  def clear_next_page_token
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::DescribeNamespaceRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::DescribeNamespaceRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DescribeNamespaceRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::DescribeNamespaceRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DescribeNamespaceRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      id: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    id: ""
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def id
  end

  sig { params(value: String).void }
  def id=(value)
  end

  sig { void }
  def clear_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::DescribeNamespaceResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::DescribeNamespaceResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DescribeNamespaceResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::DescribeNamespaceResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DescribeNamespaceResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace_info: T.nilable(Temporalio::Api::Namespace::V1::NamespaceInfo),
      config: T.nilable(Temporalio::Api::Namespace::V1::NamespaceConfig),
      replication_config: T.nilable(Temporalio::Api::Replication::V1::NamespaceReplicationConfig),
      failover_version: T.nilable(Integer),
      is_global_namespace: T.nilable(T::Boolean),
      failover_history: T.nilable(T::Array[T.nilable(Temporalio::Api::Replication::V1::FailoverStatus)])
    ).void
  end
  def initialize(
    namespace_info: nil,
    config: nil,
    replication_config: nil,
    failover_version: 0,
    is_global_namespace: false,
    failover_history: []
  )
  end

  sig { returns(T.nilable(Temporalio::Api::Namespace::V1::NamespaceInfo)) }
  def namespace_info
  end

  sig { params(value: T.nilable(Temporalio::Api::Namespace::V1::NamespaceInfo)).void }
  def namespace_info=(value)
  end

  sig { void }
  def clear_namespace_info
  end

  sig { returns(T.nilable(Temporalio::Api::Namespace::V1::NamespaceConfig)) }
  def config
  end

  sig { params(value: T.nilable(Temporalio::Api::Namespace::V1::NamespaceConfig)).void }
  def config=(value)
  end

  sig { void }
  def clear_config
  end

  sig { returns(T.nilable(Temporalio::Api::Replication::V1::NamespaceReplicationConfig)) }
  def replication_config
  end

  sig { params(value: T.nilable(Temporalio::Api::Replication::V1::NamespaceReplicationConfig)).void }
  def replication_config=(value)
  end

  sig { void }
  def clear_replication_config
  end

  sig { returns(Integer) }
  def failover_version
  end

  sig { params(value: Integer).void }
  def failover_version=(value)
  end

  sig { void }
  def clear_failover_version
  end

  sig { returns(T::Boolean) }
  def is_global_namespace
  end

  sig { params(value: T::Boolean).void }
  def is_global_namespace=(value)
  end

  sig { void }
  def clear_is_global_namespace
  end

  # Contains the historical state of failover_versions for the cluster, truncated to contain only the last N
# states to ensure that the list does not grow unbounded.
  sig { returns(T::Array[T.nilable(Temporalio::Api::Replication::V1::FailoverStatus)]) }
  def failover_history
  end

  # Contains the historical state of failover_versions for the cluster, truncated to contain only the last N
# states to ensure that the list does not grow unbounded.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def failover_history=(value)
  end

  # Contains the historical state of failover_versions for the cluster, truncated to contain only the last N
# states to ensure that the list does not grow unbounded.
  sig { void }
  def clear_failover_history
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::UpdateNamespaceRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::UpdateNamespaceRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateNamespaceRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::UpdateNamespaceRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateNamespaceRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      update_info: T.nilable(Temporalio::Api::Namespace::V1::UpdateNamespaceInfo),
      config: T.nilable(Temporalio::Api::Namespace::V1::NamespaceConfig),
      replication_config: T.nilable(Temporalio::Api::Replication::V1::NamespaceReplicationConfig),
      security_token: T.nilable(String),
      delete_bad_binary: T.nilable(String),
      promote_namespace: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    namespace: "",
    update_info: nil,
    config: nil,
    replication_config: nil,
    security_token: "",
    delete_bad_binary: "",
    promote_namespace: false
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(T.nilable(Temporalio::Api::Namespace::V1::UpdateNamespaceInfo)) }
  def update_info
  end

  sig { params(value: T.nilable(Temporalio::Api::Namespace::V1::UpdateNamespaceInfo)).void }
  def update_info=(value)
  end

  sig { void }
  def clear_update_info
  end

  sig { returns(T.nilable(Temporalio::Api::Namespace::V1::NamespaceConfig)) }
  def config
  end

  sig { params(value: T.nilable(Temporalio::Api::Namespace::V1::NamespaceConfig)).void }
  def config=(value)
  end

  sig { void }
  def clear_config
  end

  sig { returns(T.nilable(Temporalio::Api::Replication::V1::NamespaceReplicationConfig)) }
  def replication_config
  end

  sig { params(value: T.nilable(Temporalio::Api::Replication::V1::NamespaceReplicationConfig)).void }
  def replication_config=(value)
  end

  sig { void }
  def clear_replication_config
  end

  sig { returns(String) }
  def security_token
  end

  sig { params(value: String).void }
  def security_token=(value)
  end

  sig { void }
  def clear_security_token
  end

  sig { returns(String) }
  def delete_bad_binary
  end

  sig { params(value: String).void }
  def delete_bad_binary=(value)
  end

  sig { void }
  def clear_delete_bad_binary
  end

  # promote local namespace to global namespace. Ignored if namespace is already global namespace.
  sig { returns(T::Boolean) }
  def promote_namespace
  end

  # promote local namespace to global namespace. Ignored if namespace is already global namespace.
  sig { params(value: T::Boolean).void }
  def promote_namespace=(value)
  end

  # promote local namespace to global namespace. Ignored if namespace is already global namespace.
  sig { void }
  def clear_promote_namespace
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::UpdateNamespaceResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::UpdateNamespaceResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateNamespaceResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::UpdateNamespaceResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateNamespaceResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace_info: T.nilable(Temporalio::Api::Namespace::V1::NamespaceInfo),
      config: T.nilable(Temporalio::Api::Namespace::V1::NamespaceConfig),
      replication_config: T.nilable(Temporalio::Api::Replication::V1::NamespaceReplicationConfig),
      failover_version: T.nilable(Integer),
      is_global_namespace: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    namespace_info: nil,
    config: nil,
    replication_config: nil,
    failover_version: 0,
    is_global_namespace: false
  )
  end

  sig { returns(T.nilable(Temporalio::Api::Namespace::V1::NamespaceInfo)) }
  def namespace_info
  end

  sig { params(value: T.nilable(Temporalio::Api::Namespace::V1::NamespaceInfo)).void }
  def namespace_info=(value)
  end

  sig { void }
  def clear_namespace_info
  end

  sig { returns(T.nilable(Temporalio::Api::Namespace::V1::NamespaceConfig)) }
  def config
  end

  sig { params(value: T.nilable(Temporalio::Api::Namespace::V1::NamespaceConfig)).void }
  def config=(value)
  end

  sig { void }
  def clear_config
  end

  sig { returns(T.nilable(Temporalio::Api::Replication::V1::NamespaceReplicationConfig)) }
  def replication_config
  end

  sig { params(value: T.nilable(Temporalio::Api::Replication::V1::NamespaceReplicationConfig)).void }
  def replication_config=(value)
  end

  sig { void }
  def clear_replication_config
  end

  sig { returns(Integer) }
  def failover_version
  end

  sig { params(value: Integer).void }
  def failover_version=(value)
  end

  sig { void }
  def clear_failover_version
  end

  sig { returns(T::Boolean) }
  def is_global_namespace
  end

  sig { params(value: T::Boolean).void }
  def is_global_namespace=(value)
  end

  sig { void }
  def clear_is_global_namespace
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Deprecated.
class Temporalio::Api::WorkflowService::V1::DeprecateNamespaceRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::DeprecateNamespaceRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DeprecateNamespaceRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::DeprecateNamespaceRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DeprecateNamespaceRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      security_token: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    security_token: ""
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def security_token
  end

  sig { params(value: String).void }
  def security_token=(value)
  end

  sig { void }
  def clear_security_token
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Deprecated.
class Temporalio::Api::WorkflowService::V1::DeprecateNamespaceResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::DeprecateNamespaceResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DeprecateNamespaceResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::DeprecateNamespaceResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DeprecateNamespaceResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::StartWorkflowExecutionRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::StartWorkflowExecutionRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::StartWorkflowExecutionRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::StartWorkflowExecutionRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::StartWorkflowExecutionRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      workflow_id: T.nilable(String),
      workflow_type: T.nilable(Temporalio::Api::Common::V1::WorkflowType),
      task_queue: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue),
      input: T.nilable(Temporalio::Api::Common::V1::Payloads),
      workflow_execution_timeout: T.nilable(Google::Protobuf::Duration),
      workflow_run_timeout: T.nilable(Google::Protobuf::Duration),
      workflow_task_timeout: T.nilable(Google::Protobuf::Duration),
      identity: T.nilable(String),
      request_id: T.nilable(String),
      workflow_id_reuse_policy: T.nilable(T.any(Symbol, String, Integer)),
      workflow_id_conflict_policy: T.nilable(T.any(Symbol, String, Integer)),
      retry_policy: T.nilable(Temporalio::Api::Common::V1::RetryPolicy),
      cron_schedule: T.nilable(String),
      memo: T.nilable(Temporalio::Api::Common::V1::Memo),
      search_attributes: T.nilable(Temporalio::Api::Common::V1::SearchAttributes),
      header: T.nilable(Temporalio::Api::Common::V1::Header),
      request_eager_execution: T.nilable(T::Boolean),
      continued_failure: T.nilable(Temporalio::Api::Failure::V1::Failure),
      last_completion_result: T.nilable(Temporalio::Api::Common::V1::Payloads),
      workflow_start_delay: T.nilable(Google::Protobuf::Duration),
      completion_callbacks: T.nilable(T::Array[T.nilable(Temporalio::Api::Common::V1::Callback)]),
      user_metadata: T.nilable(Temporalio::Api::Sdk::V1::UserMetadata)
    ).void
  end
  def initialize(
    namespace: "",
    workflow_id: "",
    workflow_type: nil,
    task_queue: nil,
    input: nil,
    workflow_execution_timeout: nil,
    workflow_run_timeout: nil,
    workflow_task_timeout: nil,
    identity: "",
    request_id: "",
    workflow_id_reuse_policy: :WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED,
    workflow_id_conflict_policy: :WORKFLOW_ID_CONFLICT_POLICY_UNSPECIFIED,
    retry_policy: nil,
    cron_schedule: "",
    memo: nil,
    search_attributes: nil,
    header: nil,
    request_eager_execution: false,
    continued_failure: nil,
    last_completion_result: nil,
    workflow_start_delay: nil,
    completion_callbacks: [],
    user_metadata: nil
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def workflow_id
  end

  sig { params(value: String).void }
  def workflow_id=(value)
  end

  sig { void }
  def clear_workflow_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowType)) }
  def workflow_type
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowType)).void }
  def workflow_type=(value)
  end

  sig { void }
  def clear_workflow_type
  end

  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)) }
  def task_queue
  end

  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)).void }
  def task_queue=(value)
  end

  sig { void }
  def clear_task_queue
  end

  # Serialized arguments to the workflow. These are passed as arguments to the workflow function.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def input
  end

  # Serialized arguments to the workflow. These are passed as arguments to the workflow function.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def input=(value)
  end

  # Serialized arguments to the workflow. These are passed as arguments to the workflow function.
  sig { void }
  def clear_input
  end

  # Total workflow execution timeout including retries and continue as new.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_execution_timeout
  end

  # Total workflow execution timeout including retries and continue as new.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_execution_timeout=(value)
  end

  # Total workflow execution timeout including retries and continue as new.
  sig { void }
  def clear_workflow_execution_timeout
  end

  # Timeout of a single workflow run.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_run_timeout
  end

  # Timeout of a single workflow run.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_run_timeout=(value)
  end

  # Timeout of a single workflow run.
  sig { void }
  def clear_workflow_run_timeout
  end

  # Timeout of a single workflow task.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_task_timeout
  end

  # Timeout of a single workflow task.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_task_timeout=(value)
  end

  # Timeout of a single workflow task.
  sig { void }
  def clear_workflow_task_timeout
  end

  # The identity of the client who initiated this request
  sig { returns(String) }
  def identity
  end

  # The identity of the client who initiated this request
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the client who initiated this request
  sig { void }
  def clear_identity
  end

  # A unique identifier for this start request. Typically UUIDv4.
  sig { returns(String) }
  def request_id
  end

  # A unique identifier for this start request. Typically UUIDv4.
  sig { params(value: String).void }
  def request_id=(value)
  end

  # A unique identifier for this start request. Typically UUIDv4.
  sig { void }
  def clear_request_id
  end

  # Defines whether to allow re-using the workflow id from a previously *closed* workflow.
# The default policy is WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
#
# See `workflow_id_conflict_policy` for handling a workflow id duplication with a *running* workflow.
  sig { returns(T.any(Symbol, Integer)) }
  def workflow_id_reuse_policy
  end

  # Defines whether to allow re-using the workflow id from a previously *closed* workflow.
# The default policy is WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
#
# See `workflow_id_conflict_policy` for handling a workflow id duplication with a *running* workflow.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def workflow_id_reuse_policy=(value)
  end

  # Defines whether to allow re-using the workflow id from a previously *closed* workflow.
# The default policy is WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
#
# See `workflow_id_conflict_policy` for handling a workflow id duplication with a *running* workflow.
  sig { void }
  def clear_workflow_id_reuse_policy
  end

  # Defines how to resolve a workflow id conflict with a *running* workflow.
# The default policy is WORKFLOW_ID_CONFLICT_POLICY_FAIL.
#
# See `workflow_id_reuse_policy` for handling a workflow id duplication with a *closed* workflow.
  sig { returns(T.any(Symbol, Integer)) }
  def workflow_id_conflict_policy
  end

  # Defines how to resolve a workflow id conflict with a *running* workflow.
# The default policy is WORKFLOW_ID_CONFLICT_POLICY_FAIL.
#
# See `workflow_id_reuse_policy` for handling a workflow id duplication with a *closed* workflow.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def workflow_id_conflict_policy=(value)
  end

  # Defines how to resolve a workflow id conflict with a *running* workflow.
# The default policy is WORKFLOW_ID_CONFLICT_POLICY_FAIL.
#
# See `workflow_id_reuse_policy` for handling a workflow id duplication with a *closed* workflow.
  sig { void }
  def clear_workflow_id_conflict_policy
  end

  # The retry policy for the workflow. Will never exceed `workflow_execution_timeout`.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::RetryPolicy)) }
  def retry_policy
  end

  # The retry policy for the workflow. Will never exceed `workflow_execution_timeout`.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::RetryPolicy)).void }
  def retry_policy=(value)
  end

  # The retry policy for the workflow. Will never exceed `workflow_execution_timeout`.
  sig { void }
  def clear_retry_policy
  end

  # See https://docs.temporal.io/docs/content/what-is-a-temporal-cron-job/
  sig { returns(String) }
  def cron_schedule
  end

  # See https://docs.temporal.io/docs/content/what-is-a-temporal-cron-job/
  sig { params(value: String).void }
  def cron_schedule=(value)
  end

  # See https://docs.temporal.io/docs/content/what-is-a-temporal-cron-job/
  sig { void }
  def clear_cron_schedule
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Memo)) }
  def memo
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Memo)).void }
  def memo=(value)
  end

  sig { void }
  def clear_memo
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::SearchAttributes)) }
  def search_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::SearchAttributes)).void }
  def search_attributes=(value)
  end

  sig { void }
  def clear_search_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Header)) }
  def header
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Header)).void }
  def header=(value)
  end

  sig { void }
  def clear_header
  end

  # Request to get the first workflow task inline in the response bypassing matching service and worker polling.
# If set to `true` the caller is expected to have a worker available and capable of processing the task.
# The returned task will be marked as started and is expected to be completed by the specified
# `workflow_task_timeout`.
  sig { returns(T::Boolean) }
  def request_eager_execution
  end

  # Request to get the first workflow task inline in the response bypassing matching service and worker polling.
# If set to `true` the caller is expected to have a worker available and capable of processing the task.
# The returned task will be marked as started and is expected to be completed by the specified
# `workflow_task_timeout`.
  sig { params(value: T::Boolean).void }
  def request_eager_execution=(value)
  end

  # Request to get the first workflow task inline in the response bypassing matching service and worker polling.
# If set to `true` the caller is expected to have a worker available and capable of processing the task.
# The returned task will be marked as started and is expected to be completed by the specified
# `workflow_task_timeout`.
  sig { void }
  def clear_request_eager_execution
  end

  # These values will be available as ContinuedFailure and LastCompletionResult in the
# WorkflowExecutionStarted event and through SDKs. The are currently only used by the
# server itself (for the schedules feature) and are not intended to be exposed in
# StartWorkflowExecution.
  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def continued_failure
  end

  # These values will be available as ContinuedFailure and LastCompletionResult in the
# WorkflowExecutionStarted event and through SDKs. The are currently only used by the
# server itself (for the schedules feature) and are not intended to be exposed in
# StartWorkflowExecution.
  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def continued_failure=(value)
  end

  # These values will be available as ContinuedFailure and LastCompletionResult in the
# WorkflowExecutionStarted event and through SDKs. The are currently only used by the
# server itself (for the schedules feature) and are not intended to be exposed in
# StartWorkflowExecution.
  sig { void }
  def clear_continued_failure
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def last_completion_result
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def last_completion_result=(value)
  end

  sig { void }
  def clear_last_completion_result
  end

  # Time to wait before dispatching the first workflow task. Cannot be used with `cron_schedule`.
# If the workflow gets a signal before the delay, a workflow task will be dispatched and the rest
# of the delay will be ignored.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_start_delay
  end

  # Time to wait before dispatching the first workflow task. Cannot be used with `cron_schedule`.
# If the workflow gets a signal before the delay, a workflow task will be dispatched and the rest
# of the delay will be ignored.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_start_delay=(value)
  end

  # Time to wait before dispatching the first workflow task. Cannot be used with `cron_schedule`.
# If the workflow gets a signal before the delay, a workflow task will be dispatched and the rest
# of the delay will be ignored.
  sig { void }
  def clear_workflow_start_delay
  end

  # Callbacks to be called by the server when this workflow reaches a terminal state.
# If the workflow continues-as-new, these callbacks will be carried over to the new execution.
# Callback addresses must be whitelisted in the server's dynamic configuration.
  sig { returns(T::Array[T.nilable(Temporalio::Api::Common::V1::Callback)]) }
  def completion_callbacks
  end

  # Callbacks to be called by the server when this workflow reaches a terminal state.
# If the workflow continues-as-new, these callbacks will be carried over to the new execution.
# Callback addresses must be whitelisted in the server's dynamic configuration.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def completion_callbacks=(value)
  end

  # Callbacks to be called by the server when this workflow reaches a terminal state.
# If the workflow continues-as-new, these callbacks will be carried over to the new execution.
# Callback addresses must be whitelisted in the server's dynamic configuration.
  sig { void }
  def clear_completion_callbacks
  end

  # Metadata on the workflow if it is started. This is carried over to the WorkflowExecutionInfo
# for use by user interfaces to display the fixed as-of-start summary and details of the
# workflow.
  sig { returns(T.nilable(Temporalio::Api::Sdk::V1::UserMetadata)) }
  def user_metadata
  end

  # Metadata on the workflow if it is started. This is carried over to the WorkflowExecutionInfo
# for use by user interfaces to display the fixed as-of-start summary and details of the
# workflow.
  sig { params(value: T.nilable(Temporalio::Api::Sdk::V1::UserMetadata)).void }
  def user_metadata=(value)
  end

  # Metadata on the workflow if it is started. This is carried over to the WorkflowExecutionInfo
# for use by user interfaces to display the fixed as-of-start summary and details of the
# workflow.
  sig { void }
  def clear_user_metadata
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::StartWorkflowExecutionResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::StartWorkflowExecutionResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::StartWorkflowExecutionResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::StartWorkflowExecutionResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::StartWorkflowExecutionResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      run_id: T.nilable(String),
      started: T.nilable(T::Boolean),
      eager_workflow_task: T.nilable(Temporalio::Api::WorkflowService::V1::PollWorkflowTaskQueueResponse)
    ).void
  end
  def initialize(
    run_id: "",
    started: false,
    eager_workflow_task: nil
  )
  end

  # The run id of the workflow that was started - or used (via WorkflowIdConflictPolicy USE_EXISTING).
  sig { returns(String) }
  def run_id
  end

  # The run id of the workflow that was started - or used (via WorkflowIdConflictPolicy USE_EXISTING).
  sig { params(value: String).void }
  def run_id=(value)
  end

  # The run id of the workflow that was started - or used (via WorkflowIdConflictPolicy USE_EXISTING).
  sig { void }
  def clear_run_id
  end

  # If true, a new workflow was started.
  sig { returns(T::Boolean) }
  def started
  end

  # If true, a new workflow was started.
  sig { params(value: T::Boolean).void }
  def started=(value)
  end

  # If true, a new workflow was started.
  sig { void }
  def clear_started
  end

  # When `request_eager_execution` is set on the `StartWorkflowExecutionRequest`, the server - if supported - will
# return the first workflow task to be eagerly executed.
# The caller is expected to have a worker available to process the task.
  sig { returns(T.nilable(Temporalio::Api::WorkflowService::V1::PollWorkflowTaskQueueResponse)) }
  def eager_workflow_task
  end

  # When `request_eager_execution` is set on the `StartWorkflowExecutionRequest`, the server - if supported - will
# return the first workflow task to be eagerly executed.
# The caller is expected to have a worker available to process the task.
  sig { params(value: T.nilable(Temporalio::Api::WorkflowService::V1::PollWorkflowTaskQueueResponse)).void }
  def eager_workflow_task=(value)
  end

  # When `request_eager_execution` is set on the `StartWorkflowExecutionRequest`, the server - if supported - will
# return the first workflow task to be eagerly executed.
# The caller is expected to have a worker available to process the task.
  sig { void }
  def clear_eager_workflow_task
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      maximum_page_size: T.nilable(Integer),
      next_page_token: T.nilable(String),
      wait_new_event: T.nilable(T::Boolean),
      history_event_filter_type: T.nilable(T.any(Symbol, String, Integer)),
      skip_archival: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    namespace: "",
    execution: nil,
    maximum_page_size: 0,
    next_page_token: "",
    wait_new_event: false,
    history_event_filter_type: :HISTORY_EVENT_FILTER_TYPE_UNSPECIFIED,
    skip_archival: false
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def execution=(value)
  end

  sig { void }
  def clear_execution
  end

  sig { returns(Integer) }
  def maximum_page_size
  end

  sig { params(value: Integer).void }
  def maximum_page_size=(value)
  end

  sig { void }
  def clear_maximum_page_size
  end

  # If a `GetWorkflowExecutionHistoryResponse` or a `PollWorkflowTaskQueueResponse` had one of
# these, it should be passed here to fetch the next page.
  sig { returns(String) }
  def next_page_token
  end

  # If a `GetWorkflowExecutionHistoryResponse` or a `PollWorkflowTaskQueueResponse` had one of
# these, it should be passed here to fetch the next page.
  sig { params(value: String).void }
  def next_page_token=(value)
  end

  # If a `GetWorkflowExecutionHistoryResponse` or a `PollWorkflowTaskQueueResponse` had one of
# these, it should be passed here to fetch the next page.
  sig { void }
  def clear_next_page_token
  end

  # If set to true, the RPC call will not resolve until there is a new event which matches
# the `history_event_filter_type`, or a timeout is hit.
  sig { returns(T::Boolean) }
  def wait_new_event
  end

  # If set to true, the RPC call will not resolve until there is a new event which matches
# the `history_event_filter_type`, or a timeout is hit.
  sig { params(value: T::Boolean).void }
  def wait_new_event=(value)
  end

  # If set to true, the RPC call will not resolve until there is a new event which matches
# the `history_event_filter_type`, or a timeout is hit.
  sig { void }
  def clear_wait_new_event
  end

  # Filter returned events such that they match the specified filter type.
# Default: HISTORY_EVENT_FILTER_TYPE_ALL_EVENT.
  sig { returns(T.any(Symbol, Integer)) }
  def history_event_filter_type
  end

  # Filter returned events such that they match the specified filter type.
# Default: HISTORY_EVENT_FILTER_TYPE_ALL_EVENT.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def history_event_filter_type=(value)
  end

  # Filter returned events such that they match the specified filter type.
# Default: HISTORY_EVENT_FILTER_TYPE_ALL_EVENT.
  sig { void }
  def clear_history_event_filter_type
  end

  sig { returns(T::Boolean) }
  def skip_archival
  end

  sig { params(value: T::Boolean).void }
  def skip_archival=(value)
  end

  sig { void }
  def clear_skip_archival
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      history: T.nilable(Temporalio::Api::History::V1::History),
      raw_history: T.nilable(T::Array[T.nilable(Temporalio::Api::Common::V1::DataBlob)]),
      next_page_token: T.nilable(String),
      archived: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    history: nil,
    raw_history: [],
    next_page_token: "",
    archived: false
  )
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::History)) }
  def history
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::History)).void }
  def history=(value)
  end

  sig { void }
  def clear_history
  end

  # Raw history is an alternate representation of history that may be returned if configured on
# the frontend. This is not supported by all SDKs. Either this or `history` will be set.
  sig { returns(T::Array[T.nilable(Temporalio::Api::Common::V1::DataBlob)]) }
  def raw_history
  end

  # Raw history is an alternate representation of history that may be returned if configured on
# the frontend. This is not supported by all SDKs. Either this or `history` will be set.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def raw_history=(value)
  end

  # Raw history is an alternate representation of history that may be returned if configured on
# the frontend. This is not supported by all SDKs. Either this or `history` will be set.
  sig { void }
  def clear_raw_history
  end

  # Will be set if there are more history events than were included in this response
  sig { returns(String) }
  def next_page_token
  end

  # Will be set if there are more history events than were included in this response
  sig { params(value: String).void }
  def next_page_token=(value)
  end

  # Will be set if there are more history events than were included in this response
  sig { void }
  def clear_next_page_token
  end

  sig { returns(T::Boolean) }
  def archived
  end

  sig { params(value: T::Boolean).void }
  def archived=(value)
  end

  sig { void }
  def clear_archived
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryReverseRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryReverseRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryReverseRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryReverseRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryReverseRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      maximum_page_size: T.nilable(Integer),
      next_page_token: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    execution: nil,
    maximum_page_size: 0,
    next_page_token: ""
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def execution=(value)
  end

  sig { void }
  def clear_execution
  end

  sig { returns(Integer) }
  def maximum_page_size
  end

  sig { params(value: Integer).void }
  def maximum_page_size=(value)
  end

  sig { void }
  def clear_maximum_page_size
  end

  sig { returns(String) }
  def next_page_token
  end

  sig { params(value: String).void }
  def next_page_token=(value)
  end

  sig { void }
  def clear_next_page_token
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryReverseResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryReverseResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryReverseResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryReverseResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetWorkflowExecutionHistoryReverseResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      history: T.nilable(Temporalio::Api::History::V1::History),
      next_page_token: T.nilable(String)
    ).void
  end
  def initialize(
    history: nil,
    next_page_token: ""
  )
  end

  sig { returns(T.nilable(Temporalio::Api::History::V1::History)) }
  def history
  end

  sig { params(value: T.nilable(Temporalio::Api::History::V1::History)).void }
  def history=(value)
  end

  sig { void }
  def clear_history
  end

  # Will be set if there are more history events than were included in this response
  sig { returns(String) }
  def next_page_token
  end

  # Will be set if there are more history events than were included in this response
  sig { params(value: String).void }
  def next_page_token=(value)
  end

  # Will be set if there are more history events than were included in this response
  sig { void }
  def clear_next_page_token
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::PollWorkflowTaskQueueRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::PollWorkflowTaskQueueRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::PollWorkflowTaskQueueRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::PollWorkflowTaskQueueRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::PollWorkflowTaskQueueRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      task_queue: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue),
      identity: T.nilable(String),
      binary_checksum: T.nilable(String),
      worker_version_capabilities: T.nilable(Temporalio::Api::Common::V1::WorkerVersionCapabilities)
    ).void
  end
  def initialize(
    namespace: "",
    task_queue: nil,
    identity: "",
    binary_checksum: "",
    worker_version_capabilities: nil
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)) }
  def task_queue
  end

  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)).void }
  def task_queue=(value)
  end

  sig { void }
  def clear_task_queue
  end

  # The identity of the worker/client who is polling this task queue
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client who is polling this task queue
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client who is polling this task queue
  sig { void }
  def clear_identity
  end

  # DEPRECATED since 1.21 - use `worker_version_capabilities` instead.
# Each worker process should provide an ID unique to the specific set of code it is running
# "checksum" in this field name isn't very accurate, it should be though of as an id.
  sig { returns(String) }
  def binary_checksum
  end

  # DEPRECATED since 1.21 - use `worker_version_capabilities` instead.
# Each worker process should provide an ID unique to the specific set of code it is running
# "checksum" in this field name isn't very accurate, it should be though of as an id.
  sig { params(value: String).void }
  def binary_checksum=(value)
  end

  # DEPRECATED since 1.21 - use `worker_version_capabilities` instead.
# Each worker process should provide an ID unique to the specific set of code it is running
# "checksum" in this field name isn't very accurate, it should be though of as an id.
  sig { void }
  def clear_binary_checksum
  end

  # Information about this worker's build identifier and if it is choosing to use the versioning
# feature. See the `WorkerVersionCapabilities` docstring for more.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkerVersionCapabilities)) }
  def worker_version_capabilities
  end

  # Information about this worker's build identifier and if it is choosing to use the versioning
# feature. See the `WorkerVersionCapabilities` docstring for more.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkerVersionCapabilities)).void }
  def worker_version_capabilities=(value)
  end

  # Information about this worker's build identifier and if it is choosing to use the versioning
# feature. See the `WorkerVersionCapabilities` docstring for more.
  sig { void }
  def clear_worker_version_capabilities
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::PollWorkflowTaskQueueResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::PollWorkflowTaskQueueResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::PollWorkflowTaskQueueResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::PollWorkflowTaskQueueResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::PollWorkflowTaskQueueResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      task_token: T.nilable(String),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      workflow_type: T.nilable(Temporalio::Api::Common::V1::WorkflowType),
      previous_started_event_id: T.nilable(Integer),
      started_event_id: T.nilable(Integer),
      attempt: T.nilable(Integer),
      backlog_count_hint: T.nilable(Integer),
      history: T.nilable(Temporalio::Api::History::V1::History),
      next_page_token: T.nilable(String),
      query: T.nilable(Temporalio::Api::Query::V1::WorkflowQuery),
      workflow_execution_task_queue: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue),
      scheduled_time: T.nilable(Google::Protobuf::Timestamp),
      started_time: T.nilable(Google::Protobuf::Timestamp),
      queries: T.nilable(T::Hash[String, T.nilable(Temporalio::Api::Query::V1::WorkflowQuery)]),
      messages: T.nilable(T::Array[T.nilable(Temporalio::Api::Protocol::V1::Message)])
    ).void
  end
  def initialize(
    task_token: "",
    workflow_execution: nil,
    workflow_type: nil,
    previous_started_event_id: 0,
    started_event_id: 0,
    attempt: 0,
    backlog_count_hint: 0,
    history: nil,
    next_page_token: "",
    query: nil,
    workflow_execution_task_queue: nil,
    scheduled_time: nil,
    started_time: nil,
    queries: ::Google::Protobuf::Map.new(:string, :message, Temporalio::Api::Query::V1::WorkflowQuery),
    messages: []
  )
  end

  # A unique identifier for this task
  sig { returns(String) }
  def task_token
  end

  # A unique identifier for this task
  sig { params(value: String).void }
  def task_token=(value)
  end

  # A unique identifier for this task
  sig { void }
  def clear_task_token
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  sig { void }
  def clear_workflow_execution
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowType)) }
  def workflow_type
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowType)).void }
  def workflow_type=(value)
  end

  sig { void }
  def clear_workflow_type
  end

  # The last workflow task started event which was processed by some worker for this execution.
# Will be zero if no task has ever started.
  sig { returns(Integer) }
  def previous_started_event_id
  end

  # The last workflow task started event which was processed by some worker for this execution.
# Will be zero if no task has ever started.
  sig { params(value: Integer).void }
  def previous_started_event_id=(value)
  end

  # The last workflow task started event which was processed by some worker for this execution.
# Will be zero if no task has ever started.
  sig { void }
  def clear_previous_started_event_id
  end

  # The id of the most recent workflow task started event, which will have been generated as a
# result of this poll request being served. Will be zero if the task
# does not contain any events which would advance history (no new WFT started).
# Currently this can happen for queries.
  sig { returns(Integer) }
  def started_event_id
  end

  # The id of the most recent workflow task started event, which will have been generated as a
# result of this poll request being served. Will be zero if the task
# does not contain any events which would advance history (no new WFT started).
# Currently this can happen for queries.
  sig { params(value: Integer).void }
  def started_event_id=(value)
  end

  # The id of the most recent workflow task started event, which will have been generated as a
# result of this poll request being served. Will be zero if the task
# does not contain any events which would advance history (no new WFT started).
# Currently this can happen for queries.
  sig { void }
  def clear_started_event_id
  end

  # Starting at 1, the number of attempts to complete this task by any worker.
  sig { returns(Integer) }
  def attempt
  end

  # Starting at 1, the number of attempts to complete this task by any worker.
  sig { params(value: Integer).void }
  def attempt=(value)
  end

  # Starting at 1, the number of attempts to complete this task by any worker.
  sig { void }
  def clear_attempt
  end

  # A hint that there are more tasks already present in this task queue 
# partition. Can be used to prioritize draining a sticky queue.
#
# Specifically, the returned number is the number of tasks remaining in
# the in-memory buffer for this partition, which is currently capped at
# 1000. Because sticky queues only have one partition, this number is 
# more useful when draining them. Normal queues, typically having more than one 
# partition, will return a number representing only some portion of the 
# overall backlog. Subsequent RPCs may not hit the same partition as 
# this call.
  sig { returns(Integer) }
  def backlog_count_hint
  end

  # A hint that there are more tasks already present in this task queue 
# partition. Can be used to prioritize draining a sticky queue.
#
# Specifically, the returned number is the number of tasks remaining in
# the in-memory buffer for this partition, which is currently capped at
# 1000. Because sticky queues only have one partition, this number is 
# more useful when draining them. Normal queues, typically having more than one 
# partition, will return a number representing only some portion of the 
# overall backlog. Subsequent RPCs may not hit the same partition as 
# this call.
  sig { params(value: Integer).void }
  def backlog_count_hint=(value)
  end

  # A hint that there are more tasks already present in this task queue 
# partition. Can be used to prioritize draining a sticky queue.
#
# Specifically, the returned number is the number of tasks remaining in
# the in-memory buffer for this partition, which is currently capped at
# 1000. Because sticky queues only have one partition, this number is 
# more useful when draining them. Normal queues, typically having more than one 
# partition, will return a number representing only some portion of the 
# overall backlog. Subsequent RPCs may not hit the same partition as 
# this call.
  sig { void }
  def clear_backlog_count_hint
  end

  # The history for this workflow, which will either be complete or partial. Partial histories
# are sent to workers who have signaled that they are using a sticky queue when completing
# a workflow task.
  sig { returns(T.nilable(Temporalio::Api::History::V1::History)) }
  def history
  end

  # The history for this workflow, which will either be complete or partial. Partial histories
# are sent to workers who have signaled that they are using a sticky queue when completing
# a workflow task.
  sig { params(value: T.nilable(Temporalio::Api::History::V1::History)).void }
  def history=(value)
  end

  # The history for this workflow, which will either be complete or partial. Partial histories
# are sent to workers who have signaled that they are using a sticky queue when completing
# a workflow task.
  sig { void }
  def clear_history
  end

  # Will be set if there are more history events than were included in this response. Such events
# should be fetched via `GetWorkflowExecutionHistory`.
  sig { returns(String) }
  def next_page_token
  end

  # Will be set if there are more history events than were included in this response. Such events
# should be fetched via `GetWorkflowExecutionHistory`.
  sig { params(value: String).void }
  def next_page_token=(value)
  end

  # Will be set if there are more history events than were included in this response. Such events
# should be fetched via `GetWorkflowExecutionHistory`.
  sig { void }
  def clear_next_page_token
  end

  # Legacy queries appear in this field. The query must be responded to via
# `RespondQueryTaskCompleted`. If the workflow is already closed (queries are permitted on
# closed workflows) then the `history` field will be populated with the entire history. It
# may also be populated if this task originates on a non-sticky queue.
  sig { returns(T.nilable(Temporalio::Api::Query::V1::WorkflowQuery)) }
  def query
  end

  # Legacy queries appear in this field. The query must be responded to via
# `RespondQueryTaskCompleted`. If the workflow is already closed (queries are permitted on
# closed workflows) then the `history` field will be populated with the entire history. It
# may also be populated if this task originates on a non-sticky queue.
  sig { params(value: T.nilable(Temporalio::Api::Query::V1::WorkflowQuery)).void }
  def query=(value)
  end

  # Legacy queries appear in this field. The query must be responded to via
# `RespondQueryTaskCompleted`. If the workflow is already closed (queries are permitted on
# closed workflows) then the `history` field will be populated with the entire history. It
# may also be populated if this task originates on a non-sticky queue.
  sig { void }
  def clear_query
  end

  # The task queue this task originated from, which will always be the original non-sticky name
# for the queue, even if this response came from polling a sticky queue.
  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)) }
  def workflow_execution_task_queue
  end

  # The task queue this task originated from, which will always be the original non-sticky name
# for the queue, even if this response came from polling a sticky queue.
  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)).void }
  def workflow_execution_task_queue=(value)
  end

  # The task queue this task originated from, which will always be the original non-sticky name
# for the queue, even if this response came from polling a sticky queue.
  sig { void }
  def clear_workflow_execution_task_queue
  end

  # When this task was scheduled by the server
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def scheduled_time
  end

  # When this task was scheduled by the server
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def scheduled_time=(value)
  end

  # When this task was scheduled by the server
  sig { void }
  def clear_scheduled_time
  end

  # When the current workflow task started event was generated, meaning the current attempt.
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def started_time
  end

  # When the current workflow task started event was generated, meaning the current attempt.
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def started_time=(value)
  end

  # When the current workflow task started event was generated, meaning the current attempt.
  sig { void }
  def clear_started_time
  end

  # Queries that should be executed after applying the history in this task. Responses should be
# attached to `RespondWorkflowTaskCompletedRequest::query_results`
  sig { returns(T::Hash[String, T.nilable(Temporalio::Api::Query::V1::WorkflowQuery)]) }
  def queries
  end

  # Queries that should be executed after applying the history in this task. Responses should be
# attached to `RespondWorkflowTaskCompletedRequest::query_results`
  sig { params(value: ::Google::Protobuf::Map).void }
  def queries=(value)
  end

  # Queries that should be executed after applying the history in this task. Responses should be
# attached to `RespondWorkflowTaskCompletedRequest::query_results`
  sig { void }
  def clear_queries
  end

  # Protocol messages piggybacking on a WFT as a transport
  sig { returns(T::Array[T.nilable(Temporalio::Api::Protocol::V1::Message)]) }
  def messages
  end

  # Protocol messages piggybacking on a WFT as a transport
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def messages=(value)
  end

  # Protocol messages piggybacking on a WFT as a transport
  sig { void }
  def clear_messages
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskCompletedRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskCompletedRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskCompletedRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskCompletedRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskCompletedRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      task_token: T.nilable(String),
      commands: T.nilable(T::Array[T.nilable(Temporalio::Api::Command::V1::Command)]),
      identity: T.nilable(String),
      sticky_attributes: T.nilable(Temporalio::Api::TaskQueue::V1::StickyExecutionAttributes),
      return_new_workflow_task: T.nilable(T::Boolean),
      force_create_new_workflow_task: T.nilable(T::Boolean),
      binary_checksum: T.nilable(String),
      query_results: T.nilable(T::Hash[String, T.nilable(Temporalio::Api::Query::V1::WorkflowQueryResult)]),
      namespace: T.nilable(String),
      worker_version_stamp: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp),
      messages: T.nilable(T::Array[T.nilable(Temporalio::Api::Protocol::V1::Message)]),
      sdk_metadata: T.nilable(Temporalio::Api::Sdk::V1::WorkflowTaskCompletedMetadata),
      metering_metadata: T.nilable(Temporalio::Api::Common::V1::MeteringMetadata)
    ).void
  end
  def initialize(
    task_token: "",
    commands: [],
    identity: "",
    sticky_attributes: nil,
    return_new_workflow_task: false,
    force_create_new_workflow_task: false,
    binary_checksum: "",
    query_results: ::Google::Protobuf::Map.new(:string, :message, Temporalio::Api::Query::V1::WorkflowQueryResult),
    namespace: "",
    worker_version_stamp: nil,
    messages: [],
    sdk_metadata: nil,
    metering_metadata: nil
  )
  end

  # The task token as received in `PollWorkflowTaskQueueResponse`
  sig { returns(String) }
  def task_token
  end

  # The task token as received in `PollWorkflowTaskQueueResponse`
  sig { params(value: String).void }
  def task_token=(value)
  end

  # The task token as received in `PollWorkflowTaskQueueResponse`
  sig { void }
  def clear_task_token
  end

  # A list of commands generated when driving the workflow code in response to the new task
  sig { returns(T::Array[T.nilable(Temporalio::Api::Command::V1::Command)]) }
  def commands
  end

  # A list of commands generated when driving the workflow code in response to the new task
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def commands=(value)
  end

  # A list of commands generated when driving the workflow code in response to the new task
  sig { void }
  def clear_commands
  end

  # The identity of the worker/client
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client
  sig { void }
  def clear_identity
  end

  # May be set by workers to indicate that the worker desires future tasks to be provided with
# incremental history on a sticky queue.
  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::StickyExecutionAttributes)) }
  def sticky_attributes
  end

  # May be set by workers to indicate that the worker desires future tasks to be provided with
# incremental history on a sticky queue.
  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::StickyExecutionAttributes)).void }
  def sticky_attributes=(value)
  end

  # May be set by workers to indicate that the worker desires future tasks to be provided with
# incremental history on a sticky queue.
  sig { void }
  def clear_sticky_attributes
  end

  # If set, the worker wishes to immediately receive the next workflow task as a response to
# this completion. This can save on polling round-trips.
  sig { returns(T::Boolean) }
  def return_new_workflow_task
  end

  # If set, the worker wishes to immediately receive the next workflow task as a response to
# this completion. This can save on polling round-trips.
  sig { params(value: T::Boolean).void }
  def return_new_workflow_task=(value)
  end

  # If set, the worker wishes to immediately receive the next workflow task as a response to
# this completion. This can save on polling round-trips.
  sig { void }
  def clear_return_new_workflow_task
  end

  # Can be used to *force* creation of a new workflow task, even if no commands have resolved or
# one would not otherwise have been generated. This is used when the worker knows it is doing
# something useful, but cannot complete it within the workflow task timeout. Local activities
# which run for longer than the task timeout being the prime example.
  sig { returns(T::Boolean) }
  def force_create_new_workflow_task
  end

  # Can be used to *force* creation of a new workflow task, even if no commands have resolved or
# one would not otherwise have been generated. This is used when the worker knows it is doing
# something useful, but cannot complete it within the workflow task timeout. Local activities
# which run for longer than the task timeout being the prime example.
  sig { params(value: T::Boolean).void }
  def force_create_new_workflow_task=(value)
  end

  # Can be used to *force* creation of a new workflow task, even if no commands have resolved or
# one would not otherwise have been generated. This is used when the worker knows it is doing
# something useful, but cannot complete it within the workflow task timeout. Local activities
# which run for longer than the task timeout being the prime example.
  sig { void }
  def clear_force_create_new_workflow_task
  end

  # DEPRECATED since 1.21 - use `worker_version_stamp` instead.
# Worker process' unique binary id
  sig { returns(String) }
  def binary_checksum
  end

  # DEPRECATED since 1.21 - use `worker_version_stamp` instead.
# Worker process' unique binary id
  sig { params(value: String).void }
  def binary_checksum=(value)
  end

  # DEPRECATED since 1.21 - use `worker_version_stamp` instead.
# Worker process' unique binary id
  sig { void }
  def clear_binary_checksum
  end

  # Responses to the `queries` field in the task being responded to
  sig { returns(T::Hash[String, T.nilable(Temporalio::Api::Query::V1::WorkflowQueryResult)]) }
  def query_results
  end

  # Responses to the `queries` field in the task being responded to
  sig { params(value: ::Google::Protobuf::Map).void }
  def query_results=(value)
  end

  # Responses to the `queries` field in the task being responded to
  sig { void }
  def clear_query_results
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  # Version info of the worker who processed this task. This message's `build_id` field should
# always be set by SDKs. Workers opting into versioning will also set the `use_versioning`
# field to true. See message docstrings for more.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)) }
  def worker_version_stamp
  end

  # Version info of the worker who processed this task. This message's `build_id` field should
# always be set by SDKs. Workers opting into versioning will also set the `use_versioning`
# field to true. See message docstrings for more.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)).void }
  def worker_version_stamp=(value)
  end

  # Version info of the worker who processed this task. This message's `build_id` field should
# always be set by SDKs. Workers opting into versioning will also set the `use_versioning`
# field to true. See message docstrings for more.
  sig { void }
  def clear_worker_version_stamp
  end

  # Protocol messages piggybacking on a WFT as a transport
  sig { returns(T::Array[T.nilable(Temporalio::Api::Protocol::V1::Message)]) }
  def messages
  end

  # Protocol messages piggybacking on a WFT as a transport
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def messages=(value)
  end

  # Protocol messages piggybacking on a WFT as a transport
  sig { void }
  def clear_messages
  end

  # Data the SDK wishes to record for itself, but server need not interpret, and does not
# directly impact workflow state.
  sig { returns(T.nilable(Temporalio::Api::Sdk::V1::WorkflowTaskCompletedMetadata)) }
  def sdk_metadata
  end

  # Data the SDK wishes to record for itself, but server need not interpret, and does not
# directly impact workflow state.
  sig { params(value: T.nilable(Temporalio::Api::Sdk::V1::WorkflowTaskCompletedMetadata)).void }
  def sdk_metadata=(value)
  end

  # Data the SDK wishes to record for itself, but server need not interpret, and does not
# directly impact workflow state.
  sig { void }
  def clear_sdk_metadata
  end

  # Local usage data collected for metering
  sig { returns(T.nilable(Temporalio::Api::Common::V1::MeteringMetadata)) }
  def metering_metadata
  end

  # Local usage data collected for metering
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::MeteringMetadata)).void }
  def metering_metadata=(value)
  end

  # Local usage data collected for metering
  sig { void }
  def clear_metering_metadata
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskCompletedResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskCompletedResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskCompletedResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskCompletedResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskCompletedResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      workflow_task: T.nilable(Temporalio::Api::WorkflowService::V1::PollWorkflowTaskQueueResponse),
      activity_tasks: T.nilable(T::Array[T.nilable(Temporalio::Api::WorkflowService::V1::PollActivityTaskQueueResponse)]),
      reset_history_event_id: T.nilable(Integer)
    ).void
  end
  def initialize(
    workflow_task: nil,
    activity_tasks: [],
    reset_history_event_id: 0
  )
  end

  # See `RespondWorkflowTaskCompletedResponse::return_new_workflow_task`
  sig { returns(T.nilable(Temporalio::Api::WorkflowService::V1::PollWorkflowTaskQueueResponse)) }
  def workflow_task
  end

  # See `RespondWorkflowTaskCompletedResponse::return_new_workflow_task`
  sig { params(value: T.nilable(Temporalio::Api::WorkflowService::V1::PollWorkflowTaskQueueResponse)).void }
  def workflow_task=(value)
  end

  # See `RespondWorkflowTaskCompletedResponse::return_new_workflow_task`
  sig { void }
  def clear_workflow_task
  end

  # See `ScheduleActivityTaskCommandAttributes::request_start`
  sig { returns(T::Array[T.nilable(Temporalio::Api::WorkflowService::V1::PollActivityTaskQueueResponse)]) }
  def activity_tasks
  end

  # See `ScheduleActivityTaskCommandAttributes::request_start`
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def activity_tasks=(value)
  end

  # See `ScheduleActivityTaskCommandAttributes::request_start`
  sig { void }
  def clear_activity_tasks
  end

  sig { returns(Integer) }
  def reset_history_event_id
  end

  sig { params(value: Integer).void }
  def reset_history_event_id=(value)
  end

  sig { void }
  def clear_reset_history_event_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskFailedRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskFailedRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskFailedRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskFailedRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskFailedRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      task_token: T.nilable(String),
      cause: T.nilable(T.any(Symbol, String, Integer)),
      failure: T.nilable(Temporalio::Api::Failure::V1::Failure),
      identity: T.nilable(String),
      binary_checksum: T.nilable(String),
      namespace: T.nilable(String),
      messages: T.nilable(T::Array[T.nilable(Temporalio::Api::Protocol::V1::Message)]),
      worker_version: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)
    ).void
  end
  def initialize(
    task_token: "",
    cause: :WORKFLOW_TASK_FAILED_CAUSE_UNSPECIFIED,
    failure: nil,
    identity: "",
    binary_checksum: "",
    namespace: "",
    messages: [],
    worker_version: nil
  )
  end

  # The task token as received in `PollWorkflowTaskQueueResponse`
  sig { returns(String) }
  def task_token
  end

  # The task token as received in `PollWorkflowTaskQueueResponse`
  sig { params(value: String).void }
  def task_token=(value)
  end

  # The task token as received in `PollWorkflowTaskQueueResponse`
  sig { void }
  def clear_task_token
  end

  # Why did the task fail? It's important to note that many of the variants in this enum cannot
# apply to worker responses. See the type's doc for more.
  sig { returns(T.any(Symbol, Integer)) }
  def cause
  end

  # Why did the task fail? It's important to note that many of the variants in this enum cannot
# apply to worker responses. See the type's doc for more.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def cause=(value)
  end

  # Why did the task fail? It's important to note that many of the variants in this enum cannot
# apply to worker responses. See the type's doc for more.
  sig { void }
  def clear_cause
  end

  # Failure details
  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def failure
  end

  # Failure details
  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def failure=(value)
  end

  # Failure details
  sig { void }
  def clear_failure
  end

  # The identity of the worker/client
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client
  sig { void }
  def clear_identity
  end

  # DEPRECATED since 1.21 - use `worker_version_stamp` instead.
# Worker process' unique binary id
  sig { returns(String) }
  def binary_checksum
  end

  # DEPRECATED since 1.21 - use `worker_version_stamp` instead.
# Worker process' unique binary id
  sig { params(value: String).void }
  def binary_checksum=(value)
  end

  # DEPRECATED since 1.21 - use `worker_version_stamp` instead.
# Worker process' unique binary id
  sig { void }
  def clear_binary_checksum
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  # Protocol messages piggybacking on a WFT as a transport
  sig { returns(T::Array[T.nilable(Temporalio::Api::Protocol::V1::Message)]) }
  def messages
  end

  # Protocol messages piggybacking on a WFT as a transport
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def messages=(value)
  end

  # Protocol messages piggybacking on a WFT as a transport
  sig { void }
  def clear_messages
  end

  # Version info of the worker who processed this task. This message's `build_id` field should
# always be set by SDKs. Workers opting into versioning will also set the `use_versioning`
# field to true. See message docstrings for more.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)) }
  def worker_version
  end

  # Version info of the worker who processed this task. This message's `build_id` field should
# always be set by SDKs. Workers opting into versioning will also set the `use_versioning`
# field to true. See message docstrings for more.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)).void }
  def worker_version=(value)
  end

  # Version info of the worker who processed this task. This message's `build_id` field should
# always be set by SDKs. Workers opting into versioning will also set the `use_versioning`
# field to true. See message docstrings for more.
  sig { void }
  def clear_worker_version
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskFailedResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskFailedResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskFailedResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskFailedResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondWorkflowTaskFailedResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::PollActivityTaskQueueRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::PollActivityTaskQueueRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::PollActivityTaskQueueRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::PollActivityTaskQueueRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::PollActivityTaskQueueRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      task_queue: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue),
      identity: T.nilable(String),
      task_queue_metadata: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueueMetadata),
      worker_version_capabilities: T.nilable(Temporalio::Api::Common::V1::WorkerVersionCapabilities)
    ).void
  end
  def initialize(
    namespace: "",
    task_queue: nil,
    identity: "",
    task_queue_metadata: nil,
    worker_version_capabilities: nil
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)) }
  def task_queue
  end

  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)).void }
  def task_queue=(value)
  end

  sig { void }
  def clear_task_queue
  end

  # The identity of the worker/client
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client
  sig { void }
  def clear_identity
  end

  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueueMetadata)) }
  def task_queue_metadata
  end

  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueueMetadata)).void }
  def task_queue_metadata=(value)
  end

  sig { void }
  def clear_task_queue_metadata
  end

  # Information about this worker's build identifier and if it is choosing to use the versioning
# feature. See the `WorkerVersionCapabilities` docstring for more.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkerVersionCapabilities)) }
  def worker_version_capabilities
  end

  # Information about this worker's build identifier and if it is choosing to use the versioning
# feature. See the `WorkerVersionCapabilities` docstring for more.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkerVersionCapabilities)).void }
  def worker_version_capabilities=(value)
  end

  # Information about this worker's build identifier and if it is choosing to use the versioning
# feature. See the `WorkerVersionCapabilities` docstring for more.
  sig { void }
  def clear_worker_version_capabilities
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::PollActivityTaskQueueResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::PollActivityTaskQueueResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::PollActivityTaskQueueResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::PollActivityTaskQueueResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::PollActivityTaskQueueResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      task_token: T.nilable(String),
      workflow_namespace: T.nilable(String),
      workflow_type: T.nilable(Temporalio::Api::Common::V1::WorkflowType),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      activity_type: T.nilable(Temporalio::Api::Common::V1::ActivityType),
      activity_id: T.nilable(String),
      header: T.nilable(Temporalio::Api::Common::V1::Header),
      input: T.nilable(Temporalio::Api::Common::V1::Payloads),
      heartbeat_details: T.nilable(Temporalio::Api::Common::V1::Payloads),
      scheduled_time: T.nilable(Google::Protobuf::Timestamp),
      current_attempt_scheduled_time: T.nilable(Google::Protobuf::Timestamp),
      started_time: T.nilable(Google::Protobuf::Timestamp),
      attempt: T.nilable(Integer),
      schedule_to_close_timeout: T.nilable(Google::Protobuf::Duration),
      start_to_close_timeout: T.nilable(Google::Protobuf::Duration),
      heartbeat_timeout: T.nilable(Google::Protobuf::Duration),
      retry_policy: T.nilable(Temporalio::Api::Common::V1::RetryPolicy)
    ).void
  end
  def initialize(
    task_token: "",
    workflow_namespace: "",
    workflow_type: nil,
    workflow_execution: nil,
    activity_type: nil,
    activity_id: "",
    header: nil,
    input: nil,
    heartbeat_details: nil,
    scheduled_time: nil,
    current_attempt_scheduled_time: nil,
    started_time: nil,
    attempt: 0,
    schedule_to_close_timeout: nil,
    start_to_close_timeout: nil,
    heartbeat_timeout: nil,
    retry_policy: nil
  )
  end

  # A unique identifier for this task
  sig { returns(String) }
  def task_token
  end

  # A unique identifier for this task
  sig { params(value: String).void }
  def task_token=(value)
  end

  # A unique identifier for this task
  sig { void }
  def clear_task_token
  end

  # The namespace the workflow which requested this activity lives in
  sig { returns(String) }
  def workflow_namespace
  end

  # The namespace the workflow which requested this activity lives in
  sig { params(value: String).void }
  def workflow_namespace=(value)
  end

  # The namespace the workflow which requested this activity lives in
  sig { void }
  def clear_workflow_namespace
  end

  # Type of the requesting workflow
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowType)) }
  def workflow_type
  end

  # Type of the requesting workflow
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowType)).void }
  def workflow_type=(value)
  end

  # Type of the requesting workflow
  sig { void }
  def clear_workflow_type
  end

  # Execution info of the requesting workflow
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  # Execution info of the requesting workflow
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  # Execution info of the requesting workflow
  sig { void }
  def clear_workflow_execution
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::ActivityType)) }
  def activity_type
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::ActivityType)).void }
  def activity_type=(value)
  end

  sig { void }
  def clear_activity_type
  end

  # The autogenerated or user specified identifier of this activity. Can be used to complete the
# activity via `RespondActivityTaskCompletedById`. May be re-used as long as the last usage
# has resolved, but unique IDs for every activity invocation is a good idea.
  sig { returns(String) }
  def activity_id
  end

  # The autogenerated or user specified identifier of this activity. Can be used to complete the
# activity via `RespondActivityTaskCompletedById`. May be re-used as long as the last usage
# has resolved, but unique IDs for every activity invocation is a good idea.
  sig { params(value: String).void }
  def activity_id=(value)
  end

  # The autogenerated or user specified identifier of this activity. Can be used to complete the
# activity via `RespondActivityTaskCompletedById`. May be re-used as long as the last usage
# has resolved, but unique IDs for every activity invocation is a good idea.
  sig { void }
  def clear_activity_id
  end

  # Headers specified by the scheduling workflow. Commonly used to propagate contextual info
# from the workflow to its activities. For example, tracing contexts.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Header)) }
  def header
  end

  # Headers specified by the scheduling workflow. Commonly used to propagate contextual info
# from the workflow to its activities. For example, tracing contexts.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Header)).void }
  def header=(value)
  end

  # Headers specified by the scheduling workflow. Commonly used to propagate contextual info
# from the workflow to its activities. For example, tracing contexts.
  sig { void }
  def clear_header
  end

  # Arguments to the activity invocation
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def input
  end

  # Arguments to the activity invocation
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def input=(value)
  end

  # Arguments to the activity invocation
  sig { void }
  def clear_input
  end

  # Details of the last heartbeat that was recorded for this activity as of the time this task
# was delivered.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def heartbeat_details
  end

  # Details of the last heartbeat that was recorded for this activity as of the time this task
# was delivered.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def heartbeat_details=(value)
  end

  # Details of the last heartbeat that was recorded for this activity as of the time this task
# was delivered.
  sig { void }
  def clear_heartbeat_details
  end

  # When was this task first scheduled
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def scheduled_time
  end

  # When was this task first scheduled
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def scheduled_time=(value)
  end

  # When was this task first scheduled
  sig { void }
  def clear_scheduled_time
  end

  # When was this task attempt scheduled
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def current_attempt_scheduled_time
  end

  # When was this task attempt scheduled
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def current_attempt_scheduled_time=(value)
  end

  # When was this task attempt scheduled
  sig { void }
  def clear_current_attempt_scheduled_time
  end

  # When was this task started (this attempt)
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def started_time
  end

  # When was this task started (this attempt)
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def started_time=(value)
  end

  # When was this task started (this attempt)
  sig { void }
  def clear_started_time
  end

  # Starting at 1, the number of attempts to perform this activity
  sig { returns(Integer) }
  def attempt
  end

  # Starting at 1, the number of attempts to perform this activity
  sig { params(value: Integer).void }
  def attempt=(value)
  end

  # Starting at 1, the number of attempts to perform this activity
  sig { void }
  def clear_attempt
  end

  # First scheduled -> final result reported timeout
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def schedule_to_close_timeout
  end

  # First scheduled -> final result reported timeout
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def schedule_to_close_timeout=(value)
  end

  # First scheduled -> final result reported timeout
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { void }
  def clear_schedule_to_close_timeout
  end

  # Current attempt start -> final result reported timeout
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def start_to_close_timeout
  end

  # Current attempt start -> final result reported timeout
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def start_to_close_timeout=(value)
  end

  # Current attempt start -> final result reported timeout
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { void }
  def clear_start_to_close_timeout
  end

  # Window within which the activity must report a heartbeat, or be timed out.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def heartbeat_timeout
  end

  # Window within which the activity must report a heartbeat, or be timed out.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def heartbeat_timeout=(value)
  end

  # Window within which the activity must report a heartbeat, or be timed out.
  sig { void }
  def clear_heartbeat_timeout
  end

  # This is the retry policy the service uses which may be different from the one provided
# (or not) during activity scheduling. The service can override the provided one if some
# values are not specified or exceed configured system limits.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::RetryPolicy)) }
  def retry_policy
  end

  # This is the retry policy the service uses which may be different from the one provided
# (or not) during activity scheduling. The service can override the provided one if some
# values are not specified or exceed configured system limits.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::RetryPolicy)).void }
  def retry_policy=(value)
  end

  # This is the retry policy the service uses which may be different from the one provided
# (or not) during activity scheduling. The service can override the provided one if some
# values are not specified or exceed configured system limits.
  sig { void }
  def clear_retry_policy
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      task_token: T.nilable(String),
      details: T.nilable(Temporalio::Api::Common::V1::Payloads),
      identity: T.nilable(String),
      namespace: T.nilable(String)
    ).void
  end
  def initialize(
    task_token: "",
    details: nil,
    identity: "",
    namespace: ""
  )
  end

  # The task token as received in `PollActivityTaskQueueResponse`
  sig { returns(String) }
  def task_token
  end

  # The task token as received in `PollActivityTaskQueueResponse`
  sig { params(value: String).void }
  def task_token=(value)
  end

  # The task token as received in `PollActivityTaskQueueResponse`
  sig { void }
  def clear_task_token
  end

  # Arbitrary data, of which the most recent call is kept, to store for this activity
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def details
  end

  # Arbitrary data, of which the most recent call is kept, to store for this activity
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def details=(value)
  end

  # Arbitrary data, of which the most recent call is kept, to store for this activity
  sig { void }
  def clear_details
  end

  # The identity of the worker/client
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client
  sig { void }
  def clear_identity
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      cancel_requested: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    cancel_requested: false
  )
  end

  # Will be set to true if the activity has been asked to cancel itself. The SDK should then
# notify the activity of cancellation if it is still running.
  sig { returns(T::Boolean) }
  def cancel_requested
  end

  # Will be set to true if the activity has been asked to cancel itself. The SDK should then
# notify the activity of cancellation if it is still running.
  sig { params(value: T::Boolean).void }
  def cancel_requested=(value)
  end

  # Will be set to true if the activity has been asked to cancel itself. The SDK should then
# notify the activity of cancellation if it is still running.
  sig { void }
  def clear_cancel_requested
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatByIdRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatByIdRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatByIdRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatByIdRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatByIdRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      workflow_id: T.nilable(String),
      run_id: T.nilable(String),
      activity_id: T.nilable(String),
      details: T.nilable(Temporalio::Api::Common::V1::Payloads),
      identity: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    workflow_id: "",
    run_id: "",
    activity_id: "",
    details: nil,
    identity: ""
  )
  end

  # Namespace of the workflow which scheduled this activity
  sig { returns(String) }
  def namespace
  end

  # Namespace of the workflow which scheduled this activity
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace of the workflow which scheduled this activity
  sig { void }
  def clear_namespace
  end

  # Id of the workflow which scheduled this activity
  sig { returns(String) }
  def workflow_id
  end

  # Id of the workflow which scheduled this activity
  sig { params(value: String).void }
  def workflow_id=(value)
  end

  # Id of the workflow which scheduled this activity
  sig { void }
  def clear_workflow_id
  end

  # Run Id of the workflow which scheduled this activity
  sig { returns(String) }
  def run_id
  end

  # Run Id of the workflow which scheduled this activity
  sig { params(value: String).void }
  def run_id=(value)
  end

  # Run Id of the workflow which scheduled this activity
  sig { void }
  def clear_run_id
  end

  # Id of the activity we're heartbeating
  sig { returns(String) }
  def activity_id
  end

  # Id of the activity we're heartbeating
  sig { params(value: String).void }
  def activity_id=(value)
  end

  # Id of the activity we're heartbeating
  sig { void }
  def clear_activity_id
  end

  # Arbitrary data, of which the most recent call is kept, to store for this activity
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def details
  end

  # Arbitrary data, of which the most recent call is kept, to store for this activity
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def details=(value)
  end

  # Arbitrary data, of which the most recent call is kept, to store for this activity
  sig { void }
  def clear_details
  end

  # The identity of the worker/client
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client
  sig { void }
  def clear_identity
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatByIdResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatByIdResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatByIdResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatByIdResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RecordActivityTaskHeartbeatByIdResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      cancel_requested: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    cancel_requested: false
  )
  end

  # Will be set to true if the activity has been asked to cancel itself. The SDK should then
# notify the activity of cancellation if it is still running.
  sig { returns(T::Boolean) }
  def cancel_requested
  end

  # Will be set to true if the activity has been asked to cancel itself. The SDK should then
# notify the activity of cancellation if it is still running.
  sig { params(value: T::Boolean).void }
  def cancel_requested=(value)
  end

  # Will be set to true if the activity has been asked to cancel itself. The SDK should then
# notify the activity of cancellation if it is still running.
  sig { void }
  def clear_cancel_requested
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      task_token: T.nilable(String),
      result: T.nilable(Temporalio::Api::Common::V1::Payloads),
      identity: T.nilable(String),
      namespace: T.nilable(String),
      worker_version: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)
    ).void
  end
  def initialize(
    task_token: "",
    result: nil,
    identity: "",
    namespace: "",
    worker_version: nil
  )
  end

  # The task token as received in `PollActivityTaskQueueResponse`
  sig { returns(String) }
  def task_token
  end

  # The task token as received in `PollActivityTaskQueueResponse`
  sig { params(value: String).void }
  def task_token=(value)
  end

  # The task token as received in `PollActivityTaskQueueResponse`
  sig { void }
  def clear_task_token
  end

  # The result of successfully executing the activity
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def result
  end

  # The result of successfully executing the activity
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def result=(value)
  end

  # The result of successfully executing the activity
  sig { void }
  def clear_result
  end

  # The identity of the worker/client
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client
  sig { void }
  def clear_identity
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  # Version info of the worker who processed this task. This message's `build_id` field should
# always be set by SDKs. Workers opting into versioning will also set the `use_versioning`
# field to true. See message docstrings for more.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)) }
  def worker_version
  end

  # Version info of the worker who processed this task. This message's `build_id` field should
# always be set by SDKs. Workers opting into versioning will also set the `use_versioning`
# field to true. See message docstrings for more.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)).void }
  def worker_version=(value)
  end

  # Version info of the worker who processed this task. This message's `build_id` field should
# always be set by SDKs. Workers opting into versioning will also set the `use_versioning`
# field to true. See message docstrings for more.
  sig { void }
  def clear_worker_version
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedByIdRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedByIdRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedByIdRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedByIdRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedByIdRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      workflow_id: T.nilable(String),
      run_id: T.nilable(String),
      activity_id: T.nilable(String),
      result: T.nilable(Temporalio::Api::Common::V1::Payloads),
      identity: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    workflow_id: "",
    run_id: "",
    activity_id: "",
    result: nil,
    identity: ""
  )
  end

  # Namespace of the workflow which scheduled this activity
  sig { returns(String) }
  def namespace
  end

  # Namespace of the workflow which scheduled this activity
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace of the workflow which scheduled this activity
  sig { void }
  def clear_namespace
  end

  # Id of the workflow which scheduled this activity
  sig { returns(String) }
  def workflow_id
  end

  # Id of the workflow which scheduled this activity
  sig { params(value: String).void }
  def workflow_id=(value)
  end

  # Id of the workflow which scheduled this activity
  sig { void }
  def clear_workflow_id
  end

  # Run Id of the workflow which scheduled this activity
  sig { returns(String) }
  def run_id
  end

  # Run Id of the workflow which scheduled this activity
  sig { params(value: String).void }
  def run_id=(value)
  end

  # Run Id of the workflow which scheduled this activity
  sig { void }
  def clear_run_id
  end

  # Id of the activity to complete
  sig { returns(String) }
  def activity_id
  end

  # Id of the activity to complete
  sig { params(value: String).void }
  def activity_id=(value)
  end

  # Id of the activity to complete
  sig { void }
  def clear_activity_id
  end

  # The serialized result of activity execution
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def result
  end

  # The serialized result of activity execution
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def result=(value)
  end

  # The serialized result of activity execution
  sig { void }
  def clear_result
  end

  # The identity of the worker/client
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client
  sig { void }
  def clear_identity
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedByIdResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedByIdResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedByIdResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedByIdResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskCompletedByIdResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      task_token: T.nilable(String),
      failure: T.nilable(Temporalio::Api::Failure::V1::Failure),
      identity: T.nilable(String),
      namespace: T.nilable(String),
      last_heartbeat_details: T.nilable(Temporalio::Api::Common::V1::Payloads),
      worker_version: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)
    ).void
  end
  def initialize(
    task_token: "",
    failure: nil,
    identity: "",
    namespace: "",
    last_heartbeat_details: nil,
    worker_version: nil
  )
  end

  # The task token as received in `PollActivityTaskQueueResponse`
  sig { returns(String) }
  def task_token
  end

  # The task token as received in `PollActivityTaskQueueResponse`
  sig { params(value: String).void }
  def task_token=(value)
  end

  # The task token as received in `PollActivityTaskQueueResponse`
  sig { void }
  def clear_task_token
  end

  # Detailed failure information
  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def failure
  end

  # Detailed failure information
  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def failure=(value)
  end

  # Detailed failure information
  sig { void }
  def clear_failure
  end

  # The identity of the worker/client
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client
  sig { void }
  def clear_identity
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  # Additional details to be stored as last activity heartbeat
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def last_heartbeat_details
  end

  # Additional details to be stored as last activity heartbeat
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def last_heartbeat_details=(value)
  end

  # Additional details to be stored as last activity heartbeat
  sig { void }
  def clear_last_heartbeat_details
  end

  # Version info of the worker who processed this task. This message's `build_id` field should
# always be set by SDKs. Workers opting into versioning will also set the `use_versioning`
# field to true. See message docstrings for more.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)) }
  def worker_version
  end

  # Version info of the worker who processed this task. This message's `build_id` field should
# always be set by SDKs. Workers opting into versioning will also set the `use_versioning`
# field to true. See message docstrings for more.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)).void }
  def worker_version=(value)
  end

  # Version info of the worker who processed this task. This message's `build_id` field should
# always be set by SDKs. Workers opting into versioning will also set the `use_versioning`
# field to true. See message docstrings for more.
  sig { void }
  def clear_worker_version
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      failures: T.nilable(T::Array[T.nilable(Temporalio::Api::Failure::V1::Failure)])
    ).void
  end
  def initialize(
    failures: []
  )
  end

  # Server validation failures could include
# last_heartbeat_details payload is too large, request failure is too large
  sig { returns(T::Array[T.nilable(Temporalio::Api::Failure::V1::Failure)]) }
  def failures
  end

  # Server validation failures could include
# last_heartbeat_details payload is too large, request failure is too large
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def failures=(value)
  end

  # Server validation failures could include
# last_heartbeat_details payload is too large, request failure is too large
  sig { void }
  def clear_failures
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedByIdRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedByIdRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedByIdRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedByIdRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedByIdRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      workflow_id: T.nilable(String),
      run_id: T.nilable(String),
      activity_id: T.nilable(String),
      failure: T.nilable(Temporalio::Api::Failure::V1::Failure),
      identity: T.nilable(String),
      last_heartbeat_details: T.nilable(Temporalio::Api::Common::V1::Payloads)
    ).void
  end
  def initialize(
    namespace: "",
    workflow_id: "",
    run_id: "",
    activity_id: "",
    failure: nil,
    identity: "",
    last_heartbeat_details: nil
  )
  end

  # Namespace of the workflow which scheduled this activity
  sig { returns(String) }
  def namespace
  end

  # Namespace of the workflow which scheduled this activity
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace of the workflow which scheduled this activity
  sig { void }
  def clear_namespace
  end

  # Id of the workflow which scheduled this activity
  sig { returns(String) }
  def workflow_id
  end

  # Id of the workflow which scheduled this activity
  sig { params(value: String).void }
  def workflow_id=(value)
  end

  # Id of the workflow which scheduled this activity
  sig { void }
  def clear_workflow_id
  end

  # Run Id of the workflow which scheduled this activity
  sig { returns(String) }
  def run_id
  end

  # Run Id of the workflow which scheduled this activity
  sig { params(value: String).void }
  def run_id=(value)
  end

  # Run Id of the workflow which scheduled this activity
  sig { void }
  def clear_run_id
  end

  # Id of the activity to fail
  sig { returns(String) }
  def activity_id
  end

  # Id of the activity to fail
  sig { params(value: String).void }
  def activity_id=(value)
  end

  # Id of the activity to fail
  sig { void }
  def clear_activity_id
  end

  # Detailed failure information
  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def failure
  end

  # Detailed failure information
  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def failure=(value)
  end

  # Detailed failure information
  sig { void }
  def clear_failure
  end

  # The identity of the worker/client
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client
  sig { void }
  def clear_identity
  end

  # Additional details to be stored as last activity heartbeat
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def last_heartbeat_details
  end

  # Additional details to be stored as last activity heartbeat
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def last_heartbeat_details=(value)
  end

  # Additional details to be stored as last activity heartbeat
  sig { void }
  def clear_last_heartbeat_details
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedByIdResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedByIdResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedByIdResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedByIdResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskFailedByIdResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      failures: T.nilable(T::Array[T.nilable(Temporalio::Api::Failure::V1::Failure)])
    ).void
  end
  def initialize(
    failures: []
  )
  end

  # Server validation failures could include
# last_heartbeat_details payload is too large, request failure is too large
  sig { returns(T::Array[T.nilable(Temporalio::Api::Failure::V1::Failure)]) }
  def failures
  end

  # Server validation failures could include
# last_heartbeat_details payload is too large, request failure is too large
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def failures=(value)
  end

  # Server validation failures could include
# last_heartbeat_details payload is too large, request failure is too large
  sig { void }
  def clear_failures
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      task_token: T.nilable(String),
      details: T.nilable(Temporalio::Api::Common::V1::Payloads),
      identity: T.nilable(String),
      namespace: T.nilable(String),
      worker_version: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)
    ).void
  end
  def initialize(
    task_token: "",
    details: nil,
    identity: "",
    namespace: "",
    worker_version: nil
  )
  end

  # The task token as received in `PollActivityTaskQueueResponse`
  sig { returns(String) }
  def task_token
  end

  # The task token as received in `PollActivityTaskQueueResponse`
  sig { params(value: String).void }
  def task_token=(value)
  end

  # The task token as received in `PollActivityTaskQueueResponse`
  sig { void }
  def clear_task_token
  end

  # Serialized additional information to attach to the cancellation
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def details
  end

  # Serialized additional information to attach to the cancellation
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def details=(value)
  end

  # Serialized additional information to attach to the cancellation
  sig { void }
  def clear_details
  end

  # The identity of the worker/client
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client
  sig { void }
  def clear_identity
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  # Version info of the worker who processed this task. This message's `build_id` field should
# always be set by SDKs. Workers opting into versioning will also set the `use_versioning`
# field to true. See message docstrings for more.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)) }
  def worker_version
  end

  # Version info of the worker who processed this task. This message's `build_id` field should
# always be set by SDKs. Workers opting into versioning will also set the `use_versioning`
# field to true. See message docstrings for more.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkerVersionStamp)).void }
  def worker_version=(value)
  end

  # Version info of the worker who processed this task. This message's `build_id` field should
# always be set by SDKs. Workers opting into versioning will also set the `use_versioning`
# field to true. See message docstrings for more.
  sig { void }
  def clear_worker_version
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledByIdRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledByIdRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledByIdRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledByIdRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledByIdRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      workflow_id: T.nilable(String),
      run_id: T.nilable(String),
      activity_id: T.nilable(String),
      details: T.nilable(Temporalio::Api::Common::V1::Payloads),
      identity: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    workflow_id: "",
    run_id: "",
    activity_id: "",
    details: nil,
    identity: ""
  )
  end

  # Namespace of the workflow which scheduled this activity
  sig { returns(String) }
  def namespace
  end

  # Namespace of the workflow which scheduled this activity
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace of the workflow which scheduled this activity
  sig { void }
  def clear_namespace
  end

  # Id of the workflow which scheduled this activity
  sig { returns(String) }
  def workflow_id
  end

  # Id of the workflow which scheduled this activity
  sig { params(value: String).void }
  def workflow_id=(value)
  end

  # Id of the workflow which scheduled this activity
  sig { void }
  def clear_workflow_id
  end

  # Run Id of the workflow which scheduled this activity
  sig { returns(String) }
  def run_id
  end

  # Run Id of the workflow which scheduled this activity
  sig { params(value: String).void }
  def run_id=(value)
  end

  # Run Id of the workflow which scheduled this activity
  sig { void }
  def clear_run_id
  end

  # Id of the activity to confirm is cancelled
  sig { returns(String) }
  def activity_id
  end

  # Id of the activity to confirm is cancelled
  sig { params(value: String).void }
  def activity_id=(value)
  end

  # Id of the activity to confirm is cancelled
  sig { void }
  def clear_activity_id
  end

  # Serialized additional information to attach to the cancellation
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def details
  end

  # Serialized additional information to attach to the cancellation
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def details=(value)
  end

  # Serialized additional information to attach to the cancellation
  sig { void }
  def clear_details
  end

  # The identity of the worker/client
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client
  sig { void }
  def clear_identity
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledByIdResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledByIdResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledByIdResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledByIdResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondActivityTaskCanceledByIdResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RequestCancelWorkflowExecutionRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RequestCancelWorkflowExecutionRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RequestCancelWorkflowExecutionRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RequestCancelWorkflowExecutionRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RequestCancelWorkflowExecutionRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      identity: T.nilable(String),
      request_id: T.nilable(String),
      first_execution_run_id: T.nilable(String),
      reason: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    workflow_execution: nil,
    identity: "",
    request_id: "",
    first_execution_run_id: "",
    reason: ""
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  sig { void }
  def clear_workflow_execution
  end

  # The identity of the worker/client
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client
  sig { void }
  def clear_identity
  end

  # Used to de-dupe cancellation requests
  sig { returns(String) }
  def request_id
  end

  # Used to de-dupe cancellation requests
  sig { params(value: String).void }
  def request_id=(value)
  end

  # Used to de-dupe cancellation requests
  sig { void }
  def clear_request_id
  end

  # If set, this call will error if the most recent (if no run id is set on
# `workflow_execution`), or specified (if it is) workflow execution is not part of the same
# execution chain as this id.
  sig { returns(String) }
  def first_execution_run_id
  end

  # If set, this call will error if the most recent (if no run id is set on
# `workflow_execution`), or specified (if it is) workflow execution is not part of the same
# execution chain as this id.
  sig { params(value: String).void }
  def first_execution_run_id=(value)
  end

  # If set, this call will error if the most recent (if no run id is set on
# `workflow_execution`), or specified (if it is) workflow execution is not part of the same
# execution chain as this id.
  sig { void }
  def clear_first_execution_run_id
  end

  # Reason for requesting the cancellation
  sig { returns(String) }
  def reason
  end

  # Reason for requesting the cancellation
  sig { params(value: String).void }
  def reason=(value)
  end

  # Reason for requesting the cancellation
  sig { void }
  def clear_reason
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RequestCancelWorkflowExecutionResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RequestCancelWorkflowExecutionResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RequestCancelWorkflowExecutionResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RequestCancelWorkflowExecutionResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RequestCancelWorkflowExecutionResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::SignalWorkflowExecutionRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::SignalWorkflowExecutionRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::SignalWorkflowExecutionRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::SignalWorkflowExecutionRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::SignalWorkflowExecutionRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      signal_name: T.nilable(String),
      input: T.nilable(Temporalio::Api::Common::V1::Payloads),
      identity: T.nilable(String),
      request_id: T.nilable(String),
      control: T.nilable(String),
      header: T.nilable(Temporalio::Api::Common::V1::Header),
      skip_generate_workflow_task: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    namespace: "",
    workflow_execution: nil,
    signal_name: "",
    input: nil,
    identity: "",
    request_id: "",
    control: "",
    header: nil,
    skip_generate_workflow_task: false
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  sig { void }
  def clear_workflow_execution
  end

  # The workflow author-defined name of the signal to send to the workflow
  sig { returns(String) }
  def signal_name
  end

  # The workflow author-defined name of the signal to send to the workflow
  sig { params(value: String).void }
  def signal_name=(value)
  end

  # The workflow author-defined name of the signal to send to the workflow
  sig { void }
  def clear_signal_name
  end

  # Serialized value(s) to provide with the signal
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def input
  end

  # Serialized value(s) to provide with the signal
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def input=(value)
  end

  # Serialized value(s) to provide with the signal
  sig { void }
  def clear_input
  end

  # The identity of the worker/client
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client
  sig { void }
  def clear_identity
  end

  # Used to de-dupe sent signals
  sig { returns(String) }
  def request_id
  end

  # Used to de-dupe sent signals
  sig { params(value: String).void }
  def request_id=(value)
  end

  # Used to de-dupe sent signals
  sig { void }
  def clear_request_id
  end

  # Deprecated
  sig { returns(String) }
  def control
  end

  # Deprecated
  sig { params(value: String).void }
  def control=(value)
  end

  # Deprecated
  sig { void }
  def clear_control
  end

  # Headers that are passed with the signal to the processing workflow.
# These can include things like auth or tracing tokens.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Header)) }
  def header
  end

  # Headers that are passed with the signal to the processing workflow.
# These can include things like auth or tracing tokens.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Header)).void }
  def header=(value)
  end

  # Headers that are passed with the signal to the processing workflow.
# These can include things like auth or tracing tokens.
  sig { void }
  def clear_header
  end

  # Indicates that a new workflow task should not be generated when this signal is received.
  sig { returns(T::Boolean) }
  def skip_generate_workflow_task
  end

  # Indicates that a new workflow task should not be generated when this signal is received.
  sig { params(value: T::Boolean).void }
  def skip_generate_workflow_task=(value)
  end

  # Indicates that a new workflow task should not be generated when this signal is received.
  sig { void }
  def clear_skip_generate_workflow_task
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::SignalWorkflowExecutionResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::SignalWorkflowExecutionResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::SignalWorkflowExecutionResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::SignalWorkflowExecutionResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::SignalWorkflowExecutionResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::SignalWithStartWorkflowExecutionRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::SignalWithStartWorkflowExecutionRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::SignalWithStartWorkflowExecutionRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::SignalWithStartWorkflowExecutionRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::SignalWithStartWorkflowExecutionRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      workflow_id: T.nilable(String),
      workflow_type: T.nilable(Temporalio::Api::Common::V1::WorkflowType),
      task_queue: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue),
      input: T.nilable(Temporalio::Api::Common::V1::Payloads),
      workflow_execution_timeout: T.nilable(Google::Protobuf::Duration),
      workflow_run_timeout: T.nilable(Google::Protobuf::Duration),
      workflow_task_timeout: T.nilable(Google::Protobuf::Duration),
      identity: T.nilable(String),
      request_id: T.nilable(String),
      workflow_id_reuse_policy: T.nilable(T.any(Symbol, String, Integer)),
      workflow_id_conflict_policy: T.nilable(T.any(Symbol, String, Integer)),
      signal_name: T.nilable(String),
      signal_input: T.nilable(Temporalio::Api::Common::V1::Payloads),
      control: T.nilable(String),
      retry_policy: T.nilable(Temporalio::Api::Common::V1::RetryPolicy),
      cron_schedule: T.nilable(String),
      memo: T.nilable(Temporalio::Api::Common::V1::Memo),
      search_attributes: T.nilable(Temporalio::Api::Common::V1::SearchAttributes),
      header: T.nilable(Temporalio::Api::Common::V1::Header),
      workflow_start_delay: T.nilable(Google::Protobuf::Duration),
      skip_generate_workflow_task: T.nilable(T::Boolean),
      user_metadata: T.nilable(Temporalio::Api::Sdk::V1::UserMetadata)
    ).void
  end
  def initialize(
    namespace: "",
    workflow_id: "",
    workflow_type: nil,
    task_queue: nil,
    input: nil,
    workflow_execution_timeout: nil,
    workflow_run_timeout: nil,
    workflow_task_timeout: nil,
    identity: "",
    request_id: "",
    workflow_id_reuse_policy: :WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED,
    workflow_id_conflict_policy: :WORKFLOW_ID_CONFLICT_POLICY_UNSPECIFIED,
    signal_name: "",
    signal_input: nil,
    control: "",
    retry_policy: nil,
    cron_schedule: "",
    memo: nil,
    search_attributes: nil,
    header: nil,
    workflow_start_delay: nil,
    skip_generate_workflow_task: false,
    user_metadata: nil
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def workflow_id
  end

  sig { params(value: String).void }
  def workflow_id=(value)
  end

  sig { void }
  def clear_workflow_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowType)) }
  def workflow_type
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowType)).void }
  def workflow_type=(value)
  end

  sig { void }
  def clear_workflow_type
  end

  # The task queue to start this workflow on, if it will be started
  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)) }
  def task_queue
  end

  # The task queue to start this workflow on, if it will be started
  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)).void }
  def task_queue=(value)
  end

  # The task queue to start this workflow on, if it will be started
  sig { void }
  def clear_task_queue
  end

  # Serialized arguments to the workflow. These are passed as arguments to the workflow function.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def input
  end

  # Serialized arguments to the workflow. These are passed as arguments to the workflow function.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def input=(value)
  end

  # Serialized arguments to the workflow. These are passed as arguments to the workflow function.
  sig { void }
  def clear_input
  end

  # Total workflow execution timeout including retries and continue as new
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_execution_timeout
  end

  # Total workflow execution timeout including retries and continue as new
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_execution_timeout=(value)
  end

  # Total workflow execution timeout including retries and continue as new
  sig { void }
  def clear_workflow_execution_timeout
  end

  # Timeout of a single workflow run
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_run_timeout
  end

  # Timeout of a single workflow run
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_run_timeout=(value)
  end

  # Timeout of a single workflow run
  sig { void }
  def clear_workflow_run_timeout
  end

  # Timeout of a single workflow task
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_task_timeout
  end

  # Timeout of a single workflow task
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_task_timeout=(value)
  end

  # Timeout of a single workflow task
  sig { void }
  def clear_workflow_task_timeout
  end

  # The identity of the worker/client
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client
  sig { void }
  def clear_identity
  end

  # Used to de-dupe signal w/ start requests
  sig { returns(String) }
  def request_id
  end

  # Used to de-dupe signal w/ start requests
  sig { params(value: String).void }
  def request_id=(value)
  end

  # Used to de-dupe signal w/ start requests
  sig { void }
  def clear_request_id
  end

  # Defines whether to allow re-using the workflow id from a previously *closed* workflow.
# The default policy is WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
#
# See `workflow_id_reuse_policy` for handling a workflow id duplication with a *running* workflow.
  sig { returns(T.any(Symbol, Integer)) }
  def workflow_id_reuse_policy
  end

  # Defines whether to allow re-using the workflow id from a previously *closed* workflow.
# The default policy is WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
#
# See `workflow_id_reuse_policy` for handling a workflow id duplication with a *running* workflow.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def workflow_id_reuse_policy=(value)
  end

  # Defines whether to allow re-using the workflow id from a previously *closed* workflow.
# The default policy is WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
#
# See `workflow_id_reuse_policy` for handling a workflow id duplication with a *running* workflow.
  sig { void }
  def clear_workflow_id_reuse_policy
  end

  # Defines how to resolve a workflow id conflict with a *running* workflow.
# The default policy is WORKFLOW_ID_CONFLICT_POLICY_USE_EXISTING.
# Note that WORKFLOW_ID_CONFLICT_POLICY_FAIL is an invalid option.
#
# See `workflow_id_reuse_policy` for handling a workflow id duplication with a *closed* workflow.
  sig { returns(T.any(Symbol, Integer)) }
  def workflow_id_conflict_policy
  end

  # Defines how to resolve a workflow id conflict with a *running* workflow.
# The default policy is WORKFLOW_ID_CONFLICT_POLICY_USE_EXISTING.
# Note that WORKFLOW_ID_CONFLICT_POLICY_FAIL is an invalid option.
#
# See `workflow_id_reuse_policy` for handling a workflow id duplication with a *closed* workflow.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def workflow_id_conflict_policy=(value)
  end

  # Defines how to resolve a workflow id conflict with a *running* workflow.
# The default policy is WORKFLOW_ID_CONFLICT_POLICY_USE_EXISTING.
# Note that WORKFLOW_ID_CONFLICT_POLICY_FAIL is an invalid option.
#
# See `workflow_id_reuse_policy` for handling a workflow id duplication with a *closed* workflow.
  sig { void }
  def clear_workflow_id_conflict_policy
  end

  # The workflow author-defined name of the signal to send to the workflow
  sig { returns(String) }
  def signal_name
  end

  # The workflow author-defined name of the signal to send to the workflow
  sig { params(value: String).void }
  def signal_name=(value)
  end

  # The workflow author-defined name of the signal to send to the workflow
  sig { void }
  def clear_signal_name
  end

  # Serialized value(s) to provide with the signal
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def signal_input
  end

  # Serialized value(s) to provide with the signal
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def signal_input=(value)
  end

  # Serialized value(s) to provide with the signal
  sig { void }
  def clear_signal_input
  end

  # Deprecated
  sig { returns(String) }
  def control
  end

  # Deprecated
  sig { params(value: String).void }
  def control=(value)
  end

  # Deprecated
  sig { void }
  def clear_control
  end

  # Retry policy for the workflow
  sig { returns(T.nilable(Temporalio::Api::Common::V1::RetryPolicy)) }
  def retry_policy
  end

  # Retry policy for the workflow
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::RetryPolicy)).void }
  def retry_policy=(value)
  end

  # Retry policy for the workflow
  sig { void }
  def clear_retry_policy
  end

  # See https://docs.temporal.io/docs/content/what-is-a-temporal-cron-job/
  sig { returns(String) }
  def cron_schedule
  end

  # See https://docs.temporal.io/docs/content/what-is-a-temporal-cron-job/
  sig { params(value: String).void }
  def cron_schedule=(value)
  end

  # See https://docs.temporal.io/docs/content/what-is-a-temporal-cron-job/
  sig { void }
  def clear_cron_schedule
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Memo)) }
  def memo
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Memo)).void }
  def memo=(value)
  end

  sig { void }
  def clear_memo
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::SearchAttributes)) }
  def search_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::SearchAttributes)).void }
  def search_attributes=(value)
  end

  sig { void }
  def clear_search_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Header)) }
  def header
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Header)).void }
  def header=(value)
  end

  sig { void }
  def clear_header
  end

  # Time to wait before dispatching the first workflow task. Cannot be used with `cron_schedule`.
# Note that the signal will be delivered with the first workflow task. If the workflow gets
# another SignalWithStartWorkflow before the delay and `skip_generate_workflow_task` is false
# or not set, a workflow task will be dispatched immediately and the rest of the delay period
# will be ignored, even if that request also had a delay. Signal via SignalWorkflowExecution
# will not unblock the workflow.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_start_delay
  end

  # Time to wait before dispatching the first workflow task. Cannot be used with `cron_schedule`.
# Note that the signal will be delivered with the first workflow task. If the workflow gets
# another SignalWithStartWorkflow before the delay and `skip_generate_workflow_task` is false
# or not set, a workflow task will be dispatched immediately and the rest of the delay period
# will be ignored, even if that request also had a delay. Signal via SignalWorkflowExecution
# will not unblock the workflow.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_start_delay=(value)
  end

  # Time to wait before dispatching the first workflow task. Cannot be used with `cron_schedule`.
# Note that the signal will be delivered with the first workflow task. If the workflow gets
# another SignalWithStartWorkflow before the delay and `skip_generate_workflow_task` is false
# or not set, a workflow task will be dispatched immediately and the rest of the delay period
# will be ignored, even if that request also had a delay. Signal via SignalWorkflowExecution
# will not unblock the workflow.
  sig { void }
  def clear_workflow_start_delay
  end

  # Indicates that a new workflow task should not be generated when this signal is received.
  sig { returns(T::Boolean) }
  def skip_generate_workflow_task
  end

  # Indicates that a new workflow task should not be generated when this signal is received.
  sig { params(value: T::Boolean).void }
  def skip_generate_workflow_task=(value)
  end

  # Indicates that a new workflow task should not be generated when this signal is received.
  sig { void }
  def clear_skip_generate_workflow_task
  end

  # Metadata on the workflow if it is started. This is carried over to the WorkflowExecutionInfo
# for use by user interfaces to display the fixed as-of-start summary and details of the
# workflow.
  sig { returns(T.nilable(Temporalio::Api::Sdk::V1::UserMetadata)) }
  def user_metadata
  end

  # Metadata on the workflow if it is started. This is carried over to the WorkflowExecutionInfo
# for use by user interfaces to display the fixed as-of-start summary and details of the
# workflow.
  sig { params(value: T.nilable(Temporalio::Api::Sdk::V1::UserMetadata)).void }
  def user_metadata=(value)
  end

  # Metadata on the workflow if it is started. This is carried over to the WorkflowExecutionInfo
# for use by user interfaces to display the fixed as-of-start summary and details of the
# workflow.
  sig { void }
  def clear_user_metadata
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::SignalWithStartWorkflowExecutionResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::SignalWithStartWorkflowExecutionResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::SignalWithStartWorkflowExecutionResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::SignalWithStartWorkflowExecutionResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::SignalWithStartWorkflowExecutionResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      run_id: T.nilable(String),
      started: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    run_id: "",
    started: false
  )
  end

  # The run id of the workflow that was started - or just signaled, if it was already running.
  sig { returns(String) }
  def run_id
  end

  # The run id of the workflow that was started - or just signaled, if it was already running.
  sig { params(value: String).void }
  def run_id=(value)
  end

  # The run id of the workflow that was started - or just signaled, if it was already running.
  sig { void }
  def clear_run_id
  end

  # If true, a new workflow was started.
  sig { returns(T::Boolean) }
  def started
  end

  # If true, a new workflow was started.
  sig { params(value: T::Boolean).void }
  def started=(value)
  end

  # If true, a new workflow was started.
  sig { void }
  def clear_started
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ResetWorkflowExecutionRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ResetWorkflowExecutionRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ResetWorkflowExecutionRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ResetWorkflowExecutionRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ResetWorkflowExecutionRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      reason: T.nilable(String),
      workflow_task_finish_event_id: T.nilable(Integer),
      request_id: T.nilable(String),
      reset_reapply_type: T.nilable(T.any(Symbol, String, Integer)),
      reset_reapply_exclude_types: T.nilable(T::Array[T.any(Symbol, String, Integer)])
    ).void
  end
  def initialize(
    namespace: "",
    workflow_execution: nil,
    reason: "",
    workflow_task_finish_event_id: 0,
    request_id: "",
    reset_reapply_type: :RESET_REAPPLY_TYPE_UNSPECIFIED,
    reset_reapply_exclude_types: []
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  sig { void }
  def clear_workflow_execution
  end

  sig { returns(String) }
  def reason
  end

  sig { params(value: String).void }
  def reason=(value)
  end

  sig { void }
  def clear_reason
  end

  # The id of a `WORKFLOW_TASK_COMPLETED`,`WORKFLOW_TASK_TIMED_OUT`, `WORKFLOW_TASK_FAILED`, or
# `WORKFLOW_TASK_STARTED` event to reset to.
  sig { returns(Integer) }
  def workflow_task_finish_event_id
  end

  # The id of a `WORKFLOW_TASK_COMPLETED`,`WORKFLOW_TASK_TIMED_OUT`, `WORKFLOW_TASK_FAILED`, or
# `WORKFLOW_TASK_STARTED` event to reset to.
  sig { params(value: Integer).void }
  def workflow_task_finish_event_id=(value)
  end

  # The id of a `WORKFLOW_TASK_COMPLETED`,`WORKFLOW_TASK_TIMED_OUT`, `WORKFLOW_TASK_FAILED`, or
# `WORKFLOW_TASK_STARTED` event to reset to.
  sig { void }
  def clear_workflow_task_finish_event_id
  end

  # Used to de-dupe reset requests
  sig { returns(String) }
  def request_id
  end

  # Used to de-dupe reset requests
  sig { params(value: String).void }
  def request_id=(value)
  end

  # Used to de-dupe reset requests
  sig { void }
  def clear_request_id
  end

  # Event types to be reapplied (deprecated)
# Default: RESET_REAPPLY_TYPE_SIGNAL
  sig { returns(T.any(Symbol, Integer)) }
  def reset_reapply_type
  end

  # Event types to be reapplied (deprecated)
# Default: RESET_REAPPLY_TYPE_SIGNAL
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def reset_reapply_type=(value)
  end

  # Event types to be reapplied (deprecated)
# Default: RESET_REAPPLY_TYPE_SIGNAL
  sig { void }
  def clear_reset_reapply_type
  end

  # Event types not to be reapplied
  sig { returns(T::Array[T.any(Symbol, Integer)]) }
  def reset_reapply_exclude_types
  end

  # Event types not to be reapplied
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def reset_reapply_exclude_types=(value)
  end

  # Event types not to be reapplied
  sig { void }
  def clear_reset_reapply_exclude_types
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ResetWorkflowExecutionResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ResetWorkflowExecutionResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ResetWorkflowExecutionResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ResetWorkflowExecutionResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ResetWorkflowExecutionResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      run_id: T.nilable(String)
    ).void
  end
  def initialize(
    run_id: ""
  )
  end

  sig { returns(String) }
  def run_id
  end

  sig { params(value: String).void }
  def run_id=(value)
  end

  sig { void }
  def clear_run_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::TerminateWorkflowExecutionRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::TerminateWorkflowExecutionRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::TerminateWorkflowExecutionRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::TerminateWorkflowExecutionRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::TerminateWorkflowExecutionRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      reason: T.nilable(String),
      details: T.nilable(Temporalio::Api::Common::V1::Payloads),
      identity: T.nilable(String),
      first_execution_run_id: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    workflow_execution: nil,
    reason: "",
    details: nil,
    identity: "",
    first_execution_run_id: ""
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  sig { void }
  def clear_workflow_execution
  end

  sig { returns(String) }
  def reason
  end

  sig { params(value: String).void }
  def reason=(value)
  end

  sig { void }
  def clear_reason
  end

  # Serialized additional information to attach to the termination event
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def details
  end

  # Serialized additional information to attach to the termination event
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def details=(value)
  end

  # Serialized additional information to attach to the termination event
  sig { void }
  def clear_details
  end

  # The identity of the worker/client
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client
  sig { void }
  def clear_identity
  end

  # If set, this call will error if the most recent (if no run id is set on
# `workflow_execution`), or specified (if it is) workflow execution is not part of the same
# execution chain as this id.
  sig { returns(String) }
  def first_execution_run_id
  end

  # If set, this call will error if the most recent (if no run id is set on
# `workflow_execution`), or specified (if it is) workflow execution is not part of the same
# execution chain as this id.
  sig { params(value: String).void }
  def first_execution_run_id=(value)
  end

  # If set, this call will error if the most recent (if no run id is set on
# `workflow_execution`), or specified (if it is) workflow execution is not part of the same
# execution chain as this id.
  sig { void }
  def clear_first_execution_run_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::TerminateWorkflowExecutionResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::TerminateWorkflowExecutionResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::TerminateWorkflowExecutionResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::TerminateWorkflowExecutionResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::TerminateWorkflowExecutionResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::DeleteWorkflowExecutionRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::DeleteWorkflowExecutionRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DeleteWorkflowExecutionRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::DeleteWorkflowExecutionRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DeleteWorkflowExecutionRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)
    ).void
  end
  def initialize(
    namespace: "",
    workflow_execution: nil
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  # Workflow Execution to delete. If run_id is not specified, the latest one is used.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  # Workflow Execution to delete. If run_id is not specified, the latest one is used.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  # Workflow Execution to delete. If run_id is not specified, the latest one is used.
  sig { void }
  def clear_workflow_execution
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::DeleteWorkflowExecutionResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::DeleteWorkflowExecutionResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DeleteWorkflowExecutionResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::DeleteWorkflowExecutionResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DeleteWorkflowExecutionResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ListOpenWorkflowExecutionsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ListOpenWorkflowExecutionsRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListOpenWorkflowExecutionsRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ListOpenWorkflowExecutionsRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListOpenWorkflowExecutionsRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      maximum_page_size: T.nilable(Integer),
      next_page_token: T.nilable(String),
      start_time_filter: T.nilable(Temporalio::Api::Filter::V1::StartTimeFilter),
      execution_filter: T.nilable(Temporalio::Api::Filter::V1::WorkflowExecutionFilter),
      type_filter: T.nilable(Temporalio::Api::Filter::V1::WorkflowTypeFilter)
    ).void
  end
  def initialize(
    namespace: "",
    maximum_page_size: 0,
    next_page_token: "",
    start_time_filter: nil,
    execution_filter: nil,
    type_filter: nil
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(Integer) }
  def maximum_page_size
  end

  sig { params(value: Integer).void }
  def maximum_page_size=(value)
  end

  sig { void }
  def clear_maximum_page_size
  end

  sig { returns(String) }
  def next_page_token
  end

  sig { params(value: String).void }
  def next_page_token=(value)
  end

  sig { void }
  def clear_next_page_token
  end

  sig { returns(T.nilable(Temporalio::Api::Filter::V1::StartTimeFilter)) }
  def start_time_filter
  end

  sig { params(value: T.nilable(Temporalio::Api::Filter::V1::StartTimeFilter)).void }
  def start_time_filter=(value)
  end

  sig { void }
  def clear_start_time_filter
  end

  sig { returns(T.nilable(Temporalio::Api::Filter::V1::WorkflowExecutionFilter)) }
  def execution_filter
  end

  sig { params(value: T.nilable(Temporalio::Api::Filter::V1::WorkflowExecutionFilter)).void }
  def execution_filter=(value)
  end

  sig { void }
  def clear_execution_filter
  end

  sig { returns(T.nilable(Temporalio::Api::Filter::V1::WorkflowTypeFilter)) }
  def type_filter
  end

  sig { params(value: T.nilable(Temporalio::Api::Filter::V1::WorkflowTypeFilter)).void }
  def type_filter=(value)
  end

  sig { void }
  def clear_type_filter
  end

  sig { returns(T.nilable(Symbol)) }
  def filters
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ListOpenWorkflowExecutionsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ListOpenWorkflowExecutionsResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListOpenWorkflowExecutionsResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ListOpenWorkflowExecutionsResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListOpenWorkflowExecutionsResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      executions: T.nilable(T::Array[T.nilable(Temporalio::Api::Workflow::V1::WorkflowExecutionInfo)]),
      next_page_token: T.nilable(String)
    ).void
  end
  def initialize(
    executions: [],
    next_page_token: ""
  )
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::Workflow::V1::WorkflowExecutionInfo)]) }
  def executions
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def executions=(value)
  end

  sig { void }
  def clear_executions
  end

  sig { returns(String) }
  def next_page_token
  end

  sig { params(value: String).void }
  def next_page_token=(value)
  end

  sig { void }
  def clear_next_page_token
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ListClosedWorkflowExecutionsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ListClosedWorkflowExecutionsRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListClosedWorkflowExecutionsRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ListClosedWorkflowExecutionsRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListClosedWorkflowExecutionsRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      maximum_page_size: T.nilable(Integer),
      next_page_token: T.nilable(String),
      start_time_filter: T.nilable(Temporalio::Api::Filter::V1::StartTimeFilter),
      execution_filter: T.nilable(Temporalio::Api::Filter::V1::WorkflowExecutionFilter),
      type_filter: T.nilable(Temporalio::Api::Filter::V1::WorkflowTypeFilter),
      status_filter: T.nilable(Temporalio::Api::Filter::V1::StatusFilter)
    ).void
  end
  def initialize(
    namespace: "",
    maximum_page_size: 0,
    next_page_token: "",
    start_time_filter: nil,
    execution_filter: nil,
    type_filter: nil,
    status_filter: nil
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(Integer) }
  def maximum_page_size
  end

  sig { params(value: Integer).void }
  def maximum_page_size=(value)
  end

  sig { void }
  def clear_maximum_page_size
  end

  sig { returns(String) }
  def next_page_token
  end

  sig { params(value: String).void }
  def next_page_token=(value)
  end

  sig { void }
  def clear_next_page_token
  end

  sig { returns(T.nilable(Temporalio::Api::Filter::V1::StartTimeFilter)) }
  def start_time_filter
  end

  sig { params(value: T.nilable(Temporalio::Api::Filter::V1::StartTimeFilter)).void }
  def start_time_filter=(value)
  end

  sig { void }
  def clear_start_time_filter
  end

  sig { returns(T.nilable(Temporalio::Api::Filter::V1::WorkflowExecutionFilter)) }
  def execution_filter
  end

  sig { params(value: T.nilable(Temporalio::Api::Filter::V1::WorkflowExecutionFilter)).void }
  def execution_filter=(value)
  end

  sig { void }
  def clear_execution_filter
  end

  sig { returns(T.nilable(Temporalio::Api::Filter::V1::WorkflowTypeFilter)) }
  def type_filter
  end

  sig { params(value: T.nilable(Temporalio::Api::Filter::V1::WorkflowTypeFilter)).void }
  def type_filter=(value)
  end

  sig { void }
  def clear_type_filter
  end

  sig { returns(T.nilable(Temporalio::Api::Filter::V1::StatusFilter)) }
  def status_filter
  end

  sig { params(value: T.nilable(Temporalio::Api::Filter::V1::StatusFilter)).void }
  def status_filter=(value)
  end

  sig { void }
  def clear_status_filter
  end

  sig { returns(T.nilable(Symbol)) }
  def filters
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ListClosedWorkflowExecutionsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ListClosedWorkflowExecutionsResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListClosedWorkflowExecutionsResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ListClosedWorkflowExecutionsResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListClosedWorkflowExecutionsResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      executions: T.nilable(T::Array[T.nilable(Temporalio::Api::Workflow::V1::WorkflowExecutionInfo)]),
      next_page_token: T.nilable(String)
    ).void
  end
  def initialize(
    executions: [],
    next_page_token: ""
  )
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::Workflow::V1::WorkflowExecutionInfo)]) }
  def executions
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def executions=(value)
  end

  sig { void }
  def clear_executions
  end

  sig { returns(String) }
  def next_page_token
  end

  sig { params(value: String).void }
  def next_page_token=(value)
  end

  sig { void }
  def clear_next_page_token
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ListWorkflowExecutionsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ListWorkflowExecutionsRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListWorkflowExecutionsRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ListWorkflowExecutionsRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListWorkflowExecutionsRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      page_size: T.nilable(Integer),
      next_page_token: T.nilable(String),
      query: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    page_size: 0,
    next_page_token: "",
    query: ""
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(Integer) }
  def page_size
  end

  sig { params(value: Integer).void }
  def page_size=(value)
  end

  sig { void }
  def clear_page_size
  end

  sig { returns(String) }
  def next_page_token
  end

  sig { params(value: String).void }
  def next_page_token=(value)
  end

  sig { void }
  def clear_next_page_token
  end

  sig { returns(String) }
  def query
  end

  sig { params(value: String).void }
  def query=(value)
  end

  sig { void }
  def clear_query
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ListWorkflowExecutionsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ListWorkflowExecutionsResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListWorkflowExecutionsResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ListWorkflowExecutionsResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListWorkflowExecutionsResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      executions: T.nilable(T::Array[T.nilable(Temporalio::Api::Workflow::V1::WorkflowExecutionInfo)]),
      next_page_token: T.nilable(String)
    ).void
  end
  def initialize(
    executions: [],
    next_page_token: ""
  )
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::Workflow::V1::WorkflowExecutionInfo)]) }
  def executions
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def executions=(value)
  end

  sig { void }
  def clear_executions
  end

  sig { returns(String) }
  def next_page_token
  end

  sig { params(value: String).void }
  def next_page_token=(value)
  end

  sig { void }
  def clear_next_page_token
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ListArchivedWorkflowExecutionsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ListArchivedWorkflowExecutionsRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListArchivedWorkflowExecutionsRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ListArchivedWorkflowExecutionsRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListArchivedWorkflowExecutionsRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      page_size: T.nilable(Integer),
      next_page_token: T.nilable(String),
      query: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    page_size: 0,
    next_page_token: "",
    query: ""
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(Integer) }
  def page_size
  end

  sig { params(value: Integer).void }
  def page_size=(value)
  end

  sig { void }
  def clear_page_size
  end

  sig { returns(String) }
  def next_page_token
  end

  sig { params(value: String).void }
  def next_page_token=(value)
  end

  sig { void }
  def clear_next_page_token
  end

  sig { returns(String) }
  def query
  end

  sig { params(value: String).void }
  def query=(value)
  end

  sig { void }
  def clear_query
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ListArchivedWorkflowExecutionsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ListArchivedWorkflowExecutionsResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListArchivedWorkflowExecutionsResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ListArchivedWorkflowExecutionsResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListArchivedWorkflowExecutionsResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      executions: T.nilable(T::Array[T.nilable(Temporalio::Api::Workflow::V1::WorkflowExecutionInfo)]),
      next_page_token: T.nilable(String)
    ).void
  end
  def initialize(
    executions: [],
    next_page_token: ""
  )
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::Workflow::V1::WorkflowExecutionInfo)]) }
  def executions
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def executions=(value)
  end

  sig { void }
  def clear_executions
  end

  sig { returns(String) }
  def next_page_token
  end

  sig { params(value: String).void }
  def next_page_token=(value)
  end

  sig { void }
  def clear_next_page_token
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ScanWorkflowExecutionsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ScanWorkflowExecutionsRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ScanWorkflowExecutionsRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ScanWorkflowExecutionsRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ScanWorkflowExecutionsRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      page_size: T.nilable(Integer),
      next_page_token: T.nilable(String),
      query: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    page_size: 0,
    next_page_token: "",
    query: ""
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(Integer) }
  def page_size
  end

  sig { params(value: Integer).void }
  def page_size=(value)
  end

  sig { void }
  def clear_page_size
  end

  sig { returns(String) }
  def next_page_token
  end

  sig { params(value: String).void }
  def next_page_token=(value)
  end

  sig { void }
  def clear_next_page_token
  end

  sig { returns(String) }
  def query
  end

  sig { params(value: String).void }
  def query=(value)
  end

  sig { void }
  def clear_query
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ScanWorkflowExecutionsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ScanWorkflowExecutionsResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ScanWorkflowExecutionsResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ScanWorkflowExecutionsResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ScanWorkflowExecutionsResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      executions: T.nilable(T::Array[T.nilable(Temporalio::Api::Workflow::V1::WorkflowExecutionInfo)]),
      next_page_token: T.nilable(String)
    ).void
  end
  def initialize(
    executions: [],
    next_page_token: ""
  )
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::Workflow::V1::WorkflowExecutionInfo)]) }
  def executions
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def executions=(value)
  end

  sig { void }
  def clear_executions
  end

  sig { returns(String) }
  def next_page_token
  end

  sig { params(value: String).void }
  def next_page_token=(value)
  end

  sig { void }
  def clear_next_page_token
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      query: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    query: ""
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def query
  end

  sig { params(value: String).void }
  def query=(value)
  end

  sig { void }
  def clear_query
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      count: T.nilable(Integer),
      groups: T.nilable(T::Array[T.nilable(Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsResponse::AggregationGroup)])
    ).void
  end
  def initialize(
    count: 0,
    groups: []
  )
  end

  # If `query` is not grouping by any field, the count is an approximate number
# of workflows that matches the query.
# If `query` is grouping by a field, the count is simply the sum of the counts
# of the groups returned in the response. This number can be smaller than the
# total number of workflows matching the query.
  sig { returns(Integer) }
  def count
  end

  # If `query` is not grouping by any field, the count is an approximate number
# of workflows that matches the query.
# If `query` is grouping by a field, the count is simply the sum of the counts
# of the groups returned in the response. This number can be smaller than the
# total number of workflows matching the query.
  sig { params(value: Integer).void }
  def count=(value)
  end

  # If `query` is not grouping by any field, the count is an approximate number
# of workflows that matches the query.
# If `query` is grouping by a field, the count is simply the sum of the counts
# of the groups returned in the response. This number can be smaller than the
# total number of workflows matching the query.
  sig { void }
  def clear_count
  end

  # `groups` contains the groups if the request is grouping by a field.
# The list might not be complete, and the counts of each group is approximate.
  sig { returns(T::Array[T.nilable(Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsResponse::AggregationGroup)]) }
  def groups
  end

  # `groups` contains the groups if the request is grouping by a field.
# The list might not be complete, and the counts of each group is approximate.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def groups=(value)
  end

  # `groups` contains the groups if the request is grouping by a field.
# The list might not be complete, and the counts of each group is approximate.
  sig { void }
  def clear_groups
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::GetSearchAttributesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::GetSearchAttributesRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetSearchAttributesRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::GetSearchAttributesRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetSearchAttributesRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::GetSearchAttributesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::GetSearchAttributesResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetSearchAttributesResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::GetSearchAttributesResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetSearchAttributesResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      keys: T.nilable(T::Hash[String, T.any(Symbol, String, Integer)])
    ).void
  end
  def initialize(
    keys: ::Google::Protobuf::Map.new(:string, :enum)
  )
  end

  sig { returns(T::Hash[String, T.any(Symbol, Integer)]) }
  def keys
  end

  sig { params(value: ::Google::Protobuf::Map).void }
  def keys=(value)
  end

  sig { void }
  def clear_keys
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondQueryTaskCompletedRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondQueryTaskCompletedRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondQueryTaskCompletedRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondQueryTaskCompletedRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondQueryTaskCompletedRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      task_token: T.nilable(String),
      completed_type: T.nilable(T.any(Symbol, String, Integer)),
      query_result: T.nilable(Temporalio::Api::Common::V1::Payloads),
      error_message: T.nilable(String),
      namespace: T.nilable(String)
    ).void
  end
  def initialize(
    task_token: "",
    completed_type: :QUERY_RESULT_TYPE_UNSPECIFIED,
    query_result: nil,
    error_message: "",
    namespace: ""
  )
  end

  sig { returns(String) }
  def task_token
  end

  sig { params(value: String).void }
  def task_token=(value)
  end

  sig { void }
  def clear_task_token
  end

  sig { returns(T.any(Symbol, Integer)) }
  def completed_type
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def completed_type=(value)
  end

  sig { void }
  def clear_completed_type
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def query_result
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def query_result=(value)
  end

  sig { void }
  def clear_query_result
  end

  sig { returns(String) }
  def error_message
  end

  sig { params(value: String).void }
  def error_message=(value)
  end

  sig { void }
  def clear_error_message
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondQueryTaskCompletedResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondQueryTaskCompletedResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondQueryTaskCompletedResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondQueryTaskCompletedResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondQueryTaskCompletedResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ResetStickyTaskQueueRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ResetStickyTaskQueueRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ResetStickyTaskQueueRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ResetStickyTaskQueueRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ResetStickyTaskQueueRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)
    ).void
  end
  def initialize(
    namespace: "",
    execution: nil
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def execution=(value)
  end

  sig { void }
  def clear_execution
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ResetStickyTaskQueueResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ResetStickyTaskQueueResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ResetStickyTaskQueueResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ResetStickyTaskQueueResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ResetStickyTaskQueueResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::QueryWorkflowRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::QueryWorkflowRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::QueryWorkflowRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::QueryWorkflowRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::QueryWorkflowRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      query: T.nilable(Temporalio::Api::Query::V1::WorkflowQuery),
      query_reject_condition: T.nilable(T.any(Symbol, String, Integer))
    ).void
  end
  def initialize(
    namespace: "",
    execution: nil,
    query: nil,
    query_reject_condition: :QUERY_REJECT_CONDITION_UNSPECIFIED
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def execution=(value)
  end

  sig { void }
  def clear_execution
  end

  sig { returns(T.nilable(Temporalio::Api::Query::V1::WorkflowQuery)) }
  def query
  end

  sig { params(value: T.nilable(Temporalio::Api::Query::V1::WorkflowQuery)).void }
  def query=(value)
  end

  sig { void }
  def clear_query
  end

  # QueryRejectCondition can used to reject the query if workflow state does not satisfy condition.
# Default: QUERY_REJECT_CONDITION_NONE.
  sig { returns(T.any(Symbol, Integer)) }
  def query_reject_condition
  end

  # QueryRejectCondition can used to reject the query if workflow state does not satisfy condition.
# Default: QUERY_REJECT_CONDITION_NONE.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def query_reject_condition=(value)
  end

  # QueryRejectCondition can used to reject the query if workflow state does not satisfy condition.
# Default: QUERY_REJECT_CONDITION_NONE.
  sig { void }
  def clear_query_reject_condition
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::QueryWorkflowResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::QueryWorkflowResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::QueryWorkflowResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::QueryWorkflowResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::QueryWorkflowResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      query_result: T.nilable(Temporalio::Api::Common::V1::Payloads),
      query_rejected: T.nilable(Temporalio::Api::Query::V1::QueryRejected)
    ).void
  end
  def initialize(
    query_result: nil,
    query_rejected: nil
  )
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def query_result
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def query_result=(value)
  end

  sig { void }
  def clear_query_result
  end

  sig { returns(T.nilable(Temporalio::Api::Query::V1::QueryRejected)) }
  def query_rejected
  end

  sig { params(value: T.nilable(Temporalio::Api::Query::V1::QueryRejected)).void }
  def query_rejected=(value)
  end

  sig { void }
  def clear_query_rejected
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::DescribeWorkflowExecutionRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::DescribeWorkflowExecutionRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DescribeWorkflowExecutionRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::DescribeWorkflowExecutionRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DescribeWorkflowExecutionRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)
    ).void
  end
  def initialize(
    namespace: "",
    execution: nil
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def execution=(value)
  end

  sig { void }
  def clear_execution
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::DescribeWorkflowExecutionResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::DescribeWorkflowExecutionResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DescribeWorkflowExecutionResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::DescribeWorkflowExecutionResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DescribeWorkflowExecutionResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      execution_config: T.nilable(Temporalio::Api::Workflow::V1::WorkflowExecutionConfig),
      workflow_execution_info: T.nilable(Temporalio::Api::Workflow::V1::WorkflowExecutionInfo),
      pending_activities: T.nilable(T::Array[T.nilable(Temporalio::Api::Workflow::V1::PendingActivityInfo)]),
      pending_children: T.nilable(T::Array[T.nilable(Temporalio::Api::Workflow::V1::PendingChildExecutionInfo)]),
      pending_workflow_task: T.nilable(Temporalio::Api::Workflow::V1::PendingWorkflowTaskInfo),
      callbacks: T.nilable(T::Array[T.nilable(Temporalio::Api::Workflow::V1::CallbackInfo)]),
      pending_nexus_operations: T.nilable(T::Array[T.nilable(Temporalio::Api::Workflow::V1::PendingNexusOperationInfo)])
    ).void
  end
  def initialize(
    execution_config: nil,
    workflow_execution_info: nil,
    pending_activities: [],
    pending_children: [],
    pending_workflow_task: nil,
    callbacks: [],
    pending_nexus_operations: []
  )
  end

  sig { returns(T.nilable(Temporalio::Api::Workflow::V1::WorkflowExecutionConfig)) }
  def execution_config
  end

  sig { params(value: T.nilable(Temporalio::Api::Workflow::V1::WorkflowExecutionConfig)).void }
  def execution_config=(value)
  end

  sig { void }
  def clear_execution_config
  end

  sig { returns(T.nilable(Temporalio::Api::Workflow::V1::WorkflowExecutionInfo)) }
  def workflow_execution_info
  end

  sig { params(value: T.nilable(Temporalio::Api::Workflow::V1::WorkflowExecutionInfo)).void }
  def workflow_execution_info=(value)
  end

  sig { void }
  def clear_workflow_execution_info
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::Workflow::V1::PendingActivityInfo)]) }
  def pending_activities
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def pending_activities=(value)
  end

  sig { void }
  def clear_pending_activities
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::Workflow::V1::PendingChildExecutionInfo)]) }
  def pending_children
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def pending_children=(value)
  end

  sig { void }
  def clear_pending_children
  end

  sig { returns(T.nilable(Temporalio::Api::Workflow::V1::PendingWorkflowTaskInfo)) }
  def pending_workflow_task
  end

  sig { params(value: T.nilable(Temporalio::Api::Workflow::V1::PendingWorkflowTaskInfo)).void }
  def pending_workflow_task=(value)
  end

  sig { void }
  def clear_pending_workflow_task
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::Workflow::V1::CallbackInfo)]) }
  def callbacks
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def callbacks=(value)
  end

  sig { void }
  def clear_callbacks
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::Workflow::V1::PendingNexusOperationInfo)]) }
  def pending_nexus_operations
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def pending_nexus_operations=(value)
  end

  sig { void }
  def clear_pending_nexus_operations
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# (-- api-linter: core::0203::optional=disabled
#     aip.dev/not-precedent: field_behavior annotation not available in our gogo fork --)
class Temporalio::Api::WorkflowService::V1::DescribeTaskQueueRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::DescribeTaskQueueRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DescribeTaskQueueRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::DescribeTaskQueueRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DescribeTaskQueueRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      task_queue: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue),
      task_queue_type: T.nilable(T.any(Symbol, String, Integer)),
      include_task_queue_status: T.nilable(T::Boolean),
      api_mode: T.nilable(T.any(Symbol, String, Integer)),
      versions: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueueVersionSelection),
      task_queue_types: T.nilable(T::Array[T.any(Symbol, String, Integer)]),
      report_stats: T.nilable(T::Boolean),
      report_pollers: T.nilable(T::Boolean),
      report_task_reachability: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    namespace: "",
    task_queue: nil,
    task_queue_type: :TASK_QUEUE_TYPE_UNSPECIFIED,
    include_task_queue_status: false,
    api_mode: :DESCRIBE_TASK_QUEUE_MODE_UNSPECIFIED,
    versions: nil,
    task_queue_types: [],
    report_stats: false,
    report_pollers: false,
    report_task_reachability: false
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  # Sticky queues are not supported in `ENHANCED` mode.
  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)) }
  def task_queue
  end

  # Sticky queues are not supported in `ENHANCED` mode.
  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)).void }
  def task_queue=(value)
  end

  # Sticky queues are not supported in `ENHANCED` mode.
  sig { void }
  def clear_task_queue
  end

  # Deprecated. Use `ENHANCED` mode with `task_queue_types`. Ignored in `ENHANCED` mode.
# If unspecified (TASK_QUEUE_TYPE_UNSPECIFIED), then default value (TASK_QUEUE_TYPE_WORKFLOW) will be used.
  sig { returns(T.any(Symbol, Integer)) }
  def task_queue_type
  end

  # Deprecated. Use `ENHANCED` mode with `task_queue_types`. Ignored in `ENHANCED` mode.
# If unspecified (TASK_QUEUE_TYPE_UNSPECIFIED), then default value (TASK_QUEUE_TYPE_WORKFLOW) will be used.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def task_queue_type=(value)
  end

  # Deprecated. Use `ENHANCED` mode with `task_queue_types`. Ignored in `ENHANCED` mode.
# If unspecified (TASK_QUEUE_TYPE_UNSPECIFIED), then default value (TASK_QUEUE_TYPE_WORKFLOW) will be used.
  sig { void }
  def clear_task_queue_type
  end

  # Deprecated. Ignored in `ENHANCED` mode.
  sig { returns(T::Boolean) }
  def include_task_queue_status
  end

  # Deprecated. Ignored in `ENHANCED` mode.
  sig { params(value: T::Boolean).void }
  def include_task_queue_status=(value)
  end

  # Deprecated. Ignored in `ENHANCED` mode.
  sig { void }
  def clear_include_task_queue_status
  end

  # All options except `task_queue_type` and `include_task_queue_status` are only available in the `ENHANCED` mode.
  sig { returns(T.any(Symbol, Integer)) }
  def api_mode
  end

  # All options except `task_queue_type` and `include_task_queue_status` are only available in the `ENHANCED` mode.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def api_mode=(value)
  end

  # All options except `task_queue_type` and `include_task_queue_status` are only available in the `ENHANCED` mode.
  sig { void }
  def clear_api_mode
  end

  # Optional. If not provided, the result for the default Build ID will be returned. The default Build ID is the one
# mentioned in the first unconditional Assignment Rule. If there is no default Build ID, the result for the
# unversioned queue will be returned.
# (-- api-linter: core::0140::prepositions --)
  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueueVersionSelection)) }
  def versions
  end

  # Optional. If not provided, the result for the default Build ID will be returned. The default Build ID is the one
# mentioned in the first unconditional Assignment Rule. If there is no default Build ID, the result for the
# unversioned queue will be returned.
# (-- api-linter: core::0140::prepositions --)
  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueueVersionSelection)).void }
  def versions=(value)
  end

  # Optional. If not provided, the result for the default Build ID will be returned. The default Build ID is the one
# mentioned in the first unconditional Assignment Rule. If there is no default Build ID, the result for the
# unversioned queue will be returned.
# (-- api-linter: core::0140::prepositions --)
  sig { void }
  def clear_versions
  end

  # Task queue types to report info about. If not specified, all types are considered.
  sig { returns(T::Array[T.any(Symbol, Integer)]) }
  def task_queue_types
  end

  # Task queue types to report info about. If not specified, all types are considered.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def task_queue_types=(value)
  end

  # Task queue types to report info about. If not specified, all types are considered.
  sig { void }
  def clear_task_queue_types
  end

  # Report stats for the requested task queue types and versions
  sig { returns(T::Boolean) }
  def report_stats
  end

  # Report stats for the requested task queue types and versions
  sig { params(value: T::Boolean).void }
  def report_stats=(value)
  end

  # Report stats for the requested task queue types and versions
  sig { void }
  def clear_report_stats
  end

  # Report list of pollers for requested task queue types and versions
  sig { returns(T::Boolean) }
  def report_pollers
  end

  # Report list of pollers for requested task queue types and versions
  sig { params(value: T::Boolean).void }
  def report_pollers=(value)
  end

  # Report list of pollers for requested task queue types and versions
  sig { void }
  def clear_report_pollers
  end

  # Report task reachability for the requested versions and all task types (task reachability is not reported
# per task type).
  sig { returns(T::Boolean) }
  def report_task_reachability
  end

  # Report task reachability for the requested versions and all task types (task reachability is not reported
# per task type).
  sig { params(value: T::Boolean).void }
  def report_task_reachability=(value)
  end

  # Report task reachability for the requested versions and all task types (task reachability is not reported
# per task type).
  sig { void }
  def clear_report_task_reachability
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::DescribeTaskQueueResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::DescribeTaskQueueResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DescribeTaskQueueResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::DescribeTaskQueueResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DescribeTaskQueueResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      pollers: T.nilable(T::Array[T.nilable(Temporalio::Api::TaskQueue::V1::PollerInfo)]),
      task_queue_status: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueueStatus),
      versions_info: T.nilable(T::Hash[String, T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueueVersionInfo)])
    ).void
  end
  def initialize(
    pollers: [],
    task_queue_status: nil,
    versions_info: ::Google::Protobuf::Map.new(:string, :message, Temporalio::Api::TaskQueue::V1::TaskQueueVersionInfo)
  )
  end

  # Deprecated. Use `versions_info.types_info.pollers` with `ENHANCED` mode instead.
# Not set in `ENHANCED` mode.
  sig { returns(T::Array[T.nilable(Temporalio::Api::TaskQueue::V1::PollerInfo)]) }
  def pollers
  end

  # Deprecated. Use `versions_info.types_info.pollers` with `ENHANCED` mode instead.
# Not set in `ENHANCED` mode.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def pollers=(value)
  end

  # Deprecated. Use `versions_info.types_info.pollers` with `ENHANCED` mode instead.
# Not set in `ENHANCED` mode.
  sig { void }
  def clear_pollers
  end

  # Deprecated. Not set in `ENHANCED` mode.
  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueueStatus)) }
  def task_queue_status
  end

  # Deprecated. Not set in `ENHANCED` mode.
  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueueStatus)).void }
  def task_queue_status=(value)
  end

  # Deprecated. Not set in `ENHANCED` mode.
  sig { void }
  def clear_task_queue_status
  end

  # This map contains Task Queue information for each Build ID. Empty string as key value means unversioned.
# Only set in `ENHANCED` mode.
  sig { returns(T::Hash[String, T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueueVersionInfo)]) }
  def versions_info
  end

  # This map contains Task Queue information for each Build ID. Empty string as key value means unversioned.
# Only set in `ENHANCED` mode.
  sig { params(value: ::Google::Protobuf::Map).void }
  def versions_info=(value)
  end

  # This map contains Task Queue information for each Build ID. Empty string as key value means unversioned.
# Only set in `ENHANCED` mode.
  sig { void }
  def clear_versions_info
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::GetClusterInfoRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::GetClusterInfoRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetClusterInfoRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::GetClusterInfoRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetClusterInfoRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# GetClusterInfoResponse contains information about Temporal cluster.
class Temporalio::Api::WorkflowService::V1::GetClusterInfoResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::GetClusterInfoResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetClusterInfoResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::GetClusterInfoResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetClusterInfoResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      supported_clients: T.nilable(T::Hash[String, String]),
      server_version: T.nilable(String),
      cluster_id: T.nilable(String),
      version_info: T.nilable(Temporalio::Api::Version::V1::VersionInfo),
      cluster_name: T.nilable(String),
      history_shard_count: T.nilable(Integer),
      persistence_store: T.nilable(String),
      visibility_store: T.nilable(String)
    ).void
  end
  def initialize(
    supported_clients: ::Google::Protobuf::Map.new(:string, :string),
    server_version: "",
    cluster_id: "",
    version_info: nil,
    cluster_name: "",
    history_shard_count: 0,
    persistence_store: "",
    visibility_store: ""
  )
  end

  # Key is client name i.e "temporal-go", "temporal-java", or "temporal-cli".
# Value is ranges of supported versions of this client i.e ">1.1.1 <=1.4.0 || ^5.0.0".
  sig { returns(T::Hash[String, String]) }
  def supported_clients
  end

  # Key is client name i.e "temporal-go", "temporal-java", or "temporal-cli".
# Value is ranges of supported versions of this client i.e ">1.1.1 <=1.4.0 || ^5.0.0".
  sig { params(value: ::Google::Protobuf::Map).void }
  def supported_clients=(value)
  end

  # Key is client name i.e "temporal-go", "temporal-java", or "temporal-cli".
# Value is ranges of supported versions of this client i.e ">1.1.1 <=1.4.0 || ^5.0.0".
  sig { void }
  def clear_supported_clients
  end

  sig { returns(String) }
  def server_version
  end

  sig { params(value: String).void }
  def server_version=(value)
  end

  sig { void }
  def clear_server_version
  end

  sig { returns(String) }
  def cluster_id
  end

  sig { params(value: String).void }
  def cluster_id=(value)
  end

  sig { void }
  def clear_cluster_id
  end

  sig { returns(T.nilable(Temporalio::Api::Version::V1::VersionInfo)) }
  def version_info
  end

  sig { params(value: T.nilable(Temporalio::Api::Version::V1::VersionInfo)).void }
  def version_info=(value)
  end

  sig { void }
  def clear_version_info
  end

  sig { returns(String) }
  def cluster_name
  end

  sig { params(value: String).void }
  def cluster_name=(value)
  end

  sig { void }
  def clear_cluster_name
  end

  sig { returns(Integer) }
  def history_shard_count
  end

  sig { params(value: Integer).void }
  def history_shard_count=(value)
  end

  sig { void }
  def clear_history_shard_count
  end

  sig { returns(String) }
  def persistence_store
  end

  sig { params(value: String).void }
  def persistence_store=(value)
  end

  sig { void }
  def clear_persistence_store
  end

  sig { returns(String) }
  def visibility_store
  end

  sig { params(value: String).void }
  def visibility_store=(value)
  end

  sig { void }
  def clear_visibility_store
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::GetSystemInfoRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::GetSystemInfoRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetSystemInfoRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::GetSystemInfoRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetSystemInfoRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::GetSystemInfoResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::GetSystemInfoResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetSystemInfoResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::GetSystemInfoResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetSystemInfoResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      server_version: T.nilable(String),
      capabilities: T.nilable(Temporalio::Api::WorkflowService::V1::GetSystemInfoResponse::Capabilities)
    ).void
  end
  def initialize(
    server_version: "",
    capabilities: nil
  )
  end

  # Version of the server.
  sig { returns(String) }
  def server_version
  end

  # Version of the server.
  sig { params(value: String).void }
  def server_version=(value)
  end

  # Version of the server.
  sig { void }
  def clear_server_version
  end

  # All capabilities the system supports.
  sig { returns(T.nilable(Temporalio::Api::WorkflowService::V1::GetSystemInfoResponse::Capabilities)) }
  def capabilities
  end

  # All capabilities the system supports.
  sig { params(value: T.nilable(Temporalio::Api::WorkflowService::V1::GetSystemInfoResponse::Capabilities)).void }
  def capabilities=(value)
  end

  # All capabilities the system supports.
  sig { void }
  def clear_capabilities
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ListTaskQueuePartitionsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ListTaskQueuePartitionsRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListTaskQueuePartitionsRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ListTaskQueuePartitionsRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListTaskQueuePartitionsRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      task_queue: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)
    ).void
  end
  def initialize(
    namespace: "",
    task_queue: nil
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)) }
  def task_queue
  end

  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)).void }
  def task_queue=(value)
  end

  sig { void }
  def clear_task_queue
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ListTaskQueuePartitionsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ListTaskQueuePartitionsResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListTaskQueuePartitionsResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ListTaskQueuePartitionsResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListTaskQueuePartitionsResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      activity_task_queue_partitions: T.nilable(T::Array[T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueuePartitionMetadata)]),
      workflow_task_queue_partitions: T.nilable(T::Array[T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueuePartitionMetadata)])
    ).void
  end
  def initialize(
    activity_task_queue_partitions: [],
    workflow_task_queue_partitions: []
  )
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueuePartitionMetadata)]) }
  def activity_task_queue_partitions
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def activity_task_queue_partitions=(value)
  end

  sig { void }
  def clear_activity_task_queue_partitions
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueuePartitionMetadata)]) }
  def workflow_task_queue_partitions
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def workflow_task_queue_partitions=(value)
  end

  sig { void }
  def clear_workflow_task_queue_partitions
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# (-- api-linter: core::0203::optional=disabled
#     aip.dev/not-precedent: field_behavior annotation not available in our gogo fork --)
class Temporalio::Api::WorkflowService::V1::CreateScheduleRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::CreateScheduleRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::CreateScheduleRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::CreateScheduleRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::CreateScheduleRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      schedule_id: T.nilable(String),
      schedule: T.nilable(Temporalio::Api::Schedule::V1::Schedule),
      initial_patch: T.nilable(Temporalio::Api::Schedule::V1::SchedulePatch),
      identity: T.nilable(String),
      request_id: T.nilable(String),
      memo: T.nilable(Temporalio::Api::Common::V1::Memo),
      search_attributes: T.nilable(Temporalio::Api::Common::V1::SearchAttributes)
    ).void
  end
  def initialize(
    namespace: "",
    schedule_id: "",
    schedule: nil,
    initial_patch: nil,
    identity: "",
    request_id: "",
    memo: nil,
    search_attributes: nil
  )
  end

  # The namespace the schedule should be created in.
  sig { returns(String) }
  def namespace
  end

  # The namespace the schedule should be created in.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # The namespace the schedule should be created in.
  sig { void }
  def clear_namespace
  end

  # The id of the new schedule.
  sig { returns(String) }
  def schedule_id
  end

  # The id of the new schedule.
  sig { params(value: String).void }
  def schedule_id=(value)
  end

  # The id of the new schedule.
  sig { void }
  def clear_schedule_id
  end

  # The schedule spec, policies, action, and initial state.
  sig { returns(T.nilable(Temporalio::Api::Schedule::V1::Schedule)) }
  def schedule
  end

  # The schedule spec, policies, action, and initial state.
  sig { params(value: T.nilable(Temporalio::Api::Schedule::V1::Schedule)).void }
  def schedule=(value)
  end

  # The schedule spec, policies, action, and initial state.
  sig { void }
  def clear_schedule
  end

  # Optional initial patch (e.g. to run the action once immediately).
  sig { returns(T.nilable(Temporalio::Api::Schedule::V1::SchedulePatch)) }
  def initial_patch
  end

  # Optional initial patch (e.g. to run the action once immediately).
  sig { params(value: T.nilable(Temporalio::Api::Schedule::V1::SchedulePatch)).void }
  def initial_patch=(value)
  end

  # Optional initial patch (e.g. to run the action once immediately).
  sig { void }
  def clear_initial_patch
  end

  # The identity of the client who initiated this request.
  sig { returns(String) }
  def identity
  end

  # The identity of the client who initiated this request.
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the client who initiated this request.
  sig { void }
  def clear_identity
  end

  # A unique identifier for this create request for idempotence. Typically UUIDv4.
  sig { returns(String) }
  def request_id
  end

  # A unique identifier for this create request for idempotence. Typically UUIDv4.
  sig { params(value: String).void }
  def request_id=(value)
  end

  # A unique identifier for this create request for idempotence. Typically UUIDv4.
  sig { void }
  def clear_request_id
  end

  # Memo and search attributes to attach to the schedule itself.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Memo)) }
  def memo
  end

  # Memo and search attributes to attach to the schedule itself.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Memo)).void }
  def memo=(value)
  end

  # Memo and search attributes to attach to the schedule itself.
  sig { void }
  def clear_memo
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::SearchAttributes)) }
  def search_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::SearchAttributes)).void }
  def search_attributes=(value)
  end

  sig { void }
  def clear_search_attributes
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::CreateScheduleResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::CreateScheduleResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::CreateScheduleResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::CreateScheduleResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::CreateScheduleResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      conflict_token: T.nilable(String)
    ).void
  end
  def initialize(
    conflict_token: ""
  )
  end

  sig { returns(String) }
  def conflict_token
  end

  sig { params(value: String).void }
  def conflict_token=(value)
  end

  sig { void }
  def clear_conflict_token
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::DescribeScheduleRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::DescribeScheduleRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DescribeScheduleRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::DescribeScheduleRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DescribeScheduleRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      schedule_id: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    schedule_id: ""
  )
  end

  # The namespace of the schedule to describe.
  sig { returns(String) }
  def namespace
  end

  # The namespace of the schedule to describe.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # The namespace of the schedule to describe.
  sig { void }
  def clear_namespace
  end

  # The id of the schedule to describe.
  sig { returns(String) }
  def schedule_id
  end

  # The id of the schedule to describe.
  sig { params(value: String).void }
  def schedule_id=(value)
  end

  # The id of the schedule to describe.
  sig { void }
  def clear_schedule_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::DescribeScheduleResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::DescribeScheduleResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DescribeScheduleResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::DescribeScheduleResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DescribeScheduleResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      schedule: T.nilable(Temporalio::Api::Schedule::V1::Schedule),
      info: T.nilable(Temporalio::Api::Schedule::V1::ScheduleInfo),
      memo: T.nilable(Temporalio::Api::Common::V1::Memo),
      search_attributes: T.nilable(Temporalio::Api::Common::V1::SearchAttributes),
      conflict_token: T.nilable(String)
    ).void
  end
  def initialize(
    schedule: nil,
    info: nil,
    memo: nil,
    search_attributes: nil,
    conflict_token: ""
  )
  end

  # The complete current schedule details. This may not match the schedule as
# created because:
# - some types of schedule specs may get compiled into others (e.g.
#   CronString into StructuredCalendarSpec)
# - some unspecified fields may be replaced by defaults
# - some fields in the state are modified automatically
# - the schedule may have been modified by UpdateSchedule or PatchSchedule
  sig { returns(T.nilable(Temporalio::Api::Schedule::V1::Schedule)) }
  def schedule
  end

  # The complete current schedule details. This may not match the schedule as
# created because:
# - some types of schedule specs may get compiled into others (e.g.
#   CronString into StructuredCalendarSpec)
# - some unspecified fields may be replaced by defaults
# - some fields in the state are modified automatically
# - the schedule may have been modified by UpdateSchedule or PatchSchedule
  sig { params(value: T.nilable(Temporalio::Api::Schedule::V1::Schedule)).void }
  def schedule=(value)
  end

  # The complete current schedule details. This may not match the schedule as
# created because:
# - some types of schedule specs may get compiled into others (e.g.
#   CronString into StructuredCalendarSpec)
# - some unspecified fields may be replaced by defaults
# - some fields in the state are modified automatically
# - the schedule may have been modified by UpdateSchedule or PatchSchedule
  sig { void }
  def clear_schedule
  end

  # Extra schedule state info.
  sig { returns(T.nilable(Temporalio::Api::Schedule::V1::ScheduleInfo)) }
  def info
  end

  # Extra schedule state info.
  sig { params(value: T.nilable(Temporalio::Api::Schedule::V1::ScheduleInfo)).void }
  def info=(value)
  end

  # Extra schedule state info.
  sig { void }
  def clear_info
  end

  # The memo and search attributes that the schedule was created with.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Memo)) }
  def memo
  end

  # The memo and search attributes that the schedule was created with.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Memo)).void }
  def memo=(value)
  end

  # The memo and search attributes that the schedule was created with.
  sig { void }
  def clear_memo
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::SearchAttributes)) }
  def search_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::SearchAttributes)).void }
  def search_attributes=(value)
  end

  sig { void }
  def clear_search_attributes
  end

  # This value can be passed back to UpdateSchedule to ensure that the
# schedule was not modified between a Describe and an Update, which could
# lead to lost updates and other confusion.
  sig { returns(String) }
  def conflict_token
  end

  # This value can be passed back to UpdateSchedule to ensure that the
# schedule was not modified between a Describe and an Update, which could
# lead to lost updates and other confusion.
  sig { params(value: String).void }
  def conflict_token=(value)
  end

  # This value can be passed back to UpdateSchedule to ensure that the
# schedule was not modified between a Describe and an Update, which could
# lead to lost updates and other confusion.
  sig { void }
  def clear_conflict_token
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::UpdateScheduleRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::UpdateScheduleRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateScheduleRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::UpdateScheduleRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateScheduleRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      schedule_id: T.nilable(String),
      schedule: T.nilable(Temporalio::Api::Schedule::V1::Schedule),
      conflict_token: T.nilable(String),
      identity: T.nilable(String),
      request_id: T.nilable(String),
      search_attributes: T.nilable(Temporalio::Api::Common::V1::SearchAttributes)
    ).void
  end
  def initialize(
    namespace: "",
    schedule_id: "",
    schedule: nil,
    conflict_token: "",
    identity: "",
    request_id: "",
    search_attributes: nil
  )
  end

  # The namespace of the schedule to update.
  sig { returns(String) }
  def namespace
  end

  # The namespace of the schedule to update.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # The namespace of the schedule to update.
  sig { void }
  def clear_namespace
  end

  # The id of the schedule to update.
  sig { returns(String) }
  def schedule_id
  end

  # The id of the schedule to update.
  sig { params(value: String).void }
  def schedule_id=(value)
  end

  # The id of the schedule to update.
  sig { void }
  def clear_schedule_id
  end

  # The new schedule. The four main fields of the schedule (spec, action,
# policies, state) are replaced completely by the values in this message.
  sig { returns(T.nilable(Temporalio::Api::Schedule::V1::Schedule)) }
  def schedule
  end

  # The new schedule. The four main fields of the schedule (spec, action,
# policies, state) are replaced completely by the values in this message.
  sig { params(value: T.nilable(Temporalio::Api::Schedule::V1::Schedule)).void }
  def schedule=(value)
  end

  # The new schedule. The four main fields of the schedule (spec, action,
# policies, state) are replaced completely by the values in this message.
  sig { void }
  def clear_schedule
  end

  # This can be the value of conflict_token from a DescribeScheduleResponse,
# which will cause this request to fail if the schedule has been modified
# between the Describe and this Update.
# If missing, the schedule will be updated unconditionally.
  sig { returns(String) }
  def conflict_token
  end

  # This can be the value of conflict_token from a DescribeScheduleResponse,
# which will cause this request to fail if the schedule has been modified
# between the Describe and this Update.
# If missing, the schedule will be updated unconditionally.
  sig { params(value: String).void }
  def conflict_token=(value)
  end

  # This can be the value of conflict_token from a DescribeScheduleResponse,
# which will cause this request to fail if the schedule has been modified
# between the Describe and this Update.
# If missing, the schedule will be updated unconditionally.
  sig { void }
  def clear_conflict_token
  end

  # The identity of the client who initiated this request.
  sig { returns(String) }
  def identity
  end

  # The identity of the client who initiated this request.
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the client who initiated this request.
  sig { void }
  def clear_identity
  end

  # A unique identifier for this update request for idempotence. Typically UUIDv4.
  sig { returns(String) }
  def request_id
  end

  # A unique identifier for this update request for idempotence. Typically UUIDv4.
  sig { params(value: String).void }
  def request_id=(value)
  end

  # A unique identifier for this update request for idempotence. Typically UUIDv4.
  sig { void }
  def clear_request_id
  end

  # Schedule search attributes to be updated.
# Do not set this field if you do not want to update the search attributes.
# A non-null empty object will set the search attributes to an empty map.
# Note: you cannot only update the search attributes with `UpdateScheduleRequest`,
# you must also set the `schedule` field; otherwise, it will unset the schedule.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::SearchAttributes)) }
  def search_attributes
  end

  # Schedule search attributes to be updated.
# Do not set this field if you do not want to update the search attributes.
# A non-null empty object will set the search attributes to an empty map.
# Note: you cannot only update the search attributes with `UpdateScheduleRequest`,
# you must also set the `schedule` field; otherwise, it will unset the schedule.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::SearchAttributes)).void }
  def search_attributes=(value)
  end

  # Schedule search attributes to be updated.
# Do not set this field if you do not want to update the search attributes.
# A non-null empty object will set the search attributes to an empty map.
# Note: you cannot only update the search attributes with `UpdateScheduleRequest`,
# you must also set the `schedule` field; otherwise, it will unset the schedule.
  sig { void }
  def clear_search_attributes
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::UpdateScheduleResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::UpdateScheduleResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateScheduleResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::UpdateScheduleResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateScheduleResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::PatchScheduleRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::PatchScheduleRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::PatchScheduleRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::PatchScheduleRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::PatchScheduleRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      schedule_id: T.nilable(String),
      patch: T.nilable(Temporalio::Api::Schedule::V1::SchedulePatch),
      identity: T.nilable(String),
      request_id: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    schedule_id: "",
    patch: nil,
    identity: "",
    request_id: ""
  )
  end

  # The namespace of the schedule to patch.
  sig { returns(String) }
  def namespace
  end

  # The namespace of the schedule to patch.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # The namespace of the schedule to patch.
  sig { void }
  def clear_namespace
  end

  # The id of the schedule to patch.
  sig { returns(String) }
  def schedule_id
  end

  # The id of the schedule to patch.
  sig { params(value: String).void }
  def schedule_id=(value)
  end

  # The id of the schedule to patch.
  sig { void }
  def clear_schedule_id
  end

  sig { returns(T.nilable(Temporalio::Api::Schedule::V1::SchedulePatch)) }
  def patch
  end

  sig { params(value: T.nilable(Temporalio::Api::Schedule::V1::SchedulePatch)).void }
  def patch=(value)
  end

  sig { void }
  def clear_patch
  end

  # The identity of the client who initiated this request.
  sig { returns(String) }
  def identity
  end

  # The identity of the client who initiated this request.
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the client who initiated this request.
  sig { void }
  def clear_identity
  end

  # A unique identifier for this update request for idempotence. Typically UUIDv4.
  sig { returns(String) }
  def request_id
  end

  # A unique identifier for this update request for idempotence. Typically UUIDv4.
  sig { params(value: String).void }
  def request_id=(value)
  end

  # A unique identifier for this update request for idempotence. Typically UUIDv4.
  sig { void }
  def clear_request_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::PatchScheduleResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::PatchScheduleResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::PatchScheduleResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::PatchScheduleResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::PatchScheduleResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ListScheduleMatchingTimesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ListScheduleMatchingTimesRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListScheduleMatchingTimesRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ListScheduleMatchingTimesRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListScheduleMatchingTimesRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      schedule_id: T.nilable(String),
      start_time: T.nilable(Google::Protobuf::Timestamp),
      end_time: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(
    namespace: "",
    schedule_id: "",
    start_time: nil,
    end_time: nil
  )
  end

  # The namespace of the schedule to query.
  sig { returns(String) }
  def namespace
  end

  # The namespace of the schedule to query.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # The namespace of the schedule to query.
  sig { void }
  def clear_namespace
  end

  # The id of the schedule to query.
  sig { returns(String) }
  def schedule_id
  end

  # The id of the schedule to query.
  sig { params(value: String).void }
  def schedule_id=(value)
  end

  # The id of the schedule to query.
  sig { void }
  def clear_schedule_id
  end

  # Time range to query.
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def start_time
  end

  # Time range to query.
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def start_time=(value)
  end

  # Time range to query.
  sig { void }
  def clear_start_time
  end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def end_time
  end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def end_time=(value)
  end

  sig { void }
  def clear_end_time
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ListScheduleMatchingTimesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ListScheduleMatchingTimesResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListScheduleMatchingTimesResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ListScheduleMatchingTimesResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListScheduleMatchingTimesResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      start_time: T.nilable(T::Array[T.nilable(Google::Protobuf::Timestamp)])
    ).void
  end
  def initialize(
    start_time: []
  )
  end

  sig { returns(T::Array[T.nilable(Google::Protobuf::Timestamp)]) }
  def start_time
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def start_time=(value)
  end

  sig { void }
  def clear_start_time
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::DeleteScheduleRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::DeleteScheduleRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DeleteScheduleRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::DeleteScheduleRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DeleteScheduleRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      schedule_id: T.nilable(String),
      identity: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    schedule_id: "",
    identity: ""
  )
  end

  # The namespace of the schedule to delete.
  sig { returns(String) }
  def namespace
  end

  # The namespace of the schedule to delete.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # The namespace of the schedule to delete.
  sig { void }
  def clear_namespace
  end

  # The id of the schedule to delete.
  sig { returns(String) }
  def schedule_id
  end

  # The id of the schedule to delete.
  sig { params(value: String).void }
  def schedule_id=(value)
  end

  # The id of the schedule to delete.
  sig { void }
  def clear_schedule_id
  end

  # The identity of the client who initiated this request.
  sig { returns(String) }
  def identity
  end

  # The identity of the client who initiated this request.
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the client who initiated this request.
  sig { void }
  def clear_identity
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::DeleteScheduleResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::DeleteScheduleResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DeleteScheduleResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::DeleteScheduleResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DeleteScheduleResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ListSchedulesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ListSchedulesRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListSchedulesRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ListSchedulesRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListSchedulesRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      maximum_page_size: T.nilable(Integer),
      next_page_token: T.nilable(String),
      query: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    maximum_page_size: 0,
    next_page_token: "",
    query: ""
  )
  end

  # The namespace to list schedules in.
  sig { returns(String) }
  def namespace
  end

  # The namespace to list schedules in.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # The namespace to list schedules in.
  sig { void }
  def clear_namespace
  end

  # How many to return at once.
  sig { returns(Integer) }
  def maximum_page_size
  end

  # How many to return at once.
  sig { params(value: Integer).void }
  def maximum_page_size=(value)
  end

  # How many to return at once.
  sig { void }
  def clear_maximum_page_size
  end

  # Token to get the next page of results.
  sig { returns(String) }
  def next_page_token
  end

  # Token to get the next page of results.
  sig { params(value: String).void }
  def next_page_token=(value)
  end

  # Token to get the next page of results.
  sig { void }
  def clear_next_page_token
  end

  # Query to filter schedules.
  sig { returns(String) }
  def query
  end

  # Query to filter schedules.
  sig { params(value: String).void }
  def query=(value)
  end

  # Query to filter schedules.
  sig { void }
  def clear_query
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ListSchedulesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ListSchedulesResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListSchedulesResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ListSchedulesResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListSchedulesResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      schedules: T.nilable(T::Array[T.nilable(Temporalio::Api::Schedule::V1::ScheduleListEntry)]),
      next_page_token: T.nilable(String)
    ).void
  end
  def initialize(
    schedules: [],
    next_page_token: ""
  )
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::Schedule::V1::ScheduleListEntry)]) }
  def schedules
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def schedules=(value)
  end

  sig { void }
  def clear_schedules
  end

  sig { returns(String) }
  def next_page_token
  end

  sig { params(value: String).void }
  def next_page_token=(value)
  end

  sig { void }
  def clear_next_page_token
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      task_queue: T.nilable(String),
      add_new_build_id_in_new_default_set: T.nilable(String),
      add_new_compatible_build_id: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest::AddNewCompatibleVersion),
      promote_set_by_build_id: T.nilable(String),
      promote_build_id_within_set: T.nilable(String),
      merge_sets: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest::MergeSets)
    ).void
  end
  def initialize(
    namespace: "",
    task_queue: "",
    add_new_build_id_in_new_default_set: "",
    add_new_compatible_build_id: nil,
    promote_set_by_build_id: "",
    promote_build_id_within_set: "",
    merge_sets: nil
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  # Must be set, the task queue to apply changes to. Because all workers on a given task queue
# must have the same set of workflow & activity implementations, there is no reason to specify
# a task queue type here.
  sig { returns(String) }
  def task_queue
  end

  # Must be set, the task queue to apply changes to. Because all workers on a given task queue
# must have the same set of workflow & activity implementations, there is no reason to specify
# a task queue type here.
  sig { params(value: String).void }
  def task_queue=(value)
  end

  # Must be set, the task queue to apply changes to. Because all workers on a given task queue
# must have the same set of workflow & activity implementations, there is no reason to specify
# a task queue type here.
  sig { void }
  def clear_task_queue
  end

  # A new build id. This operation will create a new set which will be the new overall
# default version for the queue, with this id as its only member. This new set is
# incompatible with all previous sets/versions.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: In makes perfect sense here. --)
  sig { returns(String) }
  def add_new_build_id_in_new_default_set
  end

  # A new build id. This operation will create a new set which will be the new overall
# default version for the queue, with this id as its only member. This new set is
# incompatible with all previous sets/versions.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: In makes perfect sense here. --)
  sig { params(value: String).void }
  def add_new_build_id_in_new_default_set=(value)
  end

  # A new build id. This operation will create a new set which will be the new overall
# default version for the queue, with this id as its only member. This new set is
# incompatible with all previous sets/versions.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: In makes perfect sense here. --)
  sig { void }
  def clear_add_new_build_id_in_new_default_set
  end

  # Adds a new id to an existing compatible set, see sub-message definition for more.
  sig { returns(T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest::AddNewCompatibleVersion)) }
  def add_new_compatible_build_id
  end

  # Adds a new id to an existing compatible set, see sub-message definition for more.
  sig { params(value: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest::AddNewCompatibleVersion)).void }
  def add_new_compatible_build_id=(value)
  end

  # Adds a new id to an existing compatible set, see sub-message definition for more.
  sig { void }
  def clear_add_new_compatible_build_id
  end

  # Promote an existing set to be the current default (if it isn't already) by targeting
# an existing build id within it. This field's value is the extant build id.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: Names are hard. --)
  sig { returns(String) }
  def promote_set_by_build_id
  end

  # Promote an existing set to be the current default (if it isn't already) by targeting
# an existing build id within it. This field's value is the extant build id.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: Names are hard. --)
  sig { params(value: String).void }
  def promote_set_by_build_id=(value)
  end

  # Promote an existing set to be the current default (if it isn't already) by targeting
# an existing build id within it. This field's value is the extant build id.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: Names are hard. --)
  sig { void }
  def clear_promote_set_by_build_id
  end

  # Promote an existing build id within some set to be the current default for that set.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: Within makes perfect sense here. --)
  sig { returns(String) }
  def promote_build_id_within_set
  end

  # Promote an existing build id within some set to be the current default for that set.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: Within makes perfect sense here. --)
  sig { params(value: String).void }
  def promote_build_id_within_set=(value)
  end

  # Promote an existing build id within some set to be the current default for that set.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: Within makes perfect sense here. --)
  sig { void }
  def clear_promote_build_id_within_set
  end

  # Merge two existing sets together, thus declaring all build IDs in both sets compatible
# with one another. The primary set's default will become the default for the merged set.
# This is useful if you've accidentally declared a new ID as incompatible you meant to
# declare as compatible. The unusual case of incomplete replication during failover could
# also result in a split set, which this operation can repair.
  sig { returns(T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest::MergeSets)) }
  def merge_sets
  end

  # Merge two existing sets together, thus declaring all build IDs in both sets compatible
# with one another. The primary set's default will become the default for the merged set.
# This is useful if you've accidentally declared a new ID as incompatible you meant to
# declare as compatible. The unusual case of incomplete replication during failover could
# also result in a split set, which this operation can repair.
  sig { params(value: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest::MergeSets)).void }
  def merge_sets=(value)
  end

  # Merge two existing sets together, thus declaring all build IDs in both sets compatible
# with one another. The primary set's default will become the default for the merged set.
# This is useful if you've accidentally declared a new ID as incompatible you meant to
# declare as compatible. The unusual case of incomplete replication during failover could
# also result in a split set, which this operation can repair.
  sig { void }
  def clear_merge_sets
  end

  sig { returns(T.nilable(Symbol)) }
  def operation
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::GetWorkerBuildIdCompatibilityRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::GetWorkerBuildIdCompatibilityRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetWorkerBuildIdCompatibilityRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::GetWorkerBuildIdCompatibilityRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetWorkerBuildIdCompatibilityRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      task_queue: T.nilable(String),
      max_sets: T.nilable(Integer)
    ).void
  end
  def initialize(
    namespace: "",
    task_queue: "",
    max_sets: 0
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  # Must be set, the task queue to interrogate about worker id compatibility.
  sig { returns(String) }
  def task_queue
  end

  # Must be set, the task queue to interrogate about worker id compatibility.
  sig { params(value: String).void }
  def task_queue=(value)
  end

  # Must be set, the task queue to interrogate about worker id compatibility.
  sig { void }
  def clear_task_queue
  end

  # Limits how many compatible sets will be returned. Specify 1 to only return the current
# default major version set. 0 returns all sets.
  sig { returns(Integer) }
  def max_sets
  end

  # Limits how many compatible sets will be returned. Specify 1 to only return the current
# default major version set. 0 returns all sets.
  sig { params(value: Integer).void }
  def max_sets=(value)
  end

  # Limits how many compatible sets will be returned. Specify 1 to only return the current
# default major version set. 0 returns all sets.
  sig { void }
  def clear_max_sets
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::GetWorkerBuildIdCompatibilityResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::GetWorkerBuildIdCompatibilityResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetWorkerBuildIdCompatibilityResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::GetWorkerBuildIdCompatibilityResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetWorkerBuildIdCompatibilityResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      major_version_sets: T.nilable(T::Array[T.nilable(Temporalio::Api::TaskQueue::V1::CompatibleVersionSet)])
    ).void
  end
  def initialize(
    major_version_sets: []
  )
  end

  # Major version sets, in order from oldest to newest. The last element of the list will always
# be the current default major version. IE: New workflows will target the most recent version
# in that version set.
#
# There may be fewer sets returned than exist, if the request chose to limit this response.
  sig { returns(T::Array[T.nilable(Temporalio::Api::TaskQueue::V1::CompatibleVersionSet)]) }
  def major_version_sets
  end

  # Major version sets, in order from oldest to newest. The last element of the list will always
# be the current default major version. IE: New workflows will target the most recent version
# in that version set.
#
# There may be fewer sets returned than exist, if the request chose to limit this response.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def major_version_sets=(value)
  end

  # Major version sets, in order from oldest to newest. The last element of the list will always
# be the current default major version. IE: New workflows will target the most recent version
# in that version set.
#
# There may be fewer sets returned than exist, if the request chose to limit this response.
  sig { void }
  def clear_major_version_sets
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# (-- api-linter: core::0134::request-mask-required=disabled
#     aip.dev/not-precedent: UpdateNamespace RPC doesn't follow Google API format. --)
# (-- api-linter: core::0134::request-resource-required=disabled
#     aip.dev/not-precedent: GetWorkerBuildIdCompatibilityRequest RPC doesn't follow Google API format. --)
class Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      task_queue: T.nilable(String),
      conflict_token: T.nilable(String),
      insert_assignment_rule: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::InsertBuildIdAssignmentRule),
      replace_assignment_rule: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::ReplaceBuildIdAssignmentRule),
      delete_assignment_rule: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::DeleteBuildIdAssignmentRule),
      add_compatible_redirect_rule: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::AddCompatibleBuildIdRedirectRule),
      replace_compatible_redirect_rule: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::ReplaceCompatibleBuildIdRedirectRule),
      delete_compatible_redirect_rule: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::DeleteCompatibleBuildIdRedirectRule),
      commit_build_id: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::CommitBuildId)
    ).void
  end
  def initialize(
    namespace: "",
    task_queue: "",
    conflict_token: "",
    insert_assignment_rule: nil,
    replace_assignment_rule: nil,
    delete_assignment_rule: nil,
    add_compatible_redirect_rule: nil,
    replace_compatible_redirect_rule: nil,
    delete_compatible_redirect_rule: nil,
    commit_build_id: nil
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def task_queue
  end

  sig { params(value: String).void }
  def task_queue=(value)
  end

  sig { void }
  def clear_task_queue
  end

  # A valid conflict_token can be taken from the previous
# ListWorkerVersioningRulesResponse or UpdateWorkerVersioningRulesResponse.
# An invalid token will cause this request to fail, ensuring that if the rules
# for this Task Queue have been modified between the previous and current
# operation, the request will fail instead of causing an unpredictable mutation.
  sig { returns(String) }
  def conflict_token
  end

  # A valid conflict_token can be taken from the previous
# ListWorkerVersioningRulesResponse or UpdateWorkerVersioningRulesResponse.
# An invalid token will cause this request to fail, ensuring that if the rules
# for this Task Queue have been modified between the previous and current
# operation, the request will fail instead of causing an unpredictable mutation.
  sig { params(value: String).void }
  def conflict_token=(value)
  end

  # A valid conflict_token can be taken from the previous
# ListWorkerVersioningRulesResponse or UpdateWorkerVersioningRulesResponse.
# An invalid token will cause this request to fail, ensuring that if the rules
# for this Task Queue have been modified between the previous and current
# operation, the request will fail instead of causing an unpredictable mutation.
  sig { void }
  def clear_conflict_token
  end

  sig { returns(T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::InsertBuildIdAssignmentRule)) }
  def insert_assignment_rule
  end

  sig { params(value: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::InsertBuildIdAssignmentRule)).void }
  def insert_assignment_rule=(value)
  end

  sig { void }
  def clear_insert_assignment_rule
  end

  sig { returns(T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::ReplaceBuildIdAssignmentRule)) }
  def replace_assignment_rule
  end

  sig { params(value: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::ReplaceBuildIdAssignmentRule)).void }
  def replace_assignment_rule=(value)
  end

  sig { void }
  def clear_replace_assignment_rule
  end

  sig { returns(T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::DeleteBuildIdAssignmentRule)) }
  def delete_assignment_rule
  end

  sig { params(value: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::DeleteBuildIdAssignmentRule)).void }
  def delete_assignment_rule=(value)
  end

  sig { void }
  def clear_delete_assignment_rule
  end

  sig { returns(T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::AddCompatibleBuildIdRedirectRule)) }
  def add_compatible_redirect_rule
  end

  sig { params(value: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::AddCompatibleBuildIdRedirectRule)).void }
  def add_compatible_redirect_rule=(value)
  end

  sig { void }
  def clear_add_compatible_redirect_rule
  end

  sig { returns(T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::ReplaceCompatibleBuildIdRedirectRule)) }
  def replace_compatible_redirect_rule
  end

  sig { params(value: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::ReplaceCompatibleBuildIdRedirectRule)).void }
  def replace_compatible_redirect_rule=(value)
  end

  sig { void }
  def clear_replace_compatible_redirect_rule
  end

  sig { returns(T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::DeleteCompatibleBuildIdRedirectRule)) }
  def delete_compatible_redirect_rule
  end

  sig { params(value: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::DeleteCompatibleBuildIdRedirectRule)).void }
  def delete_compatible_redirect_rule=(value)
  end

  sig { void }
  def clear_delete_compatible_redirect_rule
  end

  sig { returns(T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::CommitBuildId)) }
  def commit_build_id
  end

  sig { params(value: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::CommitBuildId)).void }
  def commit_build_id=(value)
  end

  sig { void }
  def clear_commit_build_id
  end

  sig { returns(T.nilable(Symbol)) }
  def operation
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      assignment_rules: T.nilable(T::Array[T.nilable(Temporalio::Api::TaskQueue::V1::TimestampedBuildIdAssignmentRule)]),
      compatible_redirect_rules: T.nilable(T::Array[T.nilable(Temporalio::Api::TaskQueue::V1::TimestampedCompatibleBuildIdRedirectRule)]),
      conflict_token: T.nilable(String)
    ).void
  end
  def initialize(
    assignment_rules: [],
    compatible_redirect_rules: [],
    conflict_token: ""
  )
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::TaskQueue::V1::TimestampedBuildIdAssignmentRule)]) }
  def assignment_rules
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def assignment_rules=(value)
  end

  sig { void }
  def clear_assignment_rules
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::TaskQueue::V1::TimestampedCompatibleBuildIdRedirectRule)]) }
  def compatible_redirect_rules
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def compatible_redirect_rules=(value)
  end

  sig { void }
  def clear_compatible_redirect_rules
  end

  # This value can be passed back to UpdateWorkerVersioningRulesRequest to
# ensure that the rules were not modified between the two updates, which
# could lead to lost updates and other confusion.
  sig { returns(String) }
  def conflict_token
  end

  # This value can be passed back to UpdateWorkerVersioningRulesRequest to
# ensure that the rules were not modified between the two updates, which
# could lead to lost updates and other confusion.
  sig { params(value: String).void }
  def conflict_token=(value)
  end

  # This value can be passed back to UpdateWorkerVersioningRulesRequest to
# ensure that the rules were not modified between the two updates, which
# could lead to lost updates and other confusion.
  sig { void }
  def clear_conflict_token
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::GetWorkerVersioningRulesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::GetWorkerVersioningRulesRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetWorkerVersioningRulesRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::GetWorkerVersioningRulesRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetWorkerVersioningRulesRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      task_queue: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    task_queue: ""
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def task_queue
  end

  sig { params(value: String).void }
  def task_queue=(value)
  end

  sig { void }
  def clear_task_queue
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::GetWorkerVersioningRulesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::GetWorkerVersioningRulesResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetWorkerVersioningRulesResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::GetWorkerVersioningRulesResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetWorkerVersioningRulesResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      assignment_rules: T.nilable(T::Array[T.nilable(Temporalio::Api::TaskQueue::V1::TimestampedBuildIdAssignmentRule)]),
      compatible_redirect_rules: T.nilable(T::Array[T.nilable(Temporalio::Api::TaskQueue::V1::TimestampedCompatibleBuildIdRedirectRule)]),
      conflict_token: T.nilable(String)
    ).void
  end
  def initialize(
    assignment_rules: [],
    compatible_redirect_rules: [],
    conflict_token: ""
  )
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::TaskQueue::V1::TimestampedBuildIdAssignmentRule)]) }
  def assignment_rules
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def assignment_rules=(value)
  end

  sig { void }
  def clear_assignment_rules
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::TaskQueue::V1::TimestampedCompatibleBuildIdRedirectRule)]) }
  def compatible_redirect_rules
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def compatible_redirect_rules=(value)
  end

  sig { void }
  def clear_compatible_redirect_rules
  end

  # This value can be passed back to UpdateWorkerVersioningRulesRequest to
# ensure that the rules were not modified between this List and the Update,
# which could lead to lost updates and other confusion.
  sig { returns(String) }
  def conflict_token
  end

  # This value can be passed back to UpdateWorkerVersioningRulesRequest to
# ensure that the rules were not modified between this List and the Update,
# which could lead to lost updates and other confusion.
  sig { params(value: String).void }
  def conflict_token=(value)
  end

  # This value can be passed back to UpdateWorkerVersioningRulesRequest to
# ensure that the rules were not modified between this List and the Update,
# which could lead to lost updates and other confusion.
  sig { void }
  def clear_conflict_token
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Deprecated. Use `DescribeTaskQueue`.
class Temporalio::Api::WorkflowService::V1::GetWorkerTaskReachabilityRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::GetWorkerTaskReachabilityRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetWorkerTaskReachabilityRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::GetWorkerTaskReachabilityRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetWorkerTaskReachabilityRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      build_ids: T.nilable(T::Array[String]),
      task_queues: T.nilable(T::Array[String]),
      reachability: T.nilable(T.any(Symbol, String, Integer))
    ).void
  end
  def initialize(
    namespace: "",
    build_ids: [],
    task_queues: [],
    reachability: :TASK_REACHABILITY_UNSPECIFIED
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  # Build ids to retrieve reachability for. An empty string will be interpreted as an unversioned worker.
# The number of build ids that can be queried in a single API call is limited.
# Open source users can adjust this limit by setting the server's dynamic config value for
# `limit.reachabilityQueryBuildIds` with the caveat that this call can strain the visibility store.
  sig { returns(T::Array[String]) }
  def build_ids
  end

  # Build ids to retrieve reachability for. An empty string will be interpreted as an unversioned worker.
# The number of build ids that can be queried in a single API call is limited.
# Open source users can adjust this limit by setting the server's dynamic config value for
# `limit.reachabilityQueryBuildIds` with the caveat that this call can strain the visibility store.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def build_ids=(value)
  end

  # Build ids to retrieve reachability for. An empty string will be interpreted as an unversioned worker.
# The number of build ids that can be queried in a single API call is limited.
# Open source users can adjust this limit by setting the server's dynamic config value for
# `limit.reachabilityQueryBuildIds` with the caveat that this call can strain the visibility store.
  sig { void }
  def clear_build_ids
  end

  # Task queues to retrieve reachability for. Leave this empty to query for all task queues associated with given
# build ids in the namespace.
# Must specify at least one task queue if querying for an unversioned worker.
# The number of task queues that the server will fetch reachability information for is limited.
# See the `GetWorkerTaskReachabilityResponse` documentation for more information.
  sig { returns(T::Array[String]) }
  def task_queues
  end

  # Task queues to retrieve reachability for. Leave this empty to query for all task queues associated with given
# build ids in the namespace.
# Must specify at least one task queue if querying for an unversioned worker.
# The number of task queues that the server will fetch reachability information for is limited.
# See the `GetWorkerTaskReachabilityResponse` documentation for more information.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def task_queues=(value)
  end

  # Task queues to retrieve reachability for. Leave this empty to query for all task queues associated with given
# build ids in the namespace.
# Must specify at least one task queue if querying for an unversioned worker.
# The number of task queues that the server will fetch reachability information for is limited.
# See the `GetWorkerTaskReachabilityResponse` documentation for more information.
  sig { void }
  def clear_task_queues
  end

  # Type of reachability to query for.
# `TASK_REACHABILITY_NEW_WORKFLOWS` is always returned in the response.
# Use `TASK_REACHABILITY_EXISTING_WORKFLOWS` if your application needs to respond to queries on closed workflows.
# Otherwise, use `TASK_REACHABILITY_OPEN_WORKFLOWS`. Default is `TASK_REACHABILITY_EXISTING_WORKFLOWS` if left
# unspecified.
# See the TaskReachability docstring for information about each enum variant.
  sig { returns(T.any(Symbol, Integer)) }
  def reachability
  end

  # Type of reachability to query for.
# `TASK_REACHABILITY_NEW_WORKFLOWS` is always returned in the response.
# Use `TASK_REACHABILITY_EXISTING_WORKFLOWS` if your application needs to respond to queries on closed workflows.
# Otherwise, use `TASK_REACHABILITY_OPEN_WORKFLOWS`. Default is `TASK_REACHABILITY_EXISTING_WORKFLOWS` if left
# unspecified.
# See the TaskReachability docstring for information about each enum variant.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def reachability=(value)
  end

  # Type of reachability to query for.
# `TASK_REACHABILITY_NEW_WORKFLOWS` is always returned in the response.
# Use `TASK_REACHABILITY_EXISTING_WORKFLOWS` if your application needs to respond to queries on closed workflows.
# Otherwise, use `TASK_REACHABILITY_OPEN_WORKFLOWS`. Default is `TASK_REACHABILITY_EXISTING_WORKFLOWS` if left
# unspecified.
# See the TaskReachability docstring for information about each enum variant.
  sig { void }
  def clear_reachability
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Deprecated. Use `DescribeTaskQueue`.
class Temporalio::Api::WorkflowService::V1::GetWorkerTaskReachabilityResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::GetWorkerTaskReachabilityResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetWorkerTaskReachabilityResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::GetWorkerTaskReachabilityResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetWorkerTaskReachabilityResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      build_id_reachability: T.nilable(T::Array[T.nilable(Temporalio::Api::TaskQueue::V1::BuildIdReachability)])
    ).void
  end
  def initialize(
    build_id_reachability: []
  )
  end

  # Task reachability, broken down by build id and then task queue.
# When requesting a large number of task queues or all task queues associated with the given build ids in a
# namespace, all task queues will be listed in the response but some of them may not contain reachability
# information due to a server enforced limit. When reaching the limit, task queues that reachability information
# could not be retrieved for will be marked with a single TASK_REACHABILITY_UNSPECIFIED entry. The caller may issue
# another call to get the reachability for those task queues.
#
# Open source users can adjust this limit by setting the server's dynamic config value for
# `limit.reachabilityTaskQueueScan` with the caveat that this call can strain the visibility store.
  sig { returns(T::Array[T.nilable(Temporalio::Api::TaskQueue::V1::BuildIdReachability)]) }
  def build_id_reachability
  end

  # Task reachability, broken down by build id and then task queue.
# When requesting a large number of task queues or all task queues associated with the given build ids in a
# namespace, all task queues will be listed in the response but some of them may not contain reachability
# information due to a server enforced limit. When reaching the limit, task queues that reachability information
# could not be retrieved for will be marked with a single TASK_REACHABILITY_UNSPECIFIED entry. The caller may issue
# another call to get the reachability for those task queues.
#
# Open source users can adjust this limit by setting the server's dynamic config value for
# `limit.reachabilityTaskQueueScan` with the caveat that this call can strain the visibility store.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def build_id_reachability=(value)
  end

  # Task reachability, broken down by build id and then task queue.
# When requesting a large number of task queues or all task queues associated with the given build ids in a
# namespace, all task queues will be listed in the response but some of them may not contain reachability
# information due to a server enforced limit. When reaching the limit, task queues that reachability information
# could not be retrieved for will be marked with a single TASK_REACHABILITY_UNSPECIFIED entry. The caller may issue
# another call to get the reachability for those task queues.
#
# Open source users can adjust this limit by setting the server's dynamic config value for
# `limit.reachabilityTaskQueueScan` with the caveat that this call can strain the visibility store.
  sig { void }
  def clear_build_id_reachability
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# (-- api-linter: core::0134=disabled
#     aip.dev/not-precedent: Update RPCs don't follow Google API format. --)
class Temporalio::Api::WorkflowService::V1::UpdateWorkflowExecutionRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkflowExecutionRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkflowExecutionRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkflowExecutionRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkflowExecutionRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      first_execution_run_id: T.nilable(String),
      wait_policy: T.nilable(Temporalio::Api::Update::V1::WaitPolicy),
      request: T.nilable(Temporalio::Api::Update::V1::Request)
    ).void
  end
  def initialize(
    namespace: "",
    workflow_execution: nil,
    first_execution_run_id: "",
    wait_policy: nil,
    request: nil
  )
  end

  # The namespace name of the target workflow
  sig { returns(String) }
  def namespace
  end

  # The namespace name of the target workflow
  sig { params(value: String).void }
  def namespace=(value)
  end

  # The namespace name of the target workflow
  sig { void }
  def clear_namespace
  end

  # The target workflow id and (optionally) a specific run thereof
# (-- api-linter: core::0203::optional=disabled
#     aip.dev/not-precedent: false positive triggered by the word "optional" --)
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  # The target workflow id and (optionally) a specific run thereof
# (-- api-linter: core::0203::optional=disabled
#     aip.dev/not-precedent: false positive triggered by the word "optional" --)
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  # The target workflow id and (optionally) a specific run thereof
# (-- api-linter: core::0203::optional=disabled
#     aip.dev/not-precedent: false positive triggered by the word "optional" --)
  sig { void }
  def clear_workflow_execution
  end

  # If set, this call will error if the most recent (if no run id is set on
# `workflow_execution`), or specified (if it is) workflow execution is not
# part of the same execution chain as this id.
  sig { returns(String) }
  def first_execution_run_id
  end

  # If set, this call will error if the most recent (if no run id is set on
# `workflow_execution`), or specified (if it is) workflow execution is not
# part of the same execution chain as this id.
  sig { params(value: String).void }
  def first_execution_run_id=(value)
  end

  # If set, this call will error if the most recent (if no run id is set on
# `workflow_execution`), or specified (if it is) workflow execution is not
# part of the same execution chain as this id.
  sig { void }
  def clear_first_execution_run_id
  end

  # Describes when this request should return - basically whether the
# update is synchronous, asynchronous, or somewhere in between.
  sig { returns(T.nilable(Temporalio::Api::Update::V1::WaitPolicy)) }
  def wait_policy
  end

  # Describes when this request should return - basically whether the
# update is synchronous, asynchronous, or somewhere in between.
  sig { params(value: T.nilable(Temporalio::Api::Update::V1::WaitPolicy)).void }
  def wait_policy=(value)
  end

  # Describes when this request should return - basically whether the
# update is synchronous, asynchronous, or somewhere in between.
  sig { void }
  def clear_wait_policy
  end

  # The request information that will be delivered all the way down to the
# workflow execution.
  sig { returns(T.nilable(Temporalio::Api::Update::V1::Request)) }
  def request
  end

  # The request information that will be delivered all the way down to the
# workflow execution.
  sig { params(value: T.nilable(Temporalio::Api::Update::V1::Request)).void }
  def request=(value)
  end

  # The request information that will be delivered all the way down to the
# workflow execution.
  sig { void }
  def clear_request
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkflowExecutionResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkflowExecutionResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkflowExecutionResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkflowExecutionResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkflowExecutionResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      update_ref: T.nilable(Temporalio::Api::Update::V1::UpdateRef),
      outcome: T.nilable(Temporalio::Api::Update::V1::Outcome),
      stage: T.nilable(T.any(Symbol, String, Integer))
    ).void
  end
  def initialize(
    update_ref: nil,
    outcome: nil,
    stage: :UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_UNSPECIFIED
  )
  end

  # Enough information for subsequent poll calls if needed. Never null.
  sig { returns(T.nilable(Temporalio::Api::Update::V1::UpdateRef)) }
  def update_ref
  end

  # Enough information for subsequent poll calls if needed. Never null.
  sig { params(value: T.nilable(Temporalio::Api::Update::V1::UpdateRef)).void }
  def update_ref=(value)
  end

  # Enough information for subsequent poll calls if needed. Never null.
  sig { void }
  def clear_update_ref
  end

  # The outcome of the update if and only if the workflow execution update
# has completed. If this response is being returned before the update has
# completed then this field will not be set.
  sig { returns(T.nilable(Temporalio::Api::Update::V1::Outcome)) }
  def outcome
  end

  # The outcome of the update if and only if the workflow execution update
# has completed. If this response is being returned before the update has
# completed then this field will not be set.
  sig { params(value: T.nilable(Temporalio::Api::Update::V1::Outcome)).void }
  def outcome=(value)
  end

  # The outcome of the update if and only if the workflow execution update
# has completed. If this response is being returned before the update has
# completed then this field will not be set.
  sig { void }
  def clear_outcome
  end

  # The most advanced lifecycle stage that the Update is known to have
# reached, where lifecycle stages are ordered
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_UNSPECIFIED <
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ADMITTED <
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ACCEPTED <
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_COMPLETED.
# UNSPECIFIED will be returned if and only if the server's maximum wait
# time was reached before the Update reached the stage specified in the
# request WaitPolicy, and before the context deadline expired; clients may
# may then retry the call as needed.
  sig { returns(T.any(Symbol, Integer)) }
  def stage
  end

  # The most advanced lifecycle stage that the Update is known to have
# reached, where lifecycle stages are ordered
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_UNSPECIFIED <
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ADMITTED <
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ACCEPTED <
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_COMPLETED.
# UNSPECIFIED will be returned if and only if the server's maximum wait
# time was reached before the Update reached the stage specified in the
# request WaitPolicy, and before the context deadline expired; clients may
# may then retry the call as needed.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def stage=(value)
  end

  # The most advanced lifecycle stage that the Update is known to have
# reached, where lifecycle stages are ordered
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_UNSPECIFIED <
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ADMITTED <
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ACCEPTED <
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_COMPLETED.
# UNSPECIFIED will be returned if and only if the server's maximum wait
# time was reached before the Update reached the stage specified in the
# request WaitPolicy, and before the context deadline expired; clients may
# may then retry the call as needed.
  sig { void }
  def clear_stage
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::StartBatchOperationRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::StartBatchOperationRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::StartBatchOperationRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::StartBatchOperationRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::StartBatchOperationRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      visibility_query: T.nilable(String),
      job_id: T.nilable(String),
      reason: T.nilable(String),
      executions: T.nilable(T::Array[T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)]),
      max_operations_per_second: T.nilable(Float),
      termination_operation: T.nilable(Temporalio::Api::Batch::V1::BatchOperationTermination),
      signal_operation: T.nilable(Temporalio::Api::Batch::V1::BatchOperationSignal),
      cancellation_operation: T.nilable(Temporalio::Api::Batch::V1::BatchOperationCancellation),
      deletion_operation: T.nilable(Temporalio::Api::Batch::V1::BatchOperationDeletion),
      reset_operation: T.nilable(Temporalio::Api::Batch::V1::BatchOperationReset)
    ).void
  end
  def initialize(
    namespace: "",
    visibility_query: "",
    job_id: "",
    reason: "",
    executions: [],
    max_operations_per_second: 0.0,
    termination_operation: nil,
    signal_operation: nil,
    cancellation_operation: nil,
    deletion_operation: nil,
    reset_operation: nil
  )
  end

  # Namespace that contains the batch operation
  sig { returns(String) }
  def namespace
  end

  # Namespace that contains the batch operation
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace that contains the batch operation
  sig { void }
  def clear_namespace
  end

  # Visibility query defines the the group of workflow to apply the batch operation
# This field and `executions` are mutually exclusive
  sig { returns(String) }
  def visibility_query
  end

  # Visibility query defines the the group of workflow to apply the batch operation
# This field and `executions` are mutually exclusive
  sig { params(value: String).void }
  def visibility_query=(value)
  end

  # Visibility query defines the the group of workflow to apply the batch operation
# This field and `executions` are mutually exclusive
  sig { void }
  def clear_visibility_query
  end

  # Job ID defines the unique ID for the batch job
  sig { returns(String) }
  def job_id
  end

  # Job ID defines the unique ID for the batch job
  sig { params(value: String).void }
  def job_id=(value)
  end

  # Job ID defines the unique ID for the batch job
  sig { void }
  def clear_job_id
  end

  # Reason to perform the batch operation
  sig { returns(String) }
  def reason
  end

  # Reason to perform the batch operation
  sig { params(value: String).void }
  def reason=(value)
  end

  # Reason to perform the batch operation
  sig { void }
  def clear_reason
  end

  # Executions to apply the batch operation
# This field and `visibility_query` are mutually exclusive
  sig { returns(T::Array[T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)]) }
  def executions
  end

  # Executions to apply the batch operation
# This field and `visibility_query` are mutually exclusive
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def executions=(value)
  end

  # Executions to apply the batch operation
# This field and `visibility_query` are mutually exclusive
  sig { void }
  def clear_executions
  end

  # Limit for the number of operations processed per second within this batch.
# Its purpose is to reduce the stress on the system caused by batch operations, which helps to prevent system
# overload and minimize potential delays in executing ongoing tasks for user workers.
# Note that when no explicit limit is provided, the server will operate according to its limit defined by the
# dynamic configuration key `worker.batcherRPS`. This also applies if the value in this field exceeds the
# server's configured limit.
  sig { returns(Float) }
  def max_operations_per_second
  end

  # Limit for the number of operations processed per second within this batch.
# Its purpose is to reduce the stress on the system caused by batch operations, which helps to prevent system
# overload and minimize potential delays in executing ongoing tasks for user workers.
# Note that when no explicit limit is provided, the server will operate according to its limit defined by the
# dynamic configuration key `worker.batcherRPS`. This also applies if the value in this field exceeds the
# server's configured limit.
  sig { params(value: Float).void }
  def max_operations_per_second=(value)
  end

  # Limit for the number of operations processed per second within this batch.
# Its purpose is to reduce the stress on the system caused by batch operations, which helps to prevent system
# overload and minimize potential delays in executing ongoing tasks for user workers.
# Note that when no explicit limit is provided, the server will operate according to its limit defined by the
# dynamic configuration key `worker.batcherRPS`. This also applies if the value in this field exceeds the
# server's configured limit.
  sig { void }
  def clear_max_operations_per_second
  end

  sig { returns(T.nilable(Temporalio::Api::Batch::V1::BatchOperationTermination)) }
  def termination_operation
  end

  sig { params(value: T.nilable(Temporalio::Api::Batch::V1::BatchOperationTermination)).void }
  def termination_operation=(value)
  end

  sig { void }
  def clear_termination_operation
  end

  sig { returns(T.nilable(Temporalio::Api::Batch::V1::BatchOperationSignal)) }
  def signal_operation
  end

  sig { params(value: T.nilable(Temporalio::Api::Batch::V1::BatchOperationSignal)).void }
  def signal_operation=(value)
  end

  sig { void }
  def clear_signal_operation
  end

  sig { returns(T.nilable(Temporalio::Api::Batch::V1::BatchOperationCancellation)) }
  def cancellation_operation
  end

  sig { params(value: T.nilable(Temporalio::Api::Batch::V1::BatchOperationCancellation)).void }
  def cancellation_operation=(value)
  end

  sig { void }
  def clear_cancellation_operation
  end

  sig { returns(T.nilable(Temporalio::Api::Batch::V1::BatchOperationDeletion)) }
  def deletion_operation
  end

  sig { params(value: T.nilable(Temporalio::Api::Batch::V1::BatchOperationDeletion)).void }
  def deletion_operation=(value)
  end

  sig { void }
  def clear_deletion_operation
  end

  sig { returns(T.nilable(Temporalio::Api::Batch::V1::BatchOperationReset)) }
  def reset_operation
  end

  sig { params(value: T.nilable(Temporalio::Api::Batch::V1::BatchOperationReset)).void }
  def reset_operation=(value)
  end

  sig { void }
  def clear_reset_operation
  end

  sig { returns(T.nilable(Symbol)) }
  def operation
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::StartBatchOperationResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::StartBatchOperationResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::StartBatchOperationResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::StartBatchOperationResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::StartBatchOperationResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::StopBatchOperationRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::StopBatchOperationRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::StopBatchOperationRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::StopBatchOperationRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::StopBatchOperationRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      job_id: T.nilable(String),
      reason: T.nilable(String),
      identity: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    job_id: "",
    reason: "",
    identity: ""
  )
  end

  # Namespace that contains the batch operation
  sig { returns(String) }
  def namespace
  end

  # Namespace that contains the batch operation
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace that contains the batch operation
  sig { void }
  def clear_namespace
  end

  # Batch job id
  sig { returns(String) }
  def job_id
  end

  # Batch job id
  sig { params(value: String).void }
  def job_id=(value)
  end

  # Batch job id
  sig { void }
  def clear_job_id
  end

  # Reason to stop a batch operation
  sig { returns(String) }
  def reason
  end

  # Reason to stop a batch operation
  sig { params(value: String).void }
  def reason=(value)
  end

  # Reason to stop a batch operation
  sig { void }
  def clear_reason
  end

  # Identity of the operator
  sig { returns(String) }
  def identity
  end

  # Identity of the operator
  sig { params(value: String).void }
  def identity=(value)
  end

  # Identity of the operator
  sig { void }
  def clear_identity
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::StopBatchOperationResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::StopBatchOperationResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::StopBatchOperationResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::StopBatchOperationResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::StopBatchOperationResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::DescribeBatchOperationRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::DescribeBatchOperationRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DescribeBatchOperationRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::DescribeBatchOperationRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DescribeBatchOperationRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      job_id: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    job_id: ""
  )
  end

  # Namespace that contains the batch operation
  sig { returns(String) }
  def namespace
  end

  # Namespace that contains the batch operation
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace that contains the batch operation
  sig { void }
  def clear_namespace
  end

  # Batch job id
  sig { returns(String) }
  def job_id
  end

  # Batch job id
  sig { params(value: String).void }
  def job_id=(value)
  end

  # Batch job id
  sig { void }
  def clear_job_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::DescribeBatchOperationResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::DescribeBatchOperationResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DescribeBatchOperationResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::DescribeBatchOperationResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::DescribeBatchOperationResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      operation_type: T.nilable(T.any(Symbol, String, Integer)),
      job_id: T.nilable(String),
      state: T.nilable(T.any(Symbol, String, Integer)),
      start_time: T.nilable(Google::Protobuf::Timestamp),
      close_time: T.nilable(Google::Protobuf::Timestamp),
      total_operation_count: T.nilable(Integer),
      complete_operation_count: T.nilable(Integer),
      failure_operation_count: T.nilable(Integer),
      identity: T.nilable(String),
      reason: T.nilable(String)
    ).void
  end
  def initialize(
    operation_type: :BATCH_OPERATION_TYPE_UNSPECIFIED,
    job_id: "",
    state: :BATCH_OPERATION_STATE_UNSPECIFIED,
    start_time: nil,
    close_time: nil,
    total_operation_count: 0,
    complete_operation_count: 0,
    failure_operation_count: 0,
    identity: "",
    reason: ""
  )
  end

  # Batch operation type
  sig { returns(T.any(Symbol, Integer)) }
  def operation_type
  end

  # Batch operation type
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def operation_type=(value)
  end

  # Batch operation type
  sig { void }
  def clear_operation_type
  end

  # Batch job ID
  sig { returns(String) }
  def job_id
  end

  # Batch job ID
  sig { params(value: String).void }
  def job_id=(value)
  end

  # Batch job ID
  sig { void }
  def clear_job_id
  end

  # Batch operation state
  sig { returns(T.any(Symbol, Integer)) }
  def state
  end

  # Batch operation state
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def state=(value)
  end

  # Batch operation state
  sig { void }
  def clear_state
  end

  # Batch operation start time
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def start_time
  end

  # Batch operation start time
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def start_time=(value)
  end

  # Batch operation start time
  sig { void }
  def clear_start_time
  end

  # Batch operation close time
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def close_time
  end

  # Batch operation close time
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def close_time=(value)
  end

  # Batch operation close time
  sig { void }
  def clear_close_time
  end

  # Total operation count
  sig { returns(Integer) }
  def total_operation_count
  end

  # Total operation count
  sig { params(value: Integer).void }
  def total_operation_count=(value)
  end

  # Total operation count
  sig { void }
  def clear_total_operation_count
  end

  # Complete operation count
  sig { returns(Integer) }
  def complete_operation_count
  end

  # Complete operation count
  sig { params(value: Integer).void }
  def complete_operation_count=(value)
  end

  # Complete operation count
  sig { void }
  def clear_complete_operation_count
  end

  # Failure operation count
  sig { returns(Integer) }
  def failure_operation_count
  end

  # Failure operation count
  sig { params(value: Integer).void }
  def failure_operation_count=(value)
  end

  # Failure operation count
  sig { void }
  def clear_failure_operation_count
  end

  # Identity indicates the operator identity
  sig { returns(String) }
  def identity
  end

  # Identity indicates the operator identity
  sig { params(value: String).void }
  def identity=(value)
  end

  # Identity indicates the operator identity
  sig { void }
  def clear_identity
  end

  # Reason indicates the reason to stop a operation
  sig { returns(String) }
  def reason
  end

  # Reason indicates the reason to stop a operation
  sig { params(value: String).void }
  def reason=(value)
  end

  # Reason indicates the reason to stop a operation
  sig { void }
  def clear_reason
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ListBatchOperationsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ListBatchOperationsRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListBatchOperationsRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ListBatchOperationsRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListBatchOperationsRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      page_size: T.nilable(Integer),
      next_page_token: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    page_size: 0,
    next_page_token: ""
  )
  end

  # Namespace that contains the batch operation
  sig { returns(String) }
  def namespace
  end

  # Namespace that contains the batch operation
  sig { params(value: String).void }
  def namespace=(value)
  end

  # Namespace that contains the batch operation
  sig { void }
  def clear_namespace
  end

  # List page size
  sig { returns(Integer) }
  def page_size
  end

  # List page size
  sig { params(value: Integer).void }
  def page_size=(value)
  end

  # List page size
  sig { void }
  def clear_page_size
  end

  # Next page token
  sig { returns(String) }
  def next_page_token
  end

  # Next page token
  sig { params(value: String).void }
  def next_page_token=(value)
  end

  # Next page token
  sig { void }
  def clear_next_page_token
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ListBatchOperationsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ListBatchOperationsResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListBatchOperationsResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ListBatchOperationsResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ListBatchOperationsResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      operation_info: T.nilable(T::Array[T.nilable(Temporalio::Api::Batch::V1::BatchOperationInfo)]),
      next_page_token: T.nilable(String)
    ).void
  end
  def initialize(
    operation_info: [],
    next_page_token: ""
  )
  end

  # BatchOperationInfo contains the basic info about batch operation
  sig { returns(T::Array[T.nilable(Temporalio::Api::Batch::V1::BatchOperationInfo)]) }
  def operation_info
  end

  # BatchOperationInfo contains the basic info about batch operation
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def operation_info=(value)
  end

  # BatchOperationInfo contains the basic info about batch operation
  sig { void }
  def clear_operation_info
  end

  sig { returns(String) }
  def next_page_token
  end

  sig { params(value: String).void }
  def next_page_token=(value)
  end

  sig { void }
  def clear_next_page_token
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::PollWorkflowExecutionUpdateRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::PollWorkflowExecutionUpdateRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::PollWorkflowExecutionUpdateRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::PollWorkflowExecutionUpdateRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::PollWorkflowExecutionUpdateRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      update_ref: T.nilable(Temporalio::Api::Update::V1::UpdateRef),
      identity: T.nilable(String),
      wait_policy: T.nilable(Temporalio::Api::Update::V1::WaitPolicy)
    ).void
  end
  def initialize(
    namespace: "",
    update_ref: nil,
    identity: "",
    wait_policy: nil
  )
  end

  # The namespace of the workflow execution to which the update was
# originally issued.
  sig { returns(String) }
  def namespace
  end

  # The namespace of the workflow execution to which the update was
# originally issued.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # The namespace of the workflow execution to which the update was
# originally issued.
  sig { void }
  def clear_namespace
  end

  # The update reference returned in the initial
# UpdateWorkflowExecutionResponse
  sig { returns(T.nilable(Temporalio::Api::Update::V1::UpdateRef)) }
  def update_ref
  end

  # The update reference returned in the initial
# UpdateWorkflowExecutionResponse
  sig { params(value: T.nilable(Temporalio::Api::Update::V1::UpdateRef)).void }
  def update_ref=(value)
  end

  # The update reference returned in the initial
# UpdateWorkflowExecutionResponse
  sig { void }
  def clear_update_ref
  end

  # The identity of the worker/client who is polling this update outcome
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client who is polling this update outcome
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client who is polling this update outcome
  sig { void }
  def clear_identity
  end

  # Describes when this poll request should return a response.
# Omit to request a non-blocking poll.
  sig { returns(T.nilable(Temporalio::Api::Update::V1::WaitPolicy)) }
  def wait_policy
  end

  # Describes when this poll request should return a response.
# Omit to request a non-blocking poll.
  sig { params(value: T.nilable(Temporalio::Api::Update::V1::WaitPolicy)).void }
  def wait_policy=(value)
  end

  # Describes when this poll request should return a response.
# Omit to request a non-blocking poll.
  sig { void }
  def clear_wait_policy
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::PollWorkflowExecutionUpdateResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::PollWorkflowExecutionUpdateResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::PollWorkflowExecutionUpdateResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::PollWorkflowExecutionUpdateResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::PollWorkflowExecutionUpdateResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      outcome: T.nilable(Temporalio::Api::Update::V1::Outcome),
      stage: T.nilable(T.any(Symbol, String, Integer)),
      update_ref: T.nilable(Temporalio::Api::Update::V1::UpdateRef)
    ).void
  end
  def initialize(
    outcome: nil,
    stage: :UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_UNSPECIFIED,
    update_ref: nil
  )
  end

  # The outcome of the update if and only if the update has completed. If
# this response is being returned before the update has completed (e.g. due
# to the specification of a wait policy that only waits on
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ACCEPTED) then this field will
# not be set.
  sig { returns(T.nilable(Temporalio::Api::Update::V1::Outcome)) }
  def outcome
  end

  # The outcome of the update if and only if the update has completed. If
# this response is being returned before the update has completed (e.g. due
# to the specification of a wait policy that only waits on
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ACCEPTED) then this field will
# not be set.
  sig { params(value: T.nilable(Temporalio::Api::Update::V1::Outcome)).void }
  def outcome=(value)
  end

  # The outcome of the update if and only if the update has completed. If
# this response is being returned before the update has completed (e.g. due
# to the specification of a wait policy that only waits on
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ACCEPTED) then this field will
# not be set.
  sig { void }
  def clear_outcome
  end

  # The most advanced lifecycle stage that the Update is known to have
# reached, where lifecycle stages are ordered
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_UNSPECIFIED <
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ADMITTED <
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ACCEPTED <
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_COMPLETED.
# UNSPECIFIED will be returned if and only if the server's maximum wait
# time was reached before the Update reached the stage specified in the
# request WaitPolicy, and before the context deadline expired; clients may
# may then retry the call as needed.
  sig { returns(T.any(Symbol, Integer)) }
  def stage
  end

  # The most advanced lifecycle stage that the Update is known to have
# reached, where lifecycle stages are ordered
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_UNSPECIFIED <
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ADMITTED <
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ACCEPTED <
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_COMPLETED.
# UNSPECIFIED will be returned if and only if the server's maximum wait
# time was reached before the Update reached the stage specified in the
# request WaitPolicy, and before the context deadline expired; clients may
# may then retry the call as needed.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def stage=(value)
  end

  # The most advanced lifecycle stage that the Update is known to have
# reached, where lifecycle stages are ordered
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_UNSPECIFIED <
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ADMITTED <
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ACCEPTED <
# UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_COMPLETED.
# UNSPECIFIED will be returned if and only if the server's maximum wait
# time was reached before the Update reached the stage specified in the
# request WaitPolicy, and before the context deadline expired; clients may
# may then retry the call as needed.
  sig { void }
  def clear_stage
  end

  # Sufficient information to address this update.
  sig { returns(T.nilable(Temporalio::Api::Update::V1::UpdateRef)) }
  def update_ref
  end

  # Sufficient information to address this update.
  sig { params(value: T.nilable(Temporalio::Api::Update::V1::UpdateRef)).void }
  def update_ref=(value)
  end

  # Sufficient information to address this update.
  sig { void }
  def clear_update_ref
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::PollNexusTaskQueueRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::PollNexusTaskQueueRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::PollNexusTaskQueueRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::PollNexusTaskQueueRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::PollNexusTaskQueueRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      identity: T.nilable(String),
      task_queue: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue),
      worker_version_capabilities: T.nilable(Temporalio::Api::Common::V1::WorkerVersionCapabilities)
    ).void
  end
  def initialize(
    namespace: "",
    identity: "",
    task_queue: nil,
    worker_version_capabilities: nil
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  # The identity of the client who initiated this request.
  sig { returns(String) }
  def identity
  end

  # The identity of the client who initiated this request.
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the client who initiated this request.
  sig { void }
  def clear_identity
  end

  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)) }
  def task_queue
  end

  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)).void }
  def task_queue=(value)
  end

  sig { void }
  def clear_task_queue
  end

  # Information about this worker's build identifier and if it is choosing to use the versioning
# feature. See the `WorkerVersionCapabilities` docstring for more.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkerVersionCapabilities)) }
  def worker_version_capabilities
  end

  # Information about this worker's build identifier and if it is choosing to use the versioning
# feature. See the `WorkerVersionCapabilities` docstring for more.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkerVersionCapabilities)).void }
  def worker_version_capabilities=(value)
  end

  # Information about this worker's build identifier and if it is choosing to use the versioning
# feature. See the `WorkerVersionCapabilities` docstring for more.
  sig { void }
  def clear_worker_version_capabilities
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::PollNexusTaskQueueResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::PollNexusTaskQueueResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::PollNexusTaskQueueResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::PollNexusTaskQueueResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::PollNexusTaskQueueResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      task_token: T.nilable(String),
      request: T.nilable(Temporalio::Api::Nexus::V1::Request)
    ).void
  end
  def initialize(
    task_token: "",
    request: nil
  )
  end

  # An opaque unique identifier for this task for correlating a completion request the embedded request.
  sig { returns(String) }
  def task_token
  end

  # An opaque unique identifier for this task for correlating a completion request the embedded request.
  sig { params(value: String).void }
  def task_token=(value)
  end

  # An opaque unique identifier for this task for correlating a completion request the embedded request.
  sig { void }
  def clear_task_token
  end

  # Embedded request as translated from the incoming frontend request.
  sig { returns(T.nilable(Temporalio::Api::Nexus::V1::Request)) }
  def request
  end

  # Embedded request as translated from the incoming frontend request.
  sig { params(value: T.nilable(Temporalio::Api::Nexus::V1::Request)).void }
  def request=(value)
  end

  # Embedded request as translated from the incoming frontend request.
  sig { void }
  def clear_request
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondNexusTaskCompletedRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondNexusTaskCompletedRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondNexusTaskCompletedRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondNexusTaskCompletedRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondNexusTaskCompletedRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      identity: T.nilable(String),
      task_token: T.nilable(String),
      response: T.nilable(Temporalio::Api::Nexus::V1::Response)
    ).void
  end
  def initialize(
    namespace: "",
    identity: "",
    task_token: "",
    response: nil
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  # The identity of the client who initiated this request.
  sig { returns(String) }
  def identity
  end

  # The identity of the client who initiated this request.
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the client who initiated this request.
  sig { void }
  def clear_identity
  end

  # A unique identifier for this task as received via a poll response.
  sig { returns(String) }
  def task_token
  end

  # A unique identifier for this task as received via a poll response.
  sig { params(value: String).void }
  def task_token=(value)
  end

  # A unique identifier for this task as received via a poll response.
  sig { void }
  def clear_task_token
  end

  # Embedded response to be translated into a frontend response.
  sig { returns(T.nilable(Temporalio::Api::Nexus::V1::Response)) }
  def response
  end

  # Embedded response to be translated into a frontend response.
  sig { params(value: T.nilable(Temporalio::Api::Nexus::V1::Response)).void }
  def response=(value)
  end

  # Embedded response to be translated into a frontend response.
  sig { void }
  def clear_response
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondNexusTaskCompletedResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondNexusTaskCompletedResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondNexusTaskCompletedResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondNexusTaskCompletedResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondNexusTaskCompletedResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondNexusTaskFailedRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondNexusTaskFailedRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondNexusTaskFailedRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondNexusTaskFailedRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondNexusTaskFailedRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      identity: T.nilable(String),
      task_token: T.nilable(String),
      error: T.nilable(Temporalio::Api::Nexus::V1::HandlerError)
    ).void
  end
  def initialize(
    namespace: "",
    identity: "",
    task_token: "",
    error: nil
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  # The identity of the client who initiated this request.
  sig { returns(String) }
  def identity
  end

  # The identity of the client who initiated this request.
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the client who initiated this request.
  sig { void }
  def clear_identity
  end

  # A unique identifier for this task.
  sig { returns(String) }
  def task_token
  end

  # A unique identifier for this task.
  sig { params(value: String).void }
  def task_token=(value)
  end

  # A unique identifier for this task.
  sig { void }
  def clear_task_token
  end

  # The error the handler failed with.
  sig { returns(T.nilable(Temporalio::Api::Nexus::V1::HandlerError)) }
  def error
  end

  # The error the handler failed with.
  sig { params(value: T.nilable(Temporalio::Api::Nexus::V1::HandlerError)).void }
  def error=(value)
  end

  # The error the handler failed with.
  sig { void }
  def clear_error
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::RespondNexusTaskFailedResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::RespondNexusTaskFailedResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondNexusTaskFailedResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::RespondNexusTaskFailedResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::RespondNexusTaskFailedResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationRequest) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      operations: T.nilable(T::Array[T.nilable(Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationRequest::Operation)])
    ).void
  end
  def initialize(
    namespace: "",
    operations: []
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  # List of operations to execute within a single workflow.
#
# Preconditions:
# - The list of operations must not be empty.
# - The workflow ids must match across operations.
# - The only valid list of operations at this time is [StartWorkflow, UpdateWorkflow], in this order.
#
# Note that additional operation-specific restrictions have to be considered.
  sig { returns(T::Array[T.nilable(Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationRequest::Operation)]) }
  def operations
  end

  # List of operations to execute within a single workflow.
#
# Preconditions:
# - The list of operations must not be empty.
# - The workflow ids must match across operations.
# - The only valid list of operations at this time is [StartWorkflow, UpdateWorkflow], in this order.
#
# Note that additional operation-specific restrictions have to be considered.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def operations=(value)
  end

  # List of operations to execute within a single workflow.
#
# Preconditions:
# - The list of operations must not be empty.
# - The workflow ids must match across operations.
# - The only valid list of operations at this time is [StartWorkflow, UpdateWorkflow], in this order.
#
# Note that additional operation-specific restrictions have to be considered.
  sig { void }
  def clear_operations
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationResponse) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      responses: T.nilable(T::Array[T.nilable(Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationResponse::Response)])
    ).void
  end
  def initialize(
    responses: []
  )
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationResponse::Response)]) }
  def responses
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def responses=(value)
  end

  sig { void }
  def clear_responses
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsResponse::AggregationGroup
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsResponse::AggregationGroup) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsResponse::AggregationGroup).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsResponse::AggregationGroup) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::CountWorkflowExecutionsResponse::AggregationGroup, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      group_values: T.nilable(T::Array[T.nilable(Temporalio::Api::Common::V1::Payload)]),
      count: T.nilable(Integer)
    ).void
  end
  def initialize(
    group_values: [],
    count: 0
  )
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::Common::V1::Payload)]) }
  def group_values
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def group_values=(value)
  end

  sig { void }
  def clear_group_values
  end

  sig { returns(Integer) }
  def count
  end

  sig { params(value: Integer).void }
  def count=(value)
  end

  sig { void }
  def clear_count
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# System capability details.
class Temporalio::Api::WorkflowService::V1::GetSystemInfoResponse::Capabilities
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::GetSystemInfoResponse::Capabilities) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetSystemInfoResponse::Capabilities).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::GetSystemInfoResponse::Capabilities) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::GetSystemInfoResponse::Capabilities, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      signal_and_query_header: T.nilable(T::Boolean),
      internal_error_differentiation: T.nilable(T::Boolean),
      activity_failure_include_heartbeat: T.nilable(T::Boolean),
      supports_schedules: T.nilable(T::Boolean),
      encoded_failure_attributes: T.nilable(T::Boolean),
      build_id_based_versioning: T.nilable(T::Boolean),
      upsert_memo: T.nilable(T::Boolean),
      eager_workflow_start: T.nilable(T::Boolean),
      sdk_metadata: T.nilable(T::Boolean),
      count_group_by_execution_status: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    signal_and_query_header: false,
    internal_error_differentiation: false,
    activity_failure_include_heartbeat: false,
    supports_schedules: false,
    encoded_failure_attributes: false,
    build_id_based_versioning: false,
    upsert_memo: false,
    eager_workflow_start: false,
    sdk_metadata: false,
    count_group_by_execution_status: false
  )
  end

  # True if signal and query headers are supported.
  sig { returns(T::Boolean) }
  def signal_and_query_header
  end

  # True if signal and query headers are supported.
  sig { params(value: T::Boolean).void }
  def signal_and_query_header=(value)
  end

  # True if signal and query headers are supported.
  sig { void }
  def clear_signal_and_query_header
  end

  # True if internal errors are differentiated from other types of errors for purposes of
# retrying non-internal errors.
#
# When unset/false, clients retry all failures. When true, clients should only retry
# non-internal errors.
  sig { returns(T::Boolean) }
  def internal_error_differentiation
  end

  # True if internal errors are differentiated from other types of errors for purposes of
# retrying non-internal errors.
#
# When unset/false, clients retry all failures. When true, clients should only retry
# non-internal errors.
  sig { params(value: T::Boolean).void }
  def internal_error_differentiation=(value)
  end

  # True if internal errors are differentiated from other types of errors for purposes of
# retrying non-internal errors.
#
# When unset/false, clients retry all failures. When true, clients should only retry
# non-internal errors.
  sig { void }
  def clear_internal_error_differentiation
  end

  # True if RespondActivityTaskFailed API supports including heartbeat details
  sig { returns(T::Boolean) }
  def activity_failure_include_heartbeat
  end

  # True if RespondActivityTaskFailed API supports including heartbeat details
  sig { params(value: T::Boolean).void }
  def activity_failure_include_heartbeat=(value)
  end

  # True if RespondActivityTaskFailed API supports including heartbeat details
  sig { void }
  def clear_activity_failure_include_heartbeat
  end

  # Supports scheduled workflow features.
  sig { returns(T::Boolean) }
  def supports_schedules
  end

  # Supports scheduled workflow features.
  sig { params(value: T::Boolean).void }
  def supports_schedules=(value)
  end

  # Supports scheduled workflow features.
  sig { void }
  def clear_supports_schedules
  end

  # True if server uses protos that include temporal.api.failure.v1.Failure.encoded_attributes
  sig { returns(T::Boolean) }
  def encoded_failure_attributes
  end

  # True if server uses protos that include temporal.api.failure.v1.Failure.encoded_attributes
  sig { params(value: T::Boolean).void }
  def encoded_failure_attributes=(value)
  end

  # True if server uses protos that include temporal.api.failure.v1.Failure.encoded_attributes
  sig { void }
  def clear_encoded_failure_attributes
  end

  # True if server supports dispatching Workflow and Activity tasks based on a worker's build_id
# (see:
# https://github.com/temporalio/proposals/blob/a123af3b559f43db16ea6dd31870bfb754c4dc5e/versioning/worker-versions.md)
  sig { returns(T::Boolean) }
  def build_id_based_versioning
  end

  # True if server supports dispatching Workflow and Activity tasks based on a worker's build_id
# (see:
# https://github.com/temporalio/proposals/blob/a123af3b559f43db16ea6dd31870bfb754c4dc5e/versioning/worker-versions.md)
  sig { params(value: T::Boolean).void }
  def build_id_based_versioning=(value)
  end

  # True if server supports dispatching Workflow and Activity tasks based on a worker's build_id
# (see:
# https://github.com/temporalio/proposals/blob/a123af3b559f43db16ea6dd31870bfb754c4dc5e/versioning/worker-versions.md)
  sig { void }
  def clear_build_id_based_versioning
  end

  # True if server supports upserting workflow memo
  sig { returns(T::Boolean) }
  def upsert_memo
  end

  # True if server supports upserting workflow memo
  sig { params(value: T::Boolean).void }
  def upsert_memo=(value)
  end

  # True if server supports upserting workflow memo
  sig { void }
  def clear_upsert_memo
  end

  # True if server supports eager workflow task dispatching for the StartWorkflowExecution API
  sig { returns(T::Boolean) }
  def eager_workflow_start
  end

  # True if server supports eager workflow task dispatching for the StartWorkflowExecution API
  sig { params(value: T::Boolean).void }
  def eager_workflow_start=(value)
  end

  # True if server supports eager workflow task dispatching for the StartWorkflowExecution API
  sig { void }
  def clear_eager_workflow_start
  end

  # True if the server knows about the sdk metadata field on WFT completions and will record
# it in history
  sig { returns(T::Boolean) }
  def sdk_metadata
  end

  # True if the server knows about the sdk metadata field on WFT completions and will record
# it in history
  sig { params(value: T::Boolean).void }
  def sdk_metadata=(value)
  end

  # True if the server knows about the sdk metadata field on WFT completions and will record
# it in history
  sig { void }
  def clear_sdk_metadata
  end

  # True if the server supports count group by execution status
# (-- api-linter: core::0140::prepositions=disabled --)
  sig { returns(T::Boolean) }
  def count_group_by_execution_status
  end

  # True if the server supports count group by execution status
# (-- api-linter: core::0140::prepositions=disabled --)
  sig { params(value: T::Boolean).void }
  def count_group_by_execution_status=(value)
  end

  # True if the server supports count group by execution status
# (-- api-linter: core::0140::prepositions=disabled --)
  sig { void }
  def clear_count_group_by_execution_status
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest::AddNewCompatibleVersion
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest::AddNewCompatibleVersion) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest::AddNewCompatibleVersion).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest::AddNewCompatibleVersion) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest::AddNewCompatibleVersion, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      new_build_id: T.nilable(String),
      existing_compatible_build_id: T.nilable(String),
      make_set_default: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    new_build_id: "",
    existing_compatible_build_id: "",
    make_set_default: false
  )
  end

  # A new id to be added to an existing compatible set.
  sig { returns(String) }
  def new_build_id
  end

  # A new id to be added to an existing compatible set.
  sig { params(value: String).void }
  def new_build_id=(value)
  end

  # A new id to be added to an existing compatible set.
  sig { void }
  def clear_new_build_id
  end

  # A build id which must already exist in the version sets known by the task queue. The new
# id will be stored in the set containing this id, marking it as compatible with
# the versions within.
  sig { returns(String) }
  def existing_compatible_build_id
  end

  # A build id which must already exist in the version sets known by the task queue. The new
# id will be stored in the set containing this id, marking it as compatible with
# the versions within.
  sig { params(value: String).void }
  def existing_compatible_build_id=(value)
  end

  # A build id which must already exist in the version sets known by the task queue. The new
# id will be stored in the set containing this id, marking it as compatible with
# the versions within.
  sig { void }
  def clear_existing_compatible_build_id
  end

  # When set, establishes the compatible set being targeted as the overall default for the
# queue. If a different set was the current default, the targeted set will replace it as
# the new default.
  sig { returns(T::Boolean) }
  def make_set_default
  end

  # When set, establishes the compatible set being targeted as the overall default for the
# queue. If a different set was the current default, the targeted set will replace it as
# the new default.
  sig { params(value: T::Boolean).void }
  def make_set_default=(value)
  end

  # When set, establishes the compatible set being targeted as the overall default for the
# queue. If a different set was the current default, the targeted set will replace it as
# the new default.
  sig { void }
  def clear_make_set_default
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest::MergeSets
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest::MergeSets) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest::MergeSets).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest::MergeSets) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerBuildIdCompatibilityRequest::MergeSets, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      primary_set_build_id: T.nilable(String),
      secondary_set_build_id: T.nilable(String)
    ).void
  end
  def initialize(
    primary_set_build_id: "",
    secondary_set_build_id: ""
  )
  end

  # A build ID in the set whose default will become the merged set default
  sig { returns(String) }
  def primary_set_build_id
  end

  # A build ID in the set whose default will become the merged set default
  sig { params(value: String).void }
  def primary_set_build_id=(value)
  end

  # A build ID in the set whose default will become the merged set default
  sig { void }
  def clear_primary_set_build_id
  end

  # A build ID in the set which will be merged into the primary set
  sig { returns(String) }
  def secondary_set_build_id
  end

  # A build ID in the set which will be merged into the primary set
  sig { params(value: String).void }
  def secondary_set_build_id=(value)
  end

  # A build ID in the set which will be merged into the primary set
  sig { void }
  def clear_secondary_set_build_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Inserts the rule to the list of assignment rules for this Task Queue.
# The rules are evaluated in order, starting from index 0. The first
# applicable rule will be applied and the rest will be ignored.
class Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::InsertBuildIdAssignmentRule
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::InsertBuildIdAssignmentRule) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::InsertBuildIdAssignmentRule).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::InsertBuildIdAssignmentRule) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::InsertBuildIdAssignmentRule, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      rule_index: T.nilable(Integer),
      rule: T.nilable(Temporalio::Api::TaskQueue::V1::BuildIdAssignmentRule)
    ).void
  end
  def initialize(
    rule_index: 0,
    rule: nil
  )
  end

  # Use this option to insert the rule in a particular index. By
# default, the new rule is inserted at the beginning of the list
# (index 0). If the given index is too larger the rule will be
# inserted at the end of the list.
  sig { returns(Integer) }
  def rule_index
  end

  # Use this option to insert the rule in a particular index. By
# default, the new rule is inserted at the beginning of the list
# (index 0). If the given index is too larger the rule will be
# inserted at the end of the list.
  sig { params(value: Integer).void }
  def rule_index=(value)
  end

  # Use this option to insert the rule in a particular index. By
# default, the new rule is inserted at the beginning of the list
# (index 0). If the given index is too larger the rule will be
# inserted at the end of the list.
  sig { void }
  def clear_rule_index
  end

  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::BuildIdAssignmentRule)) }
  def rule
  end

  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::BuildIdAssignmentRule)).void }
  def rule=(value)
  end

  sig { void }
  def clear_rule
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Replaces the assignment rule at a given index.
class Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::ReplaceBuildIdAssignmentRule
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::ReplaceBuildIdAssignmentRule) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::ReplaceBuildIdAssignmentRule).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::ReplaceBuildIdAssignmentRule) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::ReplaceBuildIdAssignmentRule, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      rule_index: T.nilable(Integer),
      rule: T.nilable(Temporalio::Api::TaskQueue::V1::BuildIdAssignmentRule),
      force: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    rule_index: 0,
    rule: nil,
    force: false
  )
  end

  sig { returns(Integer) }
  def rule_index
  end

  sig { params(value: Integer).void }
  def rule_index=(value)
  end

  sig { void }
  def clear_rule_index
  end

  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::BuildIdAssignmentRule)) }
  def rule
  end

  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::BuildIdAssignmentRule)).void }
  def rule=(value)
  end

  sig { void }
  def clear_rule
  end

  # By default presence of one unconditional rule is enforced, otherwise
# the replace operation will be rejected. Set `force` to true to
# bypass this validation. An unconditional assignment rule:
#   - Has no hint filter
#   - Has no ramp
  sig { returns(T::Boolean) }
  def force
  end

  # By default presence of one unconditional rule is enforced, otherwise
# the replace operation will be rejected. Set `force` to true to
# bypass this validation. An unconditional assignment rule:
#   - Has no hint filter
#   - Has no ramp
  sig { params(value: T::Boolean).void }
  def force=(value)
  end

  # By default presence of one unconditional rule is enforced, otherwise
# the replace operation will be rejected. Set `force` to true to
# bypass this validation. An unconditional assignment rule:
#   - Has no hint filter
#   - Has no ramp
  sig { void }
  def clear_force
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::DeleteBuildIdAssignmentRule
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::DeleteBuildIdAssignmentRule) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::DeleteBuildIdAssignmentRule).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::DeleteBuildIdAssignmentRule) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::DeleteBuildIdAssignmentRule, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      rule_index: T.nilable(Integer),
      force: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    rule_index: 0,
    force: false
  )
  end

  sig { returns(Integer) }
  def rule_index
  end

  sig { params(value: Integer).void }
  def rule_index=(value)
  end

  sig { void }
  def clear_rule_index
  end

  # By default presence of one unconditional rule is enforced, otherwise
# the delete operation will be rejected. Set `force` to true to
# bypass this validation. An unconditional assignment rule:
#   - Has no hint filter
#   - Has no ramp
  sig { returns(T::Boolean) }
  def force
  end

  # By default presence of one unconditional rule is enforced, otherwise
# the delete operation will be rejected. Set `force` to true to
# bypass this validation. An unconditional assignment rule:
#   - Has no hint filter
#   - Has no ramp
  sig { params(value: T::Boolean).void }
  def force=(value)
  end

  # By default presence of one unconditional rule is enforced, otherwise
# the delete operation will be rejected. Set `force` to true to
# bypass this validation. An unconditional assignment rule:
#   - Has no hint filter
#   - Has no ramp
  sig { void }
  def clear_force
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Adds the rule to the list of redirect rules for this Task Queue. There
# can be at most one redirect rule for each distinct Source Build ID.
class Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::AddCompatibleBuildIdRedirectRule
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::AddCompatibleBuildIdRedirectRule) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::AddCompatibleBuildIdRedirectRule).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::AddCompatibleBuildIdRedirectRule) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::AddCompatibleBuildIdRedirectRule, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      rule: T.nilable(Temporalio::Api::TaskQueue::V1::CompatibleBuildIdRedirectRule)
    ).void
  end
  def initialize(
    rule: nil
  )
  end

  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::CompatibleBuildIdRedirectRule)) }
  def rule
  end

  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::CompatibleBuildIdRedirectRule)).void }
  def rule=(value)
  end

  sig { void }
  def clear_rule
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Replaces the routing rule with the given source Build ID.
class Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::ReplaceCompatibleBuildIdRedirectRule
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::ReplaceCompatibleBuildIdRedirectRule) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::ReplaceCompatibleBuildIdRedirectRule).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::ReplaceCompatibleBuildIdRedirectRule) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::ReplaceCompatibleBuildIdRedirectRule, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      rule: T.nilable(Temporalio::Api::TaskQueue::V1::CompatibleBuildIdRedirectRule)
    ).void
  end
  def initialize(
    rule: nil
  )
  end

  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::CompatibleBuildIdRedirectRule)) }
  def rule
  end

  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::CompatibleBuildIdRedirectRule)).void }
  def rule=(value)
  end

  sig { void }
  def clear_rule
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::DeleteCompatibleBuildIdRedirectRule
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::DeleteCompatibleBuildIdRedirectRule) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::DeleteCompatibleBuildIdRedirectRule).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::DeleteCompatibleBuildIdRedirectRule) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::DeleteCompatibleBuildIdRedirectRule, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      source_build_id: T.nilable(String)
    ).void
  end
  def initialize(
    source_build_id: ""
  )
  end

  sig { returns(String) }
  def source_build_id
  end

  sig { params(value: String).void }
  def source_build_id=(value)
  end

  sig { void }
  def clear_source_build_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# This command is intended to be used to complete the rollout of a Build
# ID and cleanup unnecessary rules possibly created during a gradual
# rollout. Specifically, this command will make the following changes
# atomically:
#  1. Adds an assignment rule (with full ramp) for the target Build ID at
#     the end of the list.
#  2. Removes all previously added assignment rules to the given target
#     Build ID (if any).
#  3. Removes any fully-ramped assignment rule for other Build IDs.
class Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::CommitBuildId
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::CommitBuildId) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::CommitBuildId).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::CommitBuildId) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::UpdateWorkerVersioningRulesRequest::CommitBuildId, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      target_build_id: T.nilable(String),
      force: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    target_build_id: "",
    force: false
  )
  end

  sig { returns(String) }
  def target_build_id
  end

  sig { params(value: String).void }
  def target_build_id=(value)
  end

  sig { void }
  def clear_target_build_id
  end

  # To prevent committing invalid Build IDs, we reject the request if no
# pollers has been seen recently for this Build ID. Use the `force`
# option to disable this validation.
  sig { returns(T::Boolean) }
  def force
  end

  # To prevent committing invalid Build IDs, we reject the request if no
# pollers has been seen recently for this Build ID. Use the `force`
# option to disable this validation.
  sig { params(value: T::Boolean).void }
  def force=(value)
  end

  # To prevent committing invalid Build IDs, we reject the request if no
# pollers has been seen recently for this Build ID. Use the `force`
# option to disable this validation.
  sig { void }
  def clear_force
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationRequest::Operation
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationRequest::Operation) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationRequest::Operation).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationRequest::Operation) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationRequest::Operation, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      start_workflow: T.nilable(Temporalio::Api::WorkflowService::V1::StartWorkflowExecutionRequest),
      update_workflow: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkflowExecutionRequest)
    ).void
  end
  def initialize(
    start_workflow: nil,
    update_workflow: nil
  )
  end

  # Additional restrictions:
# - setting `cron_schedule` is invalid
# - setting `request_eager_execution` is invalid
  sig { returns(T.nilable(Temporalio::Api::WorkflowService::V1::StartWorkflowExecutionRequest)) }
  def start_workflow
  end

  # Additional restrictions:
# - setting `cron_schedule` is invalid
# - setting `request_eager_execution` is invalid
  sig { params(value: T.nilable(Temporalio::Api::WorkflowService::V1::StartWorkflowExecutionRequest)).void }
  def start_workflow=(value)
  end

  # Additional restrictions:
# - setting `cron_schedule` is invalid
# - setting `request_eager_execution` is invalid
  sig { void }
  def clear_start_workflow
  end

  sig { returns(T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkflowExecutionRequest)) }
  def update_workflow
  end

  sig { params(value: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkflowExecutionRequest)).void }
  def update_workflow=(value)
  end

  sig { void }
  def clear_update_workflow
  end

  sig { returns(T.nilable(Symbol)) }
  def operation
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationResponse::Response
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationResponse::Response) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationResponse::Response).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationResponse::Response) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::WorkflowService::V1::ExecuteMultiOperationResponse::Response, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      start_workflow: T.nilable(Temporalio::Api::WorkflowService::V1::StartWorkflowExecutionResponse),
      update_workflow: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkflowExecutionResponse)
    ).void
  end
  def initialize(
    start_workflow: nil,
    update_workflow: nil
  )
  end

  sig { returns(T.nilable(Temporalio::Api::WorkflowService::V1::StartWorkflowExecutionResponse)) }
  def start_workflow
  end

  sig { params(value: T.nilable(Temporalio::Api::WorkflowService::V1::StartWorkflowExecutionResponse)).void }
  def start_workflow=(value)
  end

  sig { void }
  def clear_start_workflow
  end

  sig { returns(T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkflowExecutionResponse)) }
  def update_workflow
  end

  sig { params(value: T.nilable(Temporalio::Api::WorkflowService::V1::UpdateWorkflowExecutionResponse)).void }
  def update_workflow=(value)
  end

  sig { void }
  def clear_update_workflow
  end

  sig { returns(T.nilable(Symbol)) }
  def response
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end
