# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: temporal/api/command/v1/message.proto
# typed: strict

class Temporalio::Api::Command::V1::ScheduleActivityTaskCommandAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Command::V1::ScheduleActivityTaskCommandAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Command::V1::ScheduleActivityTaskCommandAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Command::V1::ScheduleActivityTaskCommandAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Command::V1::ScheduleActivityTaskCommandAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      activity_id: T.nilable(String),
      activity_type: T.nilable(Temporalio::Api::Common::V1::ActivityType),
      task_queue: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue),
      header: T.nilable(Temporalio::Api::Common::V1::Header),
      input: T.nilable(Temporalio::Api::Common::V1::Payloads),
      schedule_to_close_timeout: T.nilable(Google::Protobuf::Duration),
      schedule_to_start_timeout: T.nilable(Google::Protobuf::Duration),
      start_to_close_timeout: T.nilable(Google::Protobuf::Duration),
      heartbeat_timeout: T.nilable(Google::Protobuf::Duration),
      retry_policy: T.nilable(Temporalio::Api::Common::V1::RetryPolicy),
      request_eager_execution: T.nilable(T::Boolean),
      use_workflow_build_id: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    activity_id: "",
    activity_type: nil,
    task_queue: nil,
    header: nil,
    input: nil,
    schedule_to_close_timeout: nil,
    schedule_to_start_timeout: nil,
    start_to_close_timeout: nil,
    heartbeat_timeout: nil,
    retry_policy: nil,
    request_eager_execution: false,
    use_workflow_build_id: false
  )
  end

  sig { returns(String) }
  def activity_id
  end

  sig { params(value: String).void }
  def activity_id=(value)
  end

  sig { void }
  def clear_activity_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::ActivityType)) }
  def activity_type
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::ActivityType)).void }
  def activity_type=(value)
  end

  sig { void }
  def clear_activity_type
  end

  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)) }
  def task_queue
  end

  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)).void }
  def task_queue=(value)
  end

  sig { void }
  def clear_task_queue
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Header)) }
  def header
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Header)).void }
  def header=(value)
  end

  sig { void }
  def clear_header
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def input
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def input=(value)
  end

  sig { void }
  def clear_input
  end

  # Indicates how long the caller is willing to wait for activity completion. The "schedule" time
# is when the activity is initially scheduled, not when the most recent retry is scheduled.
# Limits how long retries will be attempted. Either this or `start_to_close_timeout` must be
# specified. When not specified, defaults to the workflow execution timeout.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def schedule_to_close_timeout
  end

  # Indicates how long the caller is willing to wait for activity completion. The "schedule" time
# is when the activity is initially scheduled, not when the most recent retry is scheduled.
# Limits how long retries will be attempted. Either this or `start_to_close_timeout` must be
# specified. When not specified, defaults to the workflow execution timeout.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def schedule_to_close_timeout=(value)
  end

  # Indicates how long the caller is willing to wait for activity completion. The "schedule" time
# is when the activity is initially scheduled, not when the most recent retry is scheduled.
# Limits how long retries will be attempted. Either this or `start_to_close_timeout` must be
# specified. When not specified, defaults to the workflow execution timeout.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { void }
  def clear_schedule_to_close_timeout
  end

  # Limits the time an activity task can stay in a task queue before a worker picks it up. The
# "schedule" time is when the most recent retry is scheduled. This timeout should usually not
# be set: it's useful in specific scenarios like worker-specific task queues. This timeout is
# always non retryable, as all a retry would achieve is to put it back into the same queue.
# Defaults to `schedule_to_close_timeout` or workflow execution timeout if that is not
# specified. More info:
# https://docs.temporal.io/docs/content/what-is-a-schedule-to-start-timeout/
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def schedule_to_start_timeout
  end

  # Limits the time an activity task can stay in a task queue before a worker picks it up. The
# "schedule" time is when the most recent retry is scheduled. This timeout should usually not
# be set: it's useful in specific scenarios like worker-specific task queues. This timeout is
# always non retryable, as all a retry would achieve is to put it back into the same queue.
# Defaults to `schedule_to_close_timeout` or workflow execution timeout if that is not
# specified. More info:
# https://docs.temporal.io/docs/content/what-is-a-schedule-to-start-timeout/
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def schedule_to_start_timeout=(value)
  end

  # Limits the time an activity task can stay in a task queue before a worker picks it up. The
# "schedule" time is when the most recent retry is scheduled. This timeout should usually not
# be set: it's useful in specific scenarios like worker-specific task queues. This timeout is
# always non retryable, as all a retry would achieve is to put it back into the same queue.
# Defaults to `schedule_to_close_timeout` or workflow execution timeout if that is not
# specified. More info:
# https://docs.temporal.io/docs/content/what-is-a-schedule-to-start-timeout/
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { void }
  def clear_schedule_to_start_timeout
  end

  # Maximum time an activity is allowed to execute after being picked up by a worker. This
# timeout is always retryable. Either this or `schedule_to_close_timeout` must be specified.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def start_to_close_timeout
  end

  # Maximum time an activity is allowed to execute after being picked up by a worker. This
# timeout is always retryable. Either this or `schedule_to_close_timeout` must be specified.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def start_to_close_timeout=(value)
  end

  # Maximum time an activity is allowed to execute after being picked up by a worker. This
# timeout is always retryable. Either this or `schedule_to_close_timeout` must be specified.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { void }
  def clear_start_to_close_timeout
  end

  # Maximum permitted time between successful worker heartbeats.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def heartbeat_timeout
  end

  # Maximum permitted time between successful worker heartbeats.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def heartbeat_timeout=(value)
  end

  # Maximum permitted time between successful worker heartbeats.
  sig { void }
  def clear_heartbeat_timeout
  end

  # Activities are provided by a default retry policy which is controlled through the service's
# dynamic configuration. Retries will be attempted until `schedule_to_close_timeout` has
# elapsed. To disable retries set retry_policy.maximum_attempts to 1.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::RetryPolicy)) }
  def retry_policy
  end

  # Activities are provided by a default retry policy which is controlled through the service's
# dynamic configuration. Retries will be attempted until `schedule_to_close_timeout` has
# elapsed. To disable retries set retry_policy.maximum_attempts to 1.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::RetryPolicy)).void }
  def retry_policy=(value)
  end

  # Activities are provided by a default retry policy which is controlled through the service's
# dynamic configuration. Retries will be attempted until `schedule_to_close_timeout` has
# elapsed. To disable retries set retry_policy.maximum_attempts to 1.
  sig { void }
  def clear_retry_policy
  end

  # Request to start the activity directly bypassing matching service and worker polling
# The slot for executing the activity should be reserved when setting this field to true.
  sig { returns(T::Boolean) }
  def request_eager_execution
  end

  # Request to start the activity directly bypassing matching service and worker polling
# The slot for executing the activity should be reserved when setting this field to true.
  sig { params(value: T::Boolean).void }
  def request_eager_execution=(value)
  end

  # Request to start the activity directly bypassing matching service and worker polling
# The slot for executing the activity should be reserved when setting this field to true.
  sig { void }
  def clear_request_eager_execution
  end

  # If this is set, the activity would be assigned to the Build ID of the workflow. Otherwise,
# Assignment rules of the activity's Task Queue will be used to determine the Build ID.
  sig { returns(T::Boolean) }
  def use_workflow_build_id
  end

  # If this is set, the activity would be assigned to the Build ID of the workflow. Otherwise,
# Assignment rules of the activity's Task Queue will be used to determine the Build ID.
  sig { params(value: T::Boolean).void }
  def use_workflow_build_id=(value)
  end

  # If this is set, the activity would be assigned to the Build ID of the workflow. Otherwise,
# Assignment rules of the activity's Task Queue will be used to determine the Build ID.
  sig { void }
  def clear_use_workflow_build_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Command::V1::RequestCancelActivityTaskCommandAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Command::V1::RequestCancelActivityTaskCommandAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Command::V1::RequestCancelActivityTaskCommandAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Command::V1::RequestCancelActivityTaskCommandAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Command::V1::RequestCancelActivityTaskCommandAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      scheduled_event_id: T.nilable(Integer)
    ).void
  end
  def initialize(
    scheduled_event_id: 0
  )
  end

  # The `ACTIVITY_TASK_SCHEDULED` event id for the activity being cancelled.
  sig { returns(Integer) }
  def scheduled_event_id
  end

  # The `ACTIVITY_TASK_SCHEDULED` event id for the activity being cancelled.
  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  # The `ACTIVITY_TASK_SCHEDULED` event id for the activity being cancelled.
  sig { void }
  def clear_scheduled_event_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Command::V1::StartTimerCommandAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Command::V1::StartTimerCommandAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Command::V1::StartTimerCommandAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Command::V1::StartTimerCommandAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Command::V1::StartTimerCommandAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      timer_id: T.nilable(String),
      start_to_fire_timeout: T.nilable(Google::Protobuf::Duration)
    ).void
  end
  def initialize(
    timer_id: "",
    start_to_fire_timeout: nil
  )
  end

  # An id for the timer, currently live timers must have different ids. Typically autogenerated
# by the SDK.
  sig { returns(String) }
  def timer_id
  end

  # An id for the timer, currently live timers must have different ids. Typically autogenerated
# by the SDK.
  sig { params(value: String).void }
  def timer_id=(value)
  end

  # An id for the timer, currently live timers must have different ids. Typically autogenerated
# by the SDK.
  sig { void }
  def clear_timer_id
  end

  # How long until the timer fires, producing a `TIMER_FIRED` event.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def start_to_fire_timeout
  end

  # How long until the timer fires, producing a `TIMER_FIRED` event.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def start_to_fire_timeout=(value)
  end

  # How long until the timer fires, producing a `TIMER_FIRED` event.
#
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { void }
  def clear_start_to_fire_timeout
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Command::V1::CompleteWorkflowExecutionCommandAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Command::V1::CompleteWorkflowExecutionCommandAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Command::V1::CompleteWorkflowExecutionCommandAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Command::V1::CompleteWorkflowExecutionCommandAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Command::V1::CompleteWorkflowExecutionCommandAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      result: T.nilable(Temporalio::Api::Common::V1::Payloads)
    ).void
  end
  def initialize(
    result: nil
  )
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def result
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def result=(value)
  end

  sig { void }
  def clear_result
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Command::V1::FailWorkflowExecutionCommandAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Command::V1::FailWorkflowExecutionCommandAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Command::V1::FailWorkflowExecutionCommandAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Command::V1::FailWorkflowExecutionCommandAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Command::V1::FailWorkflowExecutionCommandAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      failure: T.nilable(Temporalio::Api::Failure::V1::Failure)
    ).void
  end
  def initialize(
    failure: nil
  )
  end

  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def failure
  end

  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def failure=(value)
  end

  sig { void }
  def clear_failure
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Command::V1::CancelTimerCommandAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Command::V1::CancelTimerCommandAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Command::V1::CancelTimerCommandAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Command::V1::CancelTimerCommandAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Command::V1::CancelTimerCommandAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      timer_id: T.nilable(String)
    ).void
  end
  def initialize(
    timer_id: ""
  )
  end

  # The same timer id from the start timer command
  sig { returns(String) }
  def timer_id
  end

  # The same timer id from the start timer command
  sig { params(value: String).void }
  def timer_id=(value)
  end

  # The same timer id from the start timer command
  sig { void }
  def clear_timer_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Command::V1::CancelWorkflowExecutionCommandAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Command::V1::CancelWorkflowExecutionCommandAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Command::V1::CancelWorkflowExecutionCommandAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Command::V1::CancelWorkflowExecutionCommandAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Command::V1::CancelWorkflowExecutionCommandAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      details: T.nilable(Temporalio::Api::Common::V1::Payloads)
    ).void
  end
  def initialize(
    details: nil
  )
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def details
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def details=(value)
  end

  sig { void }
  def clear_details
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Command::V1::RequestCancelExternalWorkflowExecutionCommandAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Command::V1::RequestCancelExternalWorkflowExecutionCommandAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Command::V1::RequestCancelExternalWorkflowExecutionCommandAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Command::V1::RequestCancelExternalWorkflowExecutionCommandAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Command::V1::RequestCancelExternalWorkflowExecutionCommandAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      workflow_id: T.nilable(String),
      run_id: T.nilable(String),
      control: T.nilable(String),
      child_workflow_only: T.nilable(T::Boolean),
      reason: T.nilable(String)
    ).void
  end
  def initialize(
    namespace: "",
    workflow_id: "",
    run_id: "",
    control: "",
    child_workflow_only: false,
    reason: ""
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def workflow_id
  end

  sig { params(value: String).void }
  def workflow_id=(value)
  end

  sig { void }
  def clear_workflow_id
  end

  sig { returns(String) }
  def run_id
  end

  sig { params(value: String).void }
  def run_id=(value)
  end

  sig { void }
  def clear_run_id
  end

  # Deprecated.
  sig { returns(String) }
  def control
  end

  # Deprecated.
  sig { params(value: String).void }
  def control=(value)
  end

  # Deprecated.
  sig { void }
  def clear_control
  end

  # Set this to true if the workflow being cancelled is a child of the workflow originating this
# command. The request will be rejected if it is set to true and the target workflow is *not*
# a child of the requesting workflow.
  sig { returns(T::Boolean) }
  def child_workflow_only
  end

  # Set this to true if the workflow being cancelled is a child of the workflow originating this
# command. The request will be rejected if it is set to true and the target workflow is *not*
# a child of the requesting workflow.
  sig { params(value: T::Boolean).void }
  def child_workflow_only=(value)
  end

  # Set this to true if the workflow being cancelled is a child of the workflow originating this
# command. The request will be rejected if it is set to true and the target workflow is *not*
# a child of the requesting workflow.
  sig { void }
  def clear_child_workflow_only
  end

  # Reason for requesting the cancellation
  sig { returns(String) }
  def reason
  end

  # Reason for requesting the cancellation
  sig { params(value: String).void }
  def reason=(value)
  end

  # Reason for requesting the cancellation
  sig { void }
  def clear_reason
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Command::V1::SignalExternalWorkflowExecutionCommandAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Command::V1::SignalExternalWorkflowExecutionCommandAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Command::V1::SignalExternalWorkflowExecutionCommandAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Command::V1::SignalExternalWorkflowExecutionCommandAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Command::V1::SignalExternalWorkflowExecutionCommandAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      signal_name: T.nilable(String),
      input: T.nilable(Temporalio::Api::Common::V1::Payloads),
      control: T.nilable(String),
      child_workflow_only: T.nilable(T::Boolean),
      header: T.nilable(Temporalio::Api::Common::V1::Header)
    ).void
  end
  def initialize(
    namespace: "",
    execution: nil,
    signal_name: "",
    input: nil,
    control: "",
    child_workflow_only: false,
    header: nil
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def execution=(value)
  end

  sig { void }
  def clear_execution
  end

  # The workflow author-defined name of the signal to send to the workflow.
  sig { returns(String) }
  def signal_name
  end

  # The workflow author-defined name of the signal to send to the workflow.
  sig { params(value: String).void }
  def signal_name=(value)
  end

  # The workflow author-defined name of the signal to send to the workflow.
  sig { void }
  def clear_signal_name
  end

  # Serialized value(s) to provide with the signal.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def input
  end

  # Serialized value(s) to provide with the signal.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def input=(value)
  end

  # Serialized value(s) to provide with the signal.
  sig { void }
  def clear_input
  end

  # Deprecated
  sig { returns(String) }
  def control
  end

  # Deprecated
  sig { params(value: String).void }
  def control=(value)
  end

  # Deprecated
  sig { void }
  def clear_control
  end

  # Set this to true if the workflow being cancelled is a child of the workflow originating this
# command. The request will be rejected if it is set to true and the target workflow is *not*
# a child of the requesting workflow.
  sig { returns(T::Boolean) }
  def child_workflow_only
  end

  # Set this to true if the workflow being cancelled is a child of the workflow originating this
# command. The request will be rejected if it is set to true and the target workflow is *not*
# a child of the requesting workflow.
  sig { params(value: T::Boolean).void }
  def child_workflow_only=(value)
  end

  # Set this to true if the workflow being cancelled is a child of the workflow originating this
# command. The request will be rejected if it is set to true and the target workflow is *not*
# a child of the requesting workflow.
  sig { void }
  def clear_child_workflow_only
  end

  # Headers that are passed by the workflow that is sending a signal to the external 
# workflow that is receiving this signal.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Header)) }
  def header
  end

  # Headers that are passed by the workflow that is sending a signal to the external 
# workflow that is receiving this signal.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Header)).void }
  def header=(value)
  end

  # Headers that are passed by the workflow that is sending a signal to the external 
# workflow that is receiving this signal.
  sig { void }
  def clear_header
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Command::V1::UpsertWorkflowSearchAttributesCommandAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Command::V1::UpsertWorkflowSearchAttributesCommandAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Command::V1::UpsertWorkflowSearchAttributesCommandAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Command::V1::UpsertWorkflowSearchAttributesCommandAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Command::V1::UpsertWorkflowSearchAttributesCommandAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      search_attributes: T.nilable(Temporalio::Api::Common::V1::SearchAttributes)
    ).void
  end
  def initialize(
    search_attributes: nil
  )
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::SearchAttributes)) }
  def search_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::SearchAttributes)).void }
  def search_attributes=(value)
  end

  sig { void }
  def clear_search_attributes
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Command::V1::ModifyWorkflowPropertiesCommandAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Command::V1::ModifyWorkflowPropertiesCommandAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Command::V1::ModifyWorkflowPropertiesCommandAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Command::V1::ModifyWorkflowPropertiesCommandAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Command::V1::ModifyWorkflowPropertiesCommandAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      upserted_memo: T.nilable(Temporalio::Api::Common::V1::Memo)
    ).void
  end
  def initialize(
    upserted_memo: nil
  )
  end

  # If set, update the workflow memo with the provided values. The values will be merged with
# the existing memo. If the user wants to delete values, a default/empty Payload should be
# used as the value for the key being deleted.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Memo)) }
  def upserted_memo
  end

  # If set, update the workflow memo with the provided values. The values will be merged with
# the existing memo. If the user wants to delete values, a default/empty Payload should be
# used as the value for the key being deleted.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Memo)).void }
  def upserted_memo=(value)
  end

  # If set, update the workflow memo with the provided values. The values will be merged with
# the existing memo. If the user wants to delete values, a default/empty Payload should be
# used as the value for the key being deleted.
  sig { void }
  def clear_upserted_memo
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Command::V1::RecordMarkerCommandAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Command::V1::RecordMarkerCommandAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Command::V1::RecordMarkerCommandAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Command::V1::RecordMarkerCommandAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Command::V1::RecordMarkerCommandAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      marker_name: T.nilable(String),
      details: T.nilable(T::Hash[String, T.nilable(Temporalio::Api::Common::V1::Payloads)]),
      header: T.nilable(Temporalio::Api::Common::V1::Header),
      failure: T.nilable(Temporalio::Api::Failure::V1::Failure)
    ).void
  end
  def initialize(
    marker_name: "",
    details: ::Google::Protobuf::Map.new(:string, :message, Temporalio::Api::Common::V1::Payloads),
    header: nil,
    failure: nil
  )
  end

  sig { returns(String) }
  def marker_name
  end

  sig { params(value: String).void }
  def marker_name=(value)
  end

  sig { void }
  def clear_marker_name
  end

  sig { returns(T::Hash[String, T.nilable(Temporalio::Api::Common::V1::Payloads)]) }
  def details
  end

  sig { params(value: ::Google::Protobuf::Map).void }
  def details=(value)
  end

  sig { void }
  def clear_details
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Header)) }
  def header
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Header)).void }
  def header=(value)
  end

  sig { void }
  def clear_header
  end

  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def failure
  end

  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def failure=(value)
  end

  sig { void }
  def clear_failure
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Command::V1::ContinueAsNewWorkflowExecutionCommandAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Command::V1::ContinueAsNewWorkflowExecutionCommandAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Command::V1::ContinueAsNewWorkflowExecutionCommandAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Command::V1::ContinueAsNewWorkflowExecutionCommandAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Command::V1::ContinueAsNewWorkflowExecutionCommandAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      workflow_type: T.nilable(Temporalio::Api::Common::V1::WorkflowType),
      task_queue: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue),
      input: T.nilable(Temporalio::Api::Common::V1::Payloads),
      workflow_run_timeout: T.nilable(Google::Protobuf::Duration),
      workflow_task_timeout: T.nilable(Google::Protobuf::Duration),
      backoff_start_interval: T.nilable(Google::Protobuf::Duration),
      retry_policy: T.nilable(Temporalio::Api::Common::V1::RetryPolicy),
      initiator: T.nilable(T.any(Symbol, String, Integer)),
      failure: T.nilable(Temporalio::Api::Failure::V1::Failure),
      last_completion_result: T.nilable(Temporalio::Api::Common::V1::Payloads),
      cron_schedule: T.nilable(String),
      header: T.nilable(Temporalio::Api::Common::V1::Header),
      memo: T.nilable(Temporalio::Api::Common::V1::Memo),
      search_attributes: T.nilable(Temporalio::Api::Common::V1::SearchAttributes),
      inherit_build_id: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    workflow_type: nil,
    task_queue: nil,
    input: nil,
    workflow_run_timeout: nil,
    workflow_task_timeout: nil,
    backoff_start_interval: nil,
    retry_policy: nil,
    initiator: :CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED,
    failure: nil,
    last_completion_result: nil,
    cron_schedule: "",
    header: nil,
    memo: nil,
    search_attributes: nil,
    inherit_build_id: false
  )
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowType)) }
  def workflow_type
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowType)).void }
  def workflow_type=(value)
  end

  sig { void }
  def clear_workflow_type
  end

  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)) }
  def task_queue
  end

  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)).void }
  def task_queue=(value)
  end

  sig { void }
  def clear_task_queue
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def input
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def input=(value)
  end

  sig { void }
  def clear_input
  end

  # Timeout of a single workflow run.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_run_timeout
  end

  # Timeout of a single workflow run.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_run_timeout=(value)
  end

  # Timeout of a single workflow run.
  sig { void }
  def clear_workflow_run_timeout
  end

  # Timeout of a single workflow task.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_task_timeout
  end

  # Timeout of a single workflow task.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_task_timeout=(value)
  end

  # Timeout of a single workflow task.
  sig { void }
  def clear_workflow_task_timeout
  end

  # How long the workflow start will be delayed - not really a "backoff" in the traditional sense.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def backoff_start_interval
  end

  # How long the workflow start will be delayed - not really a "backoff" in the traditional sense.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def backoff_start_interval=(value)
  end

  # How long the workflow start will be delayed - not really a "backoff" in the traditional sense.
  sig { void }
  def clear_backoff_start_interval
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::RetryPolicy)) }
  def retry_policy
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::RetryPolicy)).void }
  def retry_policy=(value)
  end

  sig { void }
  def clear_retry_policy
  end

  # Should be removed
  sig { returns(T.any(Symbol, Integer)) }
  def initiator
  end

  # Should be removed
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def initiator=(value)
  end

  # Should be removed
  sig { void }
  def clear_initiator
  end

  # Should be removed
  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def failure
  end

  # Should be removed
  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def failure=(value)
  end

  # Should be removed
  sig { void }
  def clear_failure
  end

  # Should be removed
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def last_completion_result
  end

  # Should be removed
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def last_completion_result=(value)
  end

  # Should be removed
  sig { void }
  def clear_last_completion_result
  end

  # Should be removed. Not necessarily unused but unclear and not exposed by SDKs.
  sig { returns(String) }
  def cron_schedule
  end

  # Should be removed. Not necessarily unused but unclear and not exposed by SDKs.
  sig { params(value: String).void }
  def cron_schedule=(value)
  end

  # Should be removed. Not necessarily unused but unclear and not exposed by SDKs.
  sig { void }
  def clear_cron_schedule
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Header)) }
  def header
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Header)).void }
  def header=(value)
  end

  sig { void }
  def clear_header
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Memo)) }
  def memo
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Memo)).void }
  def memo=(value)
  end

  sig { void }
  def clear_memo
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::SearchAttributes)) }
  def search_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::SearchAttributes)).void }
  def search_attributes=(value)
  end

  sig { void }
  def clear_search_attributes
  end

  # If this is set, the new execution inherits the Build ID of the current execution. Otherwise,
# the assignment rules will be used to independently assign a Build ID to the new execution.
  sig { returns(T::Boolean) }
  def inherit_build_id
  end

  # If this is set, the new execution inherits the Build ID of the current execution. Otherwise,
# the assignment rules will be used to independently assign a Build ID to the new execution.
  sig { params(value: T::Boolean).void }
  def inherit_build_id=(value)
  end

  # If this is set, the new execution inherits the Build ID of the current execution. Otherwise,
# the assignment rules will be used to independently assign a Build ID to the new execution.
  sig { void }
  def clear_inherit_build_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Command::V1::StartChildWorkflowExecutionCommandAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Command::V1::StartChildWorkflowExecutionCommandAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Command::V1::StartChildWorkflowExecutionCommandAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Command::V1::StartChildWorkflowExecutionCommandAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Command::V1::StartChildWorkflowExecutionCommandAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      workflow_id: T.nilable(String),
      workflow_type: T.nilable(Temporalio::Api::Common::V1::WorkflowType),
      task_queue: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue),
      input: T.nilable(Temporalio::Api::Common::V1::Payloads),
      workflow_execution_timeout: T.nilable(Google::Protobuf::Duration),
      workflow_run_timeout: T.nilable(Google::Protobuf::Duration),
      workflow_task_timeout: T.nilable(Google::Protobuf::Duration),
      parent_close_policy: T.nilable(T.any(Symbol, String, Integer)),
      control: T.nilable(String),
      workflow_id_reuse_policy: T.nilable(T.any(Symbol, String, Integer)),
      retry_policy: T.nilable(Temporalio::Api::Common::V1::RetryPolicy),
      cron_schedule: T.nilable(String),
      header: T.nilable(Temporalio::Api::Common::V1::Header),
      memo: T.nilable(Temporalio::Api::Common::V1::Memo),
      search_attributes: T.nilable(Temporalio::Api::Common::V1::SearchAttributes),
      inherit_build_id: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    namespace: "",
    workflow_id: "",
    workflow_type: nil,
    task_queue: nil,
    input: nil,
    workflow_execution_timeout: nil,
    workflow_run_timeout: nil,
    workflow_task_timeout: nil,
    parent_close_policy: :PARENT_CLOSE_POLICY_UNSPECIFIED,
    control: "",
    workflow_id_reuse_policy: :WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED,
    retry_policy: nil,
    cron_schedule: "",
    header: nil,
    memo: nil,
    search_attributes: nil,
    inherit_build_id: false
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(String) }
  def workflow_id
  end

  sig { params(value: String).void }
  def workflow_id=(value)
  end

  sig { void }
  def clear_workflow_id
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowType)) }
  def workflow_type
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowType)).void }
  def workflow_type=(value)
  end

  sig { void }
  def clear_workflow_type
  end

  sig { returns(T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)) }
  def task_queue
  end

  sig { params(value: T.nilable(Temporalio::Api::TaskQueue::V1::TaskQueue)).void }
  def task_queue=(value)
  end

  sig { void }
  def clear_task_queue
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def input
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def input=(value)
  end

  sig { void }
  def clear_input
  end

  # Total workflow execution timeout including retries and continue as new.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_execution_timeout
  end

  # Total workflow execution timeout including retries and continue as new.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_execution_timeout=(value)
  end

  # Total workflow execution timeout including retries and continue as new.
  sig { void }
  def clear_workflow_execution_timeout
  end

  # Timeout of a single workflow run.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_run_timeout
  end

  # Timeout of a single workflow run.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_run_timeout=(value)
  end

  # Timeout of a single workflow run.
  sig { void }
  def clear_workflow_run_timeout
  end

  # Timeout of a single workflow task.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def workflow_task_timeout
  end

  # Timeout of a single workflow task.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def workflow_task_timeout=(value)
  end

  # Timeout of a single workflow task.
  sig { void }
  def clear_workflow_task_timeout
  end

  # Default: PARENT_CLOSE_POLICY_TERMINATE.
  sig { returns(T.any(Symbol, Integer)) }
  def parent_close_policy
  end

  # Default: PARENT_CLOSE_POLICY_TERMINATE.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def parent_close_policy=(value)
  end

  # Default: PARENT_CLOSE_POLICY_TERMINATE.
  sig { void }
  def clear_parent_close_policy
  end

  sig { returns(String) }
  def control
  end

  sig { params(value: String).void }
  def control=(value)
  end

  sig { void }
  def clear_control
  end

  # Default: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
  sig { returns(T.any(Symbol, Integer)) }
  def workflow_id_reuse_policy
  end

  # Default: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def workflow_id_reuse_policy=(value)
  end

  # Default: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
  sig { void }
  def clear_workflow_id_reuse_policy
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::RetryPolicy)) }
  def retry_policy
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::RetryPolicy)).void }
  def retry_policy=(value)
  end

  sig { void }
  def clear_retry_policy
  end

  # Establish a cron schedule for the child workflow.
  sig { returns(String) }
  def cron_schedule
  end

  # Establish a cron schedule for the child workflow.
  sig { params(value: String).void }
  def cron_schedule=(value)
  end

  # Establish a cron schedule for the child workflow.
  sig { void }
  def clear_cron_schedule
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Header)) }
  def header
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Header)).void }
  def header=(value)
  end

  sig { void }
  def clear_header
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Memo)) }
  def memo
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Memo)).void }
  def memo=(value)
  end

  sig { void }
  def clear_memo
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::SearchAttributes)) }
  def search_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::SearchAttributes)).void }
  def search_attributes=(value)
  end

  sig { void }
  def clear_search_attributes
  end

  # If this is set, the child workflow inherits the Build ID of the parent. Otherwise, the assignment
# rules of the child's Task Queue will be used to independently assign a Build ID to it.
  sig { returns(T::Boolean) }
  def inherit_build_id
  end

  # If this is set, the child workflow inherits the Build ID of the parent. Otherwise, the assignment
# rules of the child's Task Queue will be used to independently assign a Build ID to it.
  sig { params(value: T::Boolean).void }
  def inherit_build_id=(value)
  end

  # If this is set, the child workflow inherits the Build ID of the parent. Otherwise, the assignment
# rules of the child's Task Queue will be used to independently assign a Build ID to it.
  sig { void }
  def clear_inherit_build_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Command::V1::ProtocolMessageCommandAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Command::V1::ProtocolMessageCommandAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Command::V1::ProtocolMessageCommandAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Command::V1::ProtocolMessageCommandAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Command::V1::ProtocolMessageCommandAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      message_id: T.nilable(String)
    ).void
  end
  def initialize(
    message_id: ""
  )
  end

  # The message ID of the message to which this command is a pointer.
  sig { returns(String) }
  def message_id
  end

  # The message ID of the message to which this command is a pointer.
  sig { params(value: String).void }
  def message_id=(value)
  end

  # The message ID of the message to which this command is a pointer.
  sig { void }
  def clear_message_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Command::V1::ScheduleNexusOperationCommandAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Command::V1::ScheduleNexusOperationCommandAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Command::V1::ScheduleNexusOperationCommandAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Command::V1::ScheduleNexusOperationCommandAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Command::V1::ScheduleNexusOperationCommandAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      endpoint: T.nilable(String),
      service: T.nilable(String),
      operation: T.nilable(String),
      input: T.nilable(Temporalio::Api::Common::V1::Payload),
      schedule_to_close_timeout: T.nilable(Google::Protobuf::Duration),
      nexus_header: T.nilable(T::Hash[String, String])
    ).void
  end
  def initialize(
    endpoint: "",
    service: "",
    operation: "",
    input: nil,
    schedule_to_close_timeout: nil,
    nexus_header: ::Google::Protobuf::Map.new(:string, :string)
  )
  end

  # Endpoint name, must exist in the endpoint registry or this command will fail.
  sig { returns(String) }
  def endpoint
  end

  # Endpoint name, must exist in the endpoint registry or this command will fail.
  sig { params(value: String).void }
  def endpoint=(value)
  end

  # Endpoint name, must exist in the endpoint registry or this command will fail.
  sig { void }
  def clear_endpoint
  end

  # Service name.
  sig { returns(String) }
  def service
  end

  # Service name.
  sig { params(value: String).void }
  def service=(value)
  end

  # Service name.
  sig { void }
  def clear_service
  end

  # Operation name.
  sig { returns(String) }
  def operation
  end

  # Operation name.
  sig { params(value: String).void }
  def operation=(value)
  end

  # Operation name.
  sig { void }
  def clear_operation
  end

  # Input for the operation. The server converts this into Nexus request content and the appropriate content headers
# internally when sending the StartOperation request. On the handler side, if it is also backed by Temporal, the
# content is transformed back to the original Payload sent in this command.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payload)) }
  def input
  end

  # Input for the operation. The server converts this into Nexus request content and the appropriate content headers
# internally when sending the StartOperation request. On the handler side, if it is also backed by Temporal, the
# content is transformed back to the original Payload sent in this command.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payload)).void }
  def input=(value)
  end

  # Input for the operation. The server converts this into Nexus request content and the appropriate content headers
# internally when sending the StartOperation request. On the handler side, if it is also backed by Temporal, the
# content is transformed back to the original Payload sent in this command.
  sig { void }
  def clear_input
  end

  # Schedule-to-close timeout for this operation.
# Indicates how long the caller is willing to wait for operation completion.
# Calls are retried internally by the server.
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def schedule_to_close_timeout
  end

  # Schedule-to-close timeout for this operation.
# Indicates how long the caller is willing to wait for operation completion.
# Calls are retried internally by the server.
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def schedule_to_close_timeout=(value)
  end

  # Schedule-to-close timeout for this operation.
# Indicates how long the caller is willing to wait for operation completion.
# Calls are retried internally by the server.
# (-- api-linter: core::0140::prepositions=disabled
#     aip.dev/not-precedent: "to" is used to indicate interval. --)
  sig { void }
  def clear_schedule_to_close_timeout
  end

  # Header to attach to the Nexus request.
# Users are responsible for encrypting sensitive data in this header as it is stored in workflow history and
# transmitted to external services as-is.
# This is useful for propagating tracing information.
# Note these headers are not the same as Temporal headers on internal activities and child workflows, these are
# transmitted to Nexus operations that may be external and are not traditional payloads.
  sig { returns(T::Hash[String, String]) }
  def nexus_header
  end

  # Header to attach to the Nexus request.
# Users are responsible for encrypting sensitive data in this header as it is stored in workflow history and
# transmitted to external services as-is.
# This is useful for propagating tracing information.
# Note these headers are not the same as Temporal headers on internal activities and child workflows, these are
# transmitted to Nexus operations that may be external and are not traditional payloads.
  sig { params(value: ::Google::Protobuf::Map).void }
  def nexus_header=(value)
  end

  # Header to attach to the Nexus request.
# Users are responsible for encrypting sensitive data in this header as it is stored in workflow history and
# transmitted to external services as-is.
# This is useful for propagating tracing information.
# Note these headers are not the same as Temporal headers on internal activities and child workflows, these are
# transmitted to Nexus operations that may be external and are not traditional payloads.
  sig { void }
  def clear_nexus_header
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Command::V1::RequestCancelNexusOperationCommandAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Command::V1::RequestCancelNexusOperationCommandAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Command::V1::RequestCancelNexusOperationCommandAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Command::V1::RequestCancelNexusOperationCommandAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Command::V1::RequestCancelNexusOperationCommandAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      scheduled_event_id: T.nilable(Integer)
    ).void
  end
  def initialize(
    scheduled_event_id: 0
  )
  end

  # The `NEXUS_OPERATION_SCHEDULED` event ID (a unique identifier) for the operation to be canceled.
# The operation may ignore cancellation and end up with any completion state.
  sig { returns(Integer) }
  def scheduled_event_id
  end

  # The `NEXUS_OPERATION_SCHEDULED` event ID (a unique identifier) for the operation to be canceled.
# The operation may ignore cancellation and end up with any completion state.
  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  # The `NEXUS_OPERATION_SCHEDULED` event ID (a unique identifier) for the operation to be canceled.
# The operation may ignore cancellation and end up with any completion state.
  sig { void }
  def clear_scheduled_event_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Command::V1::Command
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Command::V1::Command) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Command::V1::Command).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Command::V1::Command) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Command::V1::Command, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      command_type: T.nilable(T.any(Symbol, String, Integer)),
      user_metadata: T.nilable(Temporalio::Api::Sdk::V1::UserMetadata),
      schedule_activity_task_command_attributes: T.nilable(Temporalio::Api::Command::V1::ScheduleActivityTaskCommandAttributes),
      start_timer_command_attributes: T.nilable(Temporalio::Api::Command::V1::StartTimerCommandAttributes),
      complete_workflow_execution_command_attributes: T.nilable(Temporalio::Api::Command::V1::CompleteWorkflowExecutionCommandAttributes),
      fail_workflow_execution_command_attributes: T.nilable(Temporalio::Api::Command::V1::FailWorkflowExecutionCommandAttributes),
      request_cancel_activity_task_command_attributes: T.nilable(Temporalio::Api::Command::V1::RequestCancelActivityTaskCommandAttributes),
      cancel_timer_command_attributes: T.nilable(Temporalio::Api::Command::V1::CancelTimerCommandAttributes),
      cancel_workflow_execution_command_attributes: T.nilable(Temporalio::Api::Command::V1::CancelWorkflowExecutionCommandAttributes),
      request_cancel_external_workflow_execution_command_attributes: T.nilable(Temporalio::Api::Command::V1::RequestCancelExternalWorkflowExecutionCommandAttributes),
      record_marker_command_attributes: T.nilable(Temporalio::Api::Command::V1::RecordMarkerCommandAttributes),
      continue_as_new_workflow_execution_command_attributes: T.nilable(Temporalio::Api::Command::V1::ContinueAsNewWorkflowExecutionCommandAttributes),
      start_child_workflow_execution_command_attributes: T.nilable(Temporalio::Api::Command::V1::StartChildWorkflowExecutionCommandAttributes),
      signal_external_workflow_execution_command_attributes: T.nilable(Temporalio::Api::Command::V1::SignalExternalWorkflowExecutionCommandAttributes),
      upsert_workflow_search_attributes_command_attributes: T.nilable(Temporalio::Api::Command::V1::UpsertWorkflowSearchAttributesCommandAttributes),
      protocol_message_command_attributes: T.nilable(Temporalio::Api::Command::V1::ProtocolMessageCommandAttributes),
      modify_workflow_properties_command_attributes: T.nilable(Temporalio::Api::Command::V1::ModifyWorkflowPropertiesCommandAttributes),
      schedule_nexus_operation_command_attributes: T.nilable(Temporalio::Api::Command::V1::ScheduleNexusOperationCommandAttributes),
      request_cancel_nexus_operation_command_attributes: T.nilable(Temporalio::Api::Command::V1::RequestCancelNexusOperationCommandAttributes)
    ).void
  end
  def initialize(
    command_type: :COMMAND_TYPE_UNSPECIFIED,
    user_metadata: nil,
    schedule_activity_task_command_attributes: nil,
    start_timer_command_attributes: nil,
    complete_workflow_execution_command_attributes: nil,
    fail_workflow_execution_command_attributes: nil,
    request_cancel_activity_task_command_attributes: nil,
    cancel_timer_command_attributes: nil,
    cancel_workflow_execution_command_attributes: nil,
    request_cancel_external_workflow_execution_command_attributes: nil,
    record_marker_command_attributes: nil,
    continue_as_new_workflow_execution_command_attributes: nil,
    start_child_workflow_execution_command_attributes: nil,
    signal_external_workflow_execution_command_attributes: nil,
    upsert_workflow_search_attributes_command_attributes: nil,
    protocol_message_command_attributes: nil,
    modify_workflow_properties_command_attributes: nil,
    schedule_nexus_operation_command_attributes: nil,
    request_cancel_nexus_operation_command_attributes: nil
  )
  end

  sig { returns(T.any(Symbol, Integer)) }
  def command_type
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def command_type=(value)
  end

  sig { void }
  def clear_command_type
  end

  # Metadata on the command. This is sometimes carried over to the history event if one is
# created as a result of the command. Most commands won't have this information, and how this
# information is used is dependent upon the interface that reads it.
#
# Current well-known uses:
#  * start_child_workflow_execution_command_attributes - populates
#    temporal.api.workflow.v1.WorkflowExecutionInfo.user_metadata where the summary and details
#    are used by user interfaces to show fixed as-of-start workflow summary and details.
#  * start_timer_command_attributes - populates temporal.api.history.v1.HistoryEvent for timer
#    started where the summary is used to identify the timer.
  sig { returns(T.nilable(Temporalio::Api::Sdk::V1::UserMetadata)) }
  def user_metadata
  end

  # Metadata on the command. This is sometimes carried over to the history event if one is
# created as a result of the command. Most commands won't have this information, and how this
# information is used is dependent upon the interface that reads it.
#
# Current well-known uses:
#  * start_child_workflow_execution_command_attributes - populates
#    temporal.api.workflow.v1.WorkflowExecutionInfo.user_metadata where the summary and details
#    are used by user interfaces to show fixed as-of-start workflow summary and details.
#  * start_timer_command_attributes - populates temporal.api.history.v1.HistoryEvent for timer
#    started where the summary is used to identify the timer.
  sig { params(value: T.nilable(Temporalio::Api::Sdk::V1::UserMetadata)).void }
  def user_metadata=(value)
  end

  # Metadata on the command. This is sometimes carried over to the history event if one is
# created as a result of the command. Most commands won't have this information, and how this
# information is used is dependent upon the interface that reads it.
#
# Current well-known uses:
#  * start_child_workflow_execution_command_attributes - populates
#    temporal.api.workflow.v1.WorkflowExecutionInfo.user_metadata where the summary and details
#    are used by user interfaces to show fixed as-of-start workflow summary and details.
#  * start_timer_command_attributes - populates temporal.api.history.v1.HistoryEvent for timer
#    started where the summary is used to identify the timer.
  sig { void }
  def clear_user_metadata
  end

  sig { returns(T.nilable(Temporalio::Api::Command::V1::ScheduleActivityTaskCommandAttributes)) }
  def schedule_activity_task_command_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Command::V1::ScheduleActivityTaskCommandAttributes)).void }
  def schedule_activity_task_command_attributes=(value)
  end

  sig { void }
  def clear_schedule_activity_task_command_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::Command::V1::StartTimerCommandAttributes)) }
  def start_timer_command_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Command::V1::StartTimerCommandAttributes)).void }
  def start_timer_command_attributes=(value)
  end

  sig { void }
  def clear_start_timer_command_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::Command::V1::CompleteWorkflowExecutionCommandAttributes)) }
  def complete_workflow_execution_command_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Command::V1::CompleteWorkflowExecutionCommandAttributes)).void }
  def complete_workflow_execution_command_attributes=(value)
  end

  sig { void }
  def clear_complete_workflow_execution_command_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::Command::V1::FailWorkflowExecutionCommandAttributes)) }
  def fail_workflow_execution_command_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Command::V1::FailWorkflowExecutionCommandAttributes)).void }
  def fail_workflow_execution_command_attributes=(value)
  end

  sig { void }
  def clear_fail_workflow_execution_command_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::Command::V1::RequestCancelActivityTaskCommandAttributes)) }
  def request_cancel_activity_task_command_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Command::V1::RequestCancelActivityTaskCommandAttributes)).void }
  def request_cancel_activity_task_command_attributes=(value)
  end

  sig { void }
  def clear_request_cancel_activity_task_command_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::Command::V1::CancelTimerCommandAttributes)) }
  def cancel_timer_command_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Command::V1::CancelTimerCommandAttributes)).void }
  def cancel_timer_command_attributes=(value)
  end

  sig { void }
  def clear_cancel_timer_command_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::Command::V1::CancelWorkflowExecutionCommandAttributes)) }
  def cancel_workflow_execution_command_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Command::V1::CancelWorkflowExecutionCommandAttributes)).void }
  def cancel_workflow_execution_command_attributes=(value)
  end

  sig { void }
  def clear_cancel_workflow_execution_command_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::Command::V1::RequestCancelExternalWorkflowExecutionCommandAttributes)) }
  def request_cancel_external_workflow_execution_command_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Command::V1::RequestCancelExternalWorkflowExecutionCommandAttributes)).void }
  def request_cancel_external_workflow_execution_command_attributes=(value)
  end

  sig { void }
  def clear_request_cancel_external_workflow_execution_command_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::Command::V1::RecordMarkerCommandAttributes)) }
  def record_marker_command_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Command::V1::RecordMarkerCommandAttributes)).void }
  def record_marker_command_attributes=(value)
  end

  sig { void }
  def clear_record_marker_command_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::Command::V1::ContinueAsNewWorkflowExecutionCommandAttributes)) }
  def continue_as_new_workflow_execution_command_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Command::V1::ContinueAsNewWorkflowExecutionCommandAttributes)).void }
  def continue_as_new_workflow_execution_command_attributes=(value)
  end

  sig { void }
  def clear_continue_as_new_workflow_execution_command_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::Command::V1::StartChildWorkflowExecutionCommandAttributes)) }
  def start_child_workflow_execution_command_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Command::V1::StartChildWorkflowExecutionCommandAttributes)).void }
  def start_child_workflow_execution_command_attributes=(value)
  end

  sig { void }
  def clear_start_child_workflow_execution_command_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::Command::V1::SignalExternalWorkflowExecutionCommandAttributes)) }
  def signal_external_workflow_execution_command_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Command::V1::SignalExternalWorkflowExecutionCommandAttributes)).void }
  def signal_external_workflow_execution_command_attributes=(value)
  end

  sig { void }
  def clear_signal_external_workflow_execution_command_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::Command::V1::UpsertWorkflowSearchAttributesCommandAttributes)) }
  def upsert_workflow_search_attributes_command_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Command::V1::UpsertWorkflowSearchAttributesCommandAttributes)).void }
  def upsert_workflow_search_attributes_command_attributes=(value)
  end

  sig { void }
  def clear_upsert_workflow_search_attributes_command_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::Command::V1::ProtocolMessageCommandAttributes)) }
  def protocol_message_command_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Command::V1::ProtocolMessageCommandAttributes)).void }
  def protocol_message_command_attributes=(value)
  end

  sig { void }
  def clear_protocol_message_command_attributes
  end

  # 16 is available for use - it was used as part of a prototype that never made it into a release
  sig { returns(T.nilable(Temporalio::Api::Command::V1::ModifyWorkflowPropertiesCommandAttributes)) }
  def modify_workflow_properties_command_attributes
  end

  # 16 is available for use - it was used as part of a prototype that never made it into a release
  sig { params(value: T.nilable(Temporalio::Api::Command::V1::ModifyWorkflowPropertiesCommandAttributes)).void }
  def modify_workflow_properties_command_attributes=(value)
  end

  # 16 is available for use - it was used as part of a prototype that never made it into a release
  sig { void }
  def clear_modify_workflow_properties_command_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::Command::V1::ScheduleNexusOperationCommandAttributes)) }
  def schedule_nexus_operation_command_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Command::V1::ScheduleNexusOperationCommandAttributes)).void }
  def schedule_nexus_operation_command_attributes=(value)
  end

  sig { void }
  def clear_schedule_nexus_operation_command_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::Command::V1::RequestCancelNexusOperationCommandAttributes)) }
  def request_cancel_nexus_operation_command_attributes
  end

  sig { params(value: T.nilable(Temporalio::Api::Command::V1::RequestCancelNexusOperationCommandAttributes)).void }
  def request_cancel_nexus_operation_command_attributes=(value)
  end

  sig { void }
  def clear_request_cancel_nexus_operation_command_attributes
  end

  sig { returns(T.nilable(Symbol)) }
  def attributes
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end
