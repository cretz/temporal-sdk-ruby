# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: temporal/api/failure/v1/message.proto
# typed: strict

class Temporalio::Api::Failure::V1::ApplicationFailureInfo
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Failure::V1::ApplicationFailureInfo) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::ApplicationFailureInfo).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Failure::V1::ApplicationFailureInfo) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::ApplicationFailureInfo, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      type: T.nilable(String),
      non_retryable: T.nilable(T::Boolean),
      details: T.nilable(Temporalio::Api::Common::V1::Payloads),
      next_retry_delay: T.nilable(Google::Protobuf::Duration)
    ).void
  end
  def initialize(
    type: "",
    non_retryable: false,
    details: nil,
    next_retry_delay: nil
  )
  end

  sig { returns(String) }
  def type
  end

  sig { params(value: String).void }
  def type=(value)
  end

  sig { void }
  def clear_type
  end

  sig { returns(T::Boolean) }
  def non_retryable
  end

  sig { params(value: T::Boolean).void }
  def non_retryable=(value)
  end

  sig { void }
  def clear_non_retryable
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def details
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def details=(value)
  end

  sig { void }
  def clear_details
  end

  # next_retry_delay can be used by the client to override the activity
# retry interval calculated by the retry policy. Retry attempts will
# still be subject to the maximum retries limit and total time limit
# defined by the policy.
# ATTENTION: this value will be ignored if set for failures produced by
# the workflow.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def next_retry_delay
  end

  # next_retry_delay can be used by the client to override the activity
# retry interval calculated by the retry policy. Retry attempts will
# still be subject to the maximum retries limit and total time limit
# defined by the policy.
# ATTENTION: this value will be ignored if set for failures produced by
# the workflow.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def next_retry_delay=(value)
  end

  # next_retry_delay can be used by the client to override the activity
# retry interval calculated by the retry policy. Retry attempts will
# still be subject to the maximum retries limit and total time limit
# defined by the policy.
# ATTENTION: this value will be ignored if set for failures produced by
# the workflow.
  sig { void }
  def clear_next_retry_delay
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Failure::V1::TimeoutFailureInfo
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Failure::V1::TimeoutFailureInfo) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::TimeoutFailureInfo).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Failure::V1::TimeoutFailureInfo) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::TimeoutFailureInfo, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      timeout_type: T.nilable(T.any(Symbol, String, Integer)),
      last_heartbeat_details: T.nilable(Temporalio::Api::Common::V1::Payloads)
    ).void
  end
  def initialize(
    timeout_type: :TIMEOUT_TYPE_UNSPECIFIED,
    last_heartbeat_details: nil
  )
  end

  sig { returns(T.any(Symbol, Integer)) }
  def timeout_type
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def timeout_type=(value)
  end

  sig { void }
  def clear_timeout_type
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def last_heartbeat_details
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def last_heartbeat_details=(value)
  end

  sig { void }
  def clear_last_heartbeat_details
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Failure::V1::CanceledFailureInfo
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Failure::V1::CanceledFailureInfo) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::CanceledFailureInfo).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Failure::V1::CanceledFailureInfo) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::CanceledFailureInfo, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      details: T.nilable(Temporalio::Api::Common::V1::Payloads)
    ).void
  end
  def initialize(
    details: nil
  )
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def details
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def details=(value)
  end

  sig { void }
  def clear_details
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Failure::V1::TerminatedFailureInfo
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Failure::V1::TerminatedFailureInfo) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::TerminatedFailureInfo).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Failure::V1::TerminatedFailureInfo) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::TerminatedFailureInfo, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Failure::V1::ServerFailureInfo
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Failure::V1::ServerFailureInfo) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::ServerFailureInfo).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Failure::V1::ServerFailureInfo) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::ServerFailureInfo, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      non_retryable: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    non_retryable: false
  )
  end

  sig { returns(T::Boolean) }
  def non_retryable
  end

  sig { params(value: T::Boolean).void }
  def non_retryable=(value)
  end

  sig { void }
  def clear_non_retryable
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Failure::V1::ResetWorkflowFailureInfo
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Failure::V1::ResetWorkflowFailureInfo) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::ResetWorkflowFailureInfo).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Failure::V1::ResetWorkflowFailureInfo) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::ResetWorkflowFailureInfo, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      last_heartbeat_details: T.nilable(Temporalio::Api::Common::V1::Payloads)
    ).void
  end
  def initialize(
    last_heartbeat_details: nil
  )
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def last_heartbeat_details
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def last_heartbeat_details=(value)
  end

  sig { void }
  def clear_last_heartbeat_details
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Failure::V1::ActivityFailureInfo
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Failure::V1::ActivityFailureInfo) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::ActivityFailureInfo).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Failure::V1::ActivityFailureInfo) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::ActivityFailureInfo, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      scheduled_event_id: T.nilable(Integer),
      started_event_id: T.nilable(Integer),
      identity: T.nilable(String),
      activity_type: T.nilable(Temporalio::Api::Common::V1::ActivityType),
      activity_id: T.nilable(String),
      retry_state: T.nilable(T.any(Symbol, String, Integer))
    ).void
  end
  def initialize(
    scheduled_event_id: 0,
    started_event_id: 0,
    identity: "",
    activity_type: nil,
    activity_id: "",
    retry_state: :RETRY_STATE_UNSPECIFIED
  )
  end

  sig { returns(Integer) }
  def scheduled_event_id
  end

  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  sig { void }
  def clear_scheduled_event_id
  end

  sig { returns(Integer) }
  def started_event_id
  end

  sig { params(value: Integer).void }
  def started_event_id=(value)
  end

  sig { void }
  def clear_started_event_id
  end

  sig { returns(String) }
  def identity
  end

  sig { params(value: String).void }
  def identity=(value)
  end

  sig { void }
  def clear_identity
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::ActivityType)) }
  def activity_type
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::ActivityType)).void }
  def activity_type=(value)
  end

  sig { void }
  def clear_activity_type
  end

  sig { returns(String) }
  def activity_id
  end

  sig { params(value: String).void }
  def activity_id=(value)
  end

  sig { void }
  def clear_activity_id
  end

  sig { returns(T.any(Symbol, Integer)) }
  def retry_state
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def retry_state=(value)
  end

  sig { void }
  def clear_retry_state
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Failure::V1::ChildWorkflowExecutionFailureInfo
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Failure::V1::ChildWorkflowExecutionFailureInfo) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::ChildWorkflowExecutionFailureInfo).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Failure::V1::ChildWorkflowExecutionFailureInfo) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::ChildWorkflowExecutionFailureInfo, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      workflow_type: T.nilable(Temporalio::Api::Common::V1::WorkflowType),
      initiated_event_id: T.nilable(Integer),
      started_event_id: T.nilable(Integer),
      retry_state: T.nilable(T.any(Symbol, String, Integer))
    ).void
  end
  def initialize(
    namespace: "",
    workflow_execution: nil,
    workflow_type: nil,
    initiated_event_id: 0,
    started_event_id: 0,
    retry_state: :RETRY_STATE_UNSPECIFIED
  )
  end

  sig { returns(String) }
  def namespace
  end

  sig { params(value: String).void }
  def namespace=(value)
  end

  sig { void }
  def clear_namespace
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  sig { void }
  def clear_workflow_execution
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowType)) }
  def workflow_type
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowType)).void }
  def workflow_type=(value)
  end

  sig { void }
  def clear_workflow_type
  end

  sig { returns(Integer) }
  def initiated_event_id
  end

  sig { params(value: Integer).void }
  def initiated_event_id=(value)
  end

  sig { void }
  def clear_initiated_event_id
  end

  sig { returns(Integer) }
  def started_event_id
  end

  sig { params(value: Integer).void }
  def started_event_id=(value)
  end

  sig { void }
  def clear_started_event_id
  end

  sig { returns(T.any(Symbol, Integer)) }
  def retry_state
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def retry_state=(value)
  end

  sig { void }
  def clear_retry_state
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Failure::V1::NexusOperationFailureInfo
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Failure::V1::NexusOperationFailureInfo) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::NexusOperationFailureInfo).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Failure::V1::NexusOperationFailureInfo) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::NexusOperationFailureInfo, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      scheduled_event_id: T.nilable(Integer),
      endpoint: T.nilable(String),
      service: T.nilable(String),
      operation: T.nilable(String),
      operation_id: T.nilable(String)
    ).void
  end
  def initialize(
    scheduled_event_id: 0,
    endpoint: "",
    service: "",
    operation: "",
    operation_id: ""
  )
  end

  # The NexusOperationScheduled event ID.
  sig { returns(Integer) }
  def scheduled_event_id
  end

  # The NexusOperationScheduled event ID.
  sig { params(value: Integer).void }
  def scheduled_event_id=(value)
  end

  # The NexusOperationScheduled event ID.
  sig { void }
  def clear_scheduled_event_id
  end

  # Endpoint name.
  sig { returns(String) }
  def endpoint
  end

  # Endpoint name.
  sig { params(value: String).void }
  def endpoint=(value)
  end

  # Endpoint name.
  sig { void }
  def clear_endpoint
  end

  # Service name.
  sig { returns(String) }
  def service
  end

  # Service name.
  sig { params(value: String).void }
  def service=(value)
  end

  # Service name.
  sig { void }
  def clear_service
  end

  # Operation name.
  sig { returns(String) }
  def operation
  end

  # Operation name.
  sig { params(value: String).void }
  def operation=(value)
  end

  # Operation name.
  sig { void }
  def clear_operation
  end

  # Operation ID - may be empty if the operation completed synchronously.
  sig { returns(String) }
  def operation_id
  end

  # Operation ID - may be empty if the operation completed synchronously.
  sig { params(value: String).void }
  def operation_id=(value)
  end

  # Operation ID - may be empty if the operation completed synchronously.
  sig { void }
  def clear_operation_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Failure::V1::Failure
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Failure::V1::Failure) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::Failure).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Failure::V1::Failure) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::Failure, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      message: T.nilable(String),
      source: T.nilable(String),
      stack_trace: T.nilable(String),
      encoded_attributes: T.nilable(Temporalio::Api::Common::V1::Payload),
      cause: T.nilable(Temporalio::Api::Failure::V1::Failure),
      application_failure_info: T.nilable(Temporalio::Api::Failure::V1::ApplicationFailureInfo),
      timeout_failure_info: T.nilable(Temporalio::Api::Failure::V1::TimeoutFailureInfo),
      canceled_failure_info: T.nilable(Temporalio::Api::Failure::V1::CanceledFailureInfo),
      terminated_failure_info: T.nilable(Temporalio::Api::Failure::V1::TerminatedFailureInfo),
      server_failure_info: T.nilable(Temporalio::Api::Failure::V1::ServerFailureInfo),
      reset_workflow_failure_info: T.nilable(Temporalio::Api::Failure::V1::ResetWorkflowFailureInfo),
      activity_failure_info: T.nilable(Temporalio::Api::Failure::V1::ActivityFailureInfo),
      child_workflow_execution_failure_info: T.nilable(Temporalio::Api::Failure::V1::ChildWorkflowExecutionFailureInfo),
      nexus_operation_execution_failure_info: T.nilable(Temporalio::Api::Failure::V1::NexusOperationFailureInfo)
    ).void
  end
  def initialize(
    message: "",
    source: "",
    stack_trace: "",
    encoded_attributes: nil,
    cause: nil,
    application_failure_info: nil,
    timeout_failure_info: nil,
    canceled_failure_info: nil,
    terminated_failure_info: nil,
    server_failure_info: nil,
    reset_workflow_failure_info: nil,
    activity_failure_info: nil,
    child_workflow_execution_failure_info: nil,
    nexus_operation_execution_failure_info: nil
  )
  end

  sig { returns(String) }
  def message
  end

  sig { params(value: String).void }
  def message=(value)
  end

  sig { void }
  def clear_message
  end

  # The source this Failure originated in, e.g. TypeScriptSDK / JavaSDK
# In some SDKs this is used to rehydrate the stack trace into an exception object.
  sig { returns(String) }
  def source
  end

  # The source this Failure originated in, e.g. TypeScriptSDK / JavaSDK
# In some SDKs this is used to rehydrate the stack trace into an exception object.
  sig { params(value: String).void }
  def source=(value)
  end

  # The source this Failure originated in, e.g. TypeScriptSDK / JavaSDK
# In some SDKs this is used to rehydrate the stack trace into an exception object.
  sig { void }
  def clear_source
  end

  sig { returns(String) }
  def stack_trace
  end

  sig { params(value: String).void }
  def stack_trace=(value)
  end

  sig { void }
  def clear_stack_trace
  end

  # Alternative way to supply `message` and `stack_trace` and possibly other attributes, used for encryption of
# errors originating in user code which might contain sensitive information.
# The `encoded_attributes` Payload could represent any serializable object, e.g. JSON object or a `Failure` proto
# message.
#
# SDK authors: 
# - The SDK should provide a default `encodeFailureAttributes` and `decodeFailureAttributes` implementation that:
#   - Uses a JSON object to represent `{ message, stack_trace }`.
#   - Overwrites the original message with "Encoded failure" to indicate that more information could be extracted.
#   - Overwrites the original stack_trace with an empty string.
#   - The resulting JSON object is converted to Payload using the default PayloadConverter and should be processed
#     by the user-provided PayloadCodec
#
# - If there's demand, we could allow overriding the default SDK implementation to encode other opaque Failure attributes.
# (-- api-linter: core::0203::optional=disabled --)
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payload)) }
  def encoded_attributes
  end

  # Alternative way to supply `message` and `stack_trace` and possibly other attributes, used for encryption of
# errors originating in user code which might contain sensitive information.
# The `encoded_attributes` Payload could represent any serializable object, e.g. JSON object or a `Failure` proto
# message.
#
# SDK authors: 
# - The SDK should provide a default `encodeFailureAttributes` and `decodeFailureAttributes` implementation that:
#   - Uses a JSON object to represent `{ message, stack_trace }`.
#   - Overwrites the original message with "Encoded failure" to indicate that more information could be extracted.
#   - Overwrites the original stack_trace with an empty string.
#   - The resulting JSON object is converted to Payload using the default PayloadConverter and should be processed
#     by the user-provided PayloadCodec
#
# - If there's demand, we could allow overriding the default SDK implementation to encode other opaque Failure attributes.
# (-- api-linter: core::0203::optional=disabled --)
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payload)).void }
  def encoded_attributes=(value)
  end

  # Alternative way to supply `message` and `stack_trace` and possibly other attributes, used for encryption of
# errors originating in user code which might contain sensitive information.
# The `encoded_attributes` Payload could represent any serializable object, e.g. JSON object or a `Failure` proto
# message.
#
# SDK authors: 
# - The SDK should provide a default `encodeFailureAttributes` and `decodeFailureAttributes` implementation that:
#   - Uses a JSON object to represent `{ message, stack_trace }`.
#   - Overwrites the original message with "Encoded failure" to indicate that more information could be extracted.
#   - Overwrites the original stack_trace with an empty string.
#   - The resulting JSON object is converted to Payload using the default PayloadConverter and should be processed
#     by the user-provided PayloadCodec
#
# - If there's demand, we could allow overriding the default SDK implementation to encode other opaque Failure attributes.
# (-- api-linter: core::0203::optional=disabled --)
  sig { void }
  def clear_encoded_attributes
  end

  sig { returns(T.nilable(Temporalio::Api::Failure::V1::Failure)) }
  def cause
  end

  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::Failure)).void }
  def cause=(value)
  end

  sig { void }
  def clear_cause
  end

  sig { returns(T.nilable(Temporalio::Api::Failure::V1::ApplicationFailureInfo)) }
  def application_failure_info
  end

  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::ApplicationFailureInfo)).void }
  def application_failure_info=(value)
  end

  sig { void }
  def clear_application_failure_info
  end

  sig { returns(T.nilable(Temporalio::Api::Failure::V1::TimeoutFailureInfo)) }
  def timeout_failure_info
  end

  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::TimeoutFailureInfo)).void }
  def timeout_failure_info=(value)
  end

  sig { void }
  def clear_timeout_failure_info
  end

  sig { returns(T.nilable(Temporalio::Api::Failure::V1::CanceledFailureInfo)) }
  def canceled_failure_info
  end

  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::CanceledFailureInfo)).void }
  def canceled_failure_info=(value)
  end

  sig { void }
  def clear_canceled_failure_info
  end

  sig { returns(T.nilable(Temporalio::Api::Failure::V1::TerminatedFailureInfo)) }
  def terminated_failure_info
  end

  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::TerminatedFailureInfo)).void }
  def terminated_failure_info=(value)
  end

  sig { void }
  def clear_terminated_failure_info
  end

  sig { returns(T.nilable(Temporalio::Api::Failure::V1::ServerFailureInfo)) }
  def server_failure_info
  end

  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::ServerFailureInfo)).void }
  def server_failure_info=(value)
  end

  sig { void }
  def clear_server_failure_info
  end

  sig { returns(T.nilable(Temporalio::Api::Failure::V1::ResetWorkflowFailureInfo)) }
  def reset_workflow_failure_info
  end

  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::ResetWorkflowFailureInfo)).void }
  def reset_workflow_failure_info=(value)
  end

  sig { void }
  def clear_reset_workflow_failure_info
  end

  sig { returns(T.nilable(Temporalio::Api::Failure::V1::ActivityFailureInfo)) }
  def activity_failure_info
  end

  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::ActivityFailureInfo)).void }
  def activity_failure_info=(value)
  end

  sig { void }
  def clear_activity_failure_info
  end

  sig { returns(T.nilable(Temporalio::Api::Failure::V1::ChildWorkflowExecutionFailureInfo)) }
  def child_workflow_execution_failure_info
  end

  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::ChildWorkflowExecutionFailureInfo)).void }
  def child_workflow_execution_failure_info=(value)
  end

  sig { void }
  def clear_child_workflow_execution_failure_info
  end

  sig { returns(T.nilable(Temporalio::Api::Failure::V1::NexusOperationFailureInfo)) }
  def nexus_operation_execution_failure_info
  end

  sig { params(value: T.nilable(Temporalio::Api::Failure::V1::NexusOperationFailureInfo)).void }
  def nexus_operation_execution_failure_info=(value)
  end

  sig { void }
  def clear_nexus_operation_execution_failure_info
  end

  sig { returns(T.nilable(Symbol)) }
  def failure_info
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Failure::V1::MultiOperationExecutionAborted
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Failure::V1::MultiOperationExecutionAborted) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::MultiOperationExecutionAborted).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Failure::V1::MultiOperationExecutionAborted) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Failure::V1::MultiOperationExecutionAborted, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig {void}
  def initialize; end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end
