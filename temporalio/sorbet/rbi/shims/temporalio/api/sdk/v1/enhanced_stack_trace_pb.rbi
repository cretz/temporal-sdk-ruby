# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: temporal/api/sdk/v1/enhanced_stack_trace.proto
# typed: strict

# Internal structure used to create worker stack traces with references to code.
class Temporalio::Api::Sdk::V1::EnhancedStackTrace
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Sdk::V1::EnhancedStackTrace) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Sdk::V1::EnhancedStackTrace).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Sdk::V1::EnhancedStackTrace) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Sdk::V1::EnhancedStackTrace, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      sdk: T.nilable(Temporalio::Api::Sdk::V1::StackTraceSDKInfo),
      sources: T.nilable(T::Hash[String, T.nilable(Temporalio::Api::Sdk::V1::StackTraceFileSlice)]),
      stacks: T.nilable(T::Array[T.nilable(Temporalio::Api::Sdk::V1::StackTrace)])
    ).void
  end
  def initialize(
    sdk: nil,
    sources: ::Google::Protobuf::Map.new(:string, :message, Temporalio::Api::Sdk::V1::StackTraceFileSlice),
    stacks: []
  )
  end

  # Information pertaining to the SDK that the trace has been captured from.
  sig { returns(T.nilable(Temporalio::Api::Sdk::V1::StackTraceSDKInfo)) }
  def sdk
  end

  # Information pertaining to the SDK that the trace has been captured from.
  sig { params(value: T.nilable(Temporalio::Api::Sdk::V1::StackTraceSDKInfo)).void }
  def sdk=(value)
  end

  # Information pertaining to the SDK that the trace has been captured from.
  sig { void }
  def clear_sdk
  end

  # Mapping of file path to file contents.
  sig { returns(T::Hash[String, T.nilable(Temporalio::Api::Sdk::V1::StackTraceFileSlice)]) }
  def sources
  end

  # Mapping of file path to file contents.
  sig { params(value: ::Google::Protobuf::Map).void }
  def sources=(value)
  end

  # Mapping of file path to file contents.
  sig { void }
  def clear_sources
  end

  # Collection of stacks captured.
  sig { returns(T::Array[T.nilable(Temporalio::Api::Sdk::V1::StackTrace)]) }
  def stacks
  end

  # Collection of stacks captured.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def stacks=(value)
  end

  # Collection of stacks captured.
  sig { void }
  def clear_stacks
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Information pertaining to the SDK that the trace has been captured from.
# (-- api-linter: core::0123::resource-annotation=disabled
#     aip.dev/not-precedent: Naming SDK version is optional. --)
class Temporalio::Api::Sdk::V1::StackTraceSDKInfo
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Sdk::V1::StackTraceSDKInfo) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Sdk::V1::StackTraceSDKInfo).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Sdk::V1::StackTraceSDKInfo) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Sdk::V1::StackTraceSDKInfo, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      name: T.nilable(String),
      version: T.nilable(String)
    ).void
  end
  def initialize(
    name: "",
    version: ""
  )
  end

  # Name of the SDK
  sig { returns(String) }
  def name
  end

  # Name of the SDK
  sig { params(value: String).void }
  def name=(value)
  end

  # Name of the SDK
  sig { void }
  def clear_name
  end

  # Version string of the SDK
  sig { returns(String) }
  def version
  end

  # Version string of the SDK
  sig { params(value: String).void }
  def version=(value)
  end

  # Version string of the SDK
  sig { void }
  def clear_version
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# "Slice" of a file starting at line_offset -- a line offset and code fragment corresponding to the worker's stack.
class Temporalio::Api::Sdk::V1::StackTraceFileSlice
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Sdk::V1::StackTraceFileSlice) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Sdk::V1::StackTraceFileSlice).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Sdk::V1::StackTraceFileSlice) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Sdk::V1::StackTraceFileSlice, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      line_offset: T.nilable(Integer),
      content: T.nilable(String)
    ).void
  end
  def initialize(
    line_offset: 0,
    content: ""
  )
  end

  # Only used (possibly) to trim the file without breaking syntax highlighting. This is not optional, unlike
# the `line` property of a `StackTraceFileLocation`.
# (-- api-linter: core::0141::forbidden-types=disabled
#     aip.dev/not-precedent: These really shouldn't have negative values. --)
  sig { returns(Integer) }
  def line_offset
  end

  # Only used (possibly) to trim the file without breaking syntax highlighting. This is not optional, unlike
# the `line` property of a `StackTraceFileLocation`.
# (-- api-linter: core::0141::forbidden-types=disabled
#     aip.dev/not-precedent: These really shouldn't have negative values. --)
  sig { params(value: Integer).void }
  def line_offset=(value)
  end

  # Only used (possibly) to trim the file without breaking syntax highlighting. This is not optional, unlike
# the `line` property of a `StackTraceFileLocation`.
# (-- api-linter: core::0141::forbidden-types=disabled
#     aip.dev/not-precedent: These really shouldn't have negative values. --)
  sig { void }
  def clear_line_offset
  end

  # Slice of a file with the respective OS-specific line terminator.
  sig { returns(String) }
  def content
  end

  # Slice of a file with the respective OS-specific line terminator.
  sig { params(value: String).void }
  def content=(value)
  end

  # Slice of a file with the respective OS-specific line terminator.
  sig { void }
  def clear_content
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# More specific location details of a file: its path, precise line and column numbers if applicable, and function name if available.
# In essence, a pointer to a location in a file
class Temporalio::Api::Sdk::V1::StackTraceFileLocation
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Sdk::V1::StackTraceFileLocation) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Sdk::V1::StackTraceFileLocation).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Sdk::V1::StackTraceFileLocation) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Sdk::V1::StackTraceFileLocation, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      file_path: T.nilable(String),
      line: T.nilable(Integer),
      column: T.nilable(Integer),
      function_name: T.nilable(String),
      internal_code: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    file_path: "",
    line: 0,
    column: 0,
    function_name: "",
    internal_code: false
  )
  end

  # Path to source file (absolute or relative).
# If the paths are relative, ensure that they are all relative to the same root.
  sig { returns(String) }
  def file_path
  end

  # Path to source file (absolute or relative).
# If the paths are relative, ensure that they are all relative to the same root.
  sig { params(value: String).void }
  def file_path=(value)
  end

  # Path to source file (absolute or relative).
# If the paths are relative, ensure that they are all relative to the same root.
  sig { void }
  def clear_file_path
  end

  # Optional; If possible, SDK should send this -- this is required for displaying the code location.
# If not provided, set to -1.
  sig { returns(Integer) }
  def line
  end

  # Optional; If possible, SDK should send this -- this is required for displaying the code location.
# If not provided, set to -1.
  sig { params(value: Integer).void }
  def line=(value)
  end

  # Optional; If possible, SDK should send this -- this is required for displaying the code location.
# If not provided, set to -1.
  sig { void }
  def clear_line
  end

  # Optional; if possible, SDK should send this.
# If not provided, set to -1.
  sig { returns(Integer) }
  def column
  end

  # Optional; if possible, SDK should send this.
# If not provided, set to -1.
  sig { params(value: Integer).void }
  def column=(value)
  end

  # Optional; if possible, SDK should send this.
# If not provided, set to -1.
  sig { void }
  def clear_column
  end

  # Function name this line belongs to, if applicable.
# Used for falling back to stack trace view.
  sig { returns(String) }
  def function_name
  end

  # Function name this line belongs to, if applicable.
# Used for falling back to stack trace view.
  sig { params(value: String).void }
  def function_name=(value)
  end

  # Function name this line belongs to, if applicable.
# Used for falling back to stack trace view.
  sig { void }
  def clear_function_name
  end

  # Flag to communicate whether a location should be hidden by default in the stack view.
  sig { returns(T::Boolean) }
  def internal_code
  end

  # Flag to communicate whether a location should be hidden by default in the stack view.
  sig { params(value: T::Boolean).void }
  def internal_code=(value)
  end

  # Flag to communicate whether a location should be hidden by default in the stack view.
  sig { void }
  def clear_internal_code
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Collection of FileLocation messages from a single stack.
class Temporalio::Api::Sdk::V1::StackTrace
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Sdk::V1::StackTrace) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Sdk::V1::StackTrace).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Sdk::V1::StackTrace) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Sdk::V1::StackTrace, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      locations: T.nilable(T::Array[T.nilable(Temporalio::Api::Sdk::V1::StackTraceFileLocation)])
    ).void
  end
  def initialize(
    locations: []
  )
  end

  # Collection of `FileLocation`s, each for a stack frame that comprise a stack trace.
  sig { returns(T::Array[T.nilable(Temporalio::Api::Sdk::V1::StackTraceFileLocation)]) }
  def locations
  end

  # Collection of `FileLocation`s, each for a stack frame that comprise a stack trace.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def locations=(value)
  end

  # Collection of `FileLocation`s, each for a stack frame that comprise a stack trace.
  sig { void }
  def clear_locations
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end
