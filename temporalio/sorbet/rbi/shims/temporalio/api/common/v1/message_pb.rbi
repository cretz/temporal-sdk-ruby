# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: temporal/api/common/v1/message.proto
# typed: strict

class Temporalio::Api::Common::V1::DataBlob
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Common::V1::DataBlob) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Common::V1::DataBlob).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Common::V1::DataBlob) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Common::V1::DataBlob, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      encoding_type: T.nilable(T.any(Symbol, String, Integer)),
      data: T.nilable(String)
    ).void
  end
  def initialize(
    encoding_type: :ENCODING_TYPE_UNSPECIFIED,
    data: ""
  )
  end

  sig { returns(T.any(Symbol, Integer)) }
  def encoding_type
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def encoding_type=(value)
  end

  sig { void }
  def clear_encoding_type
  end

  sig { returns(String) }
  def data
  end

  sig { params(value: String).void }
  def data=(value)
  end

  sig { void }
  def clear_data
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# See `Payload`
class Temporalio::Api::Common::V1::Payloads
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Common::V1::Payloads) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Common::V1::Payloads).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Common::V1::Payloads) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Common::V1::Payloads, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      payloads: T.nilable(T::Array[T.nilable(Temporalio::Api::Common::V1::Payload)])
    ).void
  end
  def initialize(
    payloads: []
  )
  end

  sig { returns(T::Array[T.nilable(Temporalio::Api::Common::V1::Payload)]) }
  def payloads
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def payloads=(value)
  end

  sig { void }
  def clear_payloads
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Represents some binary (byte array) data (ex: activity input parameters or workflow result) with
# metadata which describes this binary data (format, encoding, encryption, etc). Serialization
# of the data may be user-defined.
class Temporalio::Api::Common::V1::Payload
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Common::V1::Payload) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Common::V1::Payload).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Common::V1::Payload) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Common::V1::Payload, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      metadata: T.nilable(T::Hash[String, String]),
      data: T.nilable(String)
    ).void
  end
  def initialize(
    metadata: ::Google::Protobuf::Map.new(:string, :bytes),
    data: ""
  )
  end

  sig { returns(T::Hash[String, String]) }
  def metadata
  end

  sig { params(value: ::Google::Protobuf::Map).void }
  def metadata=(value)
  end

  sig { void }
  def clear_metadata
  end

  sig { returns(String) }
  def data
  end

  sig { params(value: String).void }
  def data=(value)
  end

  sig { void }
  def clear_data
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# A user-defined set of *indexed* fields that are used/exposed when listing/searching workflows.
# The payload is not serialized in a user-defined way.
class Temporalio::Api::Common::V1::SearchAttributes
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Common::V1::SearchAttributes) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Common::V1::SearchAttributes).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Common::V1::SearchAttributes) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Common::V1::SearchAttributes, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      indexed_fields: T.nilable(T::Hash[String, T.nilable(Temporalio::Api::Common::V1::Payload)])
    ).void
  end
  def initialize(
    indexed_fields: ::Google::Protobuf::Map.new(:string, :message, Temporalio::Api::Common::V1::Payload)
  )
  end

  sig { returns(T::Hash[String, T.nilable(Temporalio::Api::Common::V1::Payload)]) }
  def indexed_fields
  end

  sig { params(value: ::Google::Protobuf::Map).void }
  def indexed_fields=(value)
  end

  sig { void }
  def clear_indexed_fields
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# A user-defined set of *unindexed* fields that are exposed when listing/searching workflows
class Temporalio::Api::Common::V1::Memo
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Common::V1::Memo) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Common::V1::Memo).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Common::V1::Memo) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Common::V1::Memo, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      fields: T.nilable(T::Hash[String, T.nilable(Temporalio::Api::Common::V1::Payload)])
    ).void
  end
  def initialize(
    fields: ::Google::Protobuf::Map.new(:string, :message, Temporalio::Api::Common::V1::Payload)
  )
  end

  sig { returns(T::Hash[String, T.nilable(Temporalio::Api::Common::V1::Payload)]) }
  def fields
  end

  sig { params(value: ::Google::Protobuf::Map).void }
  def fields=(value)
  end

  sig { void }
  def clear_fields
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Contains metadata that can be attached to a variety of requests, like starting a workflow, and
# can be propagated between, for example, workflows and activities.
class Temporalio::Api::Common::V1::Header
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Common::V1::Header) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Common::V1::Header).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Common::V1::Header) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Common::V1::Header, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      fields: T.nilable(T::Hash[String, T.nilable(Temporalio::Api::Common::V1::Payload)])
    ).void
  end
  def initialize(
    fields: ::Google::Protobuf::Map.new(:string, :message, Temporalio::Api::Common::V1::Payload)
  )
  end

  sig { returns(T::Hash[String, T.nilable(Temporalio::Api::Common::V1::Payload)]) }
  def fields
  end

  sig { params(value: ::Google::Protobuf::Map).void }
  def fields=(value)
  end

  sig { void }
  def clear_fields
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Identifies a specific workflow within a namespace. Practically speaking, because run_id is a
# uuid, a workflow execution is globally unique. Note that many commands allow specifying an empty
# run id as a way of saying "target the latest run of the workflow".
class Temporalio::Api::Common::V1::WorkflowExecution
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Common::V1::WorkflowExecution) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Common::V1::WorkflowExecution).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Common::V1::WorkflowExecution) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Common::V1::WorkflowExecution, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      workflow_id: T.nilable(String),
      run_id: T.nilable(String)
    ).void
  end
  def initialize(
    workflow_id: "",
    run_id: ""
  )
  end

  sig { returns(String) }
  def workflow_id
  end

  sig { params(value: String).void }
  def workflow_id=(value)
  end

  sig { void }
  def clear_workflow_id
  end

  sig { returns(String) }
  def run_id
  end

  sig { params(value: String).void }
  def run_id=(value)
  end

  sig { void }
  def clear_run_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Represents the identifier used by a workflow author to define the workflow. Typically, the
# name of a function. This is sometimes referred to as the workflow's "name"
class Temporalio::Api::Common::V1::WorkflowType
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Common::V1::WorkflowType) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Common::V1::WorkflowType).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Common::V1::WorkflowType) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Common::V1::WorkflowType, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      name: T.nilable(String)
    ).void
  end
  def initialize(
    name: ""
  )
  end

  sig { returns(String) }
  def name
  end

  sig { params(value: String).void }
  def name=(value)
  end

  sig { void }
  def clear_name
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Represents the identifier used by a activity author to define the activity. Typically, the
# name of a function. This is sometimes referred to as the activity's "name"
class Temporalio::Api::Common::V1::ActivityType
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Common::V1::ActivityType) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Common::V1::ActivityType).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Common::V1::ActivityType) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Common::V1::ActivityType, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      name: T.nilable(String)
    ).void
  end
  def initialize(
    name: ""
  )
  end

  sig { returns(String) }
  def name
  end

  sig { params(value: String).void }
  def name=(value)
  end

  sig { void }
  def clear_name
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# How retries ought to be handled, usable by both workflows and activities
class Temporalio::Api::Common::V1::RetryPolicy
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Common::V1::RetryPolicy) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Common::V1::RetryPolicy).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Common::V1::RetryPolicy) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Common::V1::RetryPolicy, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      initial_interval: T.nilable(Google::Protobuf::Duration),
      backoff_coefficient: T.nilable(Float),
      maximum_interval: T.nilable(Google::Protobuf::Duration),
      maximum_attempts: T.nilable(Integer),
      non_retryable_error_types: T.nilable(T::Array[String])
    ).void
  end
  def initialize(
    initial_interval: nil,
    backoff_coefficient: 0.0,
    maximum_interval: nil,
    maximum_attempts: 0,
    non_retryable_error_types: []
  )
  end

  # Interval of the first retry. If retryBackoffCoefficient is 1.0 then it is used for all retries.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def initial_interval
  end

  # Interval of the first retry. If retryBackoffCoefficient is 1.0 then it is used for all retries.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def initial_interval=(value)
  end

  # Interval of the first retry. If retryBackoffCoefficient is 1.0 then it is used for all retries.
  sig { void }
  def clear_initial_interval
  end

  # Coefficient used to calculate the next retry interval.
# The next retry interval is previous interval multiplied by the coefficient.
# Must be 1 or larger.
  sig { returns(Float) }
  def backoff_coefficient
  end

  # Coefficient used to calculate the next retry interval.
# The next retry interval is previous interval multiplied by the coefficient.
# Must be 1 or larger.
  sig { params(value: Float).void }
  def backoff_coefficient=(value)
  end

  # Coefficient used to calculate the next retry interval.
# The next retry interval is previous interval multiplied by the coefficient.
# Must be 1 or larger.
  sig { void }
  def clear_backoff_coefficient
  end

  # Maximum interval between retries. Exponential backoff leads to interval increase.
# This value is the cap of the increase. Default is 100x of the initial interval.
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def maximum_interval
  end

  # Maximum interval between retries. Exponential backoff leads to interval increase.
# This value is the cap of the increase. Default is 100x of the initial interval.
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def maximum_interval=(value)
  end

  # Maximum interval between retries. Exponential backoff leads to interval increase.
# This value is the cap of the increase. Default is 100x of the initial interval.
  sig { void }
  def clear_maximum_interval
  end

  # Maximum number of attempts. When exceeded the retries stop even if not expired yet.
# 1 disables retries. 0 means unlimited (up to the timeouts)
  sig { returns(Integer) }
  def maximum_attempts
  end

  # Maximum number of attempts. When exceeded the retries stop even if not expired yet.
# 1 disables retries. 0 means unlimited (up to the timeouts)
  sig { params(value: Integer).void }
  def maximum_attempts=(value)
  end

  # Maximum number of attempts. When exceeded the retries stop even if not expired yet.
# 1 disables retries. 0 means unlimited (up to the timeouts)
  sig { void }
  def clear_maximum_attempts
  end

  # Non-Retryable errors types. Will stop retrying if the error type matches this list. Note that
# this is not a substring match, the error *type* (not message) must match exactly.
  sig { returns(T::Array[String]) }
  def non_retryable_error_types
  end

  # Non-Retryable errors types. Will stop retrying if the error type matches this list. Note that
# this is not a substring match, the error *type* (not message) must match exactly.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def non_retryable_error_types=(value)
  end

  # Non-Retryable errors types. Will stop retrying if the error type matches this list. Note that
# this is not a substring match, the error *type* (not message) must match exactly.
  sig { void }
  def clear_non_retryable_error_types
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Metadata relevant for metering purposes
class Temporalio::Api::Common::V1::MeteringMetadata
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Common::V1::MeteringMetadata) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Common::V1::MeteringMetadata).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Common::V1::MeteringMetadata) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Common::V1::MeteringMetadata, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      nonfirst_local_activity_execution_attempts: T.nilable(Integer)
    ).void
  end
  def initialize(
    nonfirst_local_activity_execution_attempts: 0
  )
  end

  # Count of local activities which have begun an execution attempt during this workflow task,
# and whose first attempt occurred in some previous task. This is used for metering
# purposes, and does not affect workflow state.
#
# (-- api-linter: core::0141::forbidden-types=disabled
#     aip.dev/not-precedent: Negative values make no sense to represent. --)
  sig { returns(Integer) }
  def nonfirst_local_activity_execution_attempts
  end

  # Count of local activities which have begun an execution attempt during this workflow task,
# and whose first attempt occurred in some previous task. This is used for metering
# purposes, and does not affect workflow state.
#
# (-- api-linter: core::0141::forbidden-types=disabled
#     aip.dev/not-precedent: Negative values make no sense to represent. --)
  sig { params(value: Integer).void }
  def nonfirst_local_activity_execution_attempts=(value)
  end

  # Count of local activities which have begun an execution attempt during this workflow task,
# and whose first attempt occurred in some previous task. This is used for metering
# purposes, and does not affect workflow state.
#
# (-- api-linter: core::0141::forbidden-types=disabled
#     aip.dev/not-precedent: Negative values make no sense to represent. --)
  sig { void }
  def clear_nonfirst_local_activity_execution_attempts
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Identifies the version(s) of a worker that processed a task
class Temporalio::Api::Common::V1::WorkerVersionStamp
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Common::V1::WorkerVersionStamp) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Common::V1::WorkerVersionStamp).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Common::V1::WorkerVersionStamp) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Common::V1::WorkerVersionStamp, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      build_id: T.nilable(String),
      use_versioning: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    build_id: "",
    use_versioning: false
  )
  end

  # An opaque whole-worker identifier. Replaces the deprecated `binary_checksum` field when this
# message is included in requests which previously used that.
  sig { returns(String) }
  def build_id
  end

  # An opaque whole-worker identifier. Replaces the deprecated `binary_checksum` field when this
# message is included in requests which previously used that.
  sig { params(value: String).void }
  def build_id=(value)
  end

  # An opaque whole-worker identifier. Replaces the deprecated `binary_checksum` field when this
# message is included in requests which previously used that.
  sig { void }
  def clear_build_id
  end

  # If set, the worker is opting in to worker versioning. Otherwise, this is used only as a
# marker for workflow reset points and the BuildIDs search attribute.
  sig { returns(T::Boolean) }
  def use_versioning
  end

  # If set, the worker is opting in to worker versioning. Otherwise, this is used only as a
# marker for workflow reset points and the BuildIDs search attribute.
  sig { params(value: T::Boolean).void }
  def use_versioning=(value)
  end

  # If set, the worker is opting in to worker versioning. Otherwise, this is used only as a
# marker for workflow reset points and the BuildIDs search attribute.
  sig { void }
  def clear_use_versioning
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Identifies the version(s) that a worker is compatible with when polling or identifying itself,
# and whether or not this worker is opting into the build-id based versioning feature. This is
# used by matching to determine which workers ought to receive what tasks.
class Temporalio::Api::Common::V1::WorkerVersionCapabilities
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Common::V1::WorkerVersionCapabilities) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Common::V1::WorkerVersionCapabilities).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Common::V1::WorkerVersionCapabilities) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Common::V1::WorkerVersionCapabilities, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      build_id: T.nilable(String),
      use_versioning: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    build_id: "",
    use_versioning: false
  )
  end

  # An opaque whole-worker identifier
  sig { returns(String) }
  def build_id
  end

  # An opaque whole-worker identifier
  sig { params(value: String).void }
  def build_id=(value)
  end

  # An opaque whole-worker identifier
  sig { void }
  def clear_build_id
  end

  # If set, the worker is opting in to worker versioning, and wishes to only receive appropriate
# tasks.
  sig { returns(T::Boolean) }
  def use_versioning
  end

  # If set, the worker is opting in to worker versioning, and wishes to only receive appropriate
# tasks.
  sig { params(value: T::Boolean).void }
  def use_versioning=(value)
  end

  # If set, the worker is opting in to worker versioning, and wishes to only receive appropriate
# tasks.
  sig { void }
  def clear_use_versioning
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Describes where and how to reset a workflow, used for batch reset currently
# and may be used for single-workflow reset later.
class Temporalio::Api::Common::V1::ResetOptions
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Common::V1::ResetOptions) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Common::V1::ResetOptions).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Common::V1::ResetOptions) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Common::V1::ResetOptions, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      first_workflow_task: T.nilable(Google::Protobuf::Empty),
      last_workflow_task: T.nilable(Google::Protobuf::Empty),
      workflow_task_id: T.nilable(Integer),
      build_id: T.nilable(String),
      reset_reapply_type: T.nilable(T.any(Symbol, String, Integer)),
      current_run_only: T.nilable(T::Boolean),
      reset_reapply_exclude_types: T.nilable(T::Array[T.any(Symbol, String, Integer)])
    ).void
  end
  def initialize(
    first_workflow_task: nil,
    last_workflow_task: nil,
    workflow_task_id: 0,
    build_id: "",
    reset_reapply_type: :RESET_REAPPLY_TYPE_UNSPECIFIED,
    current_run_only: false,
    reset_reapply_exclude_types: []
  )
  end

  # Resets to the first workflow task completed or started event.
  sig { returns(T.nilable(Google::Protobuf::Empty)) }
  def first_workflow_task
  end

  # Resets to the first workflow task completed or started event.
  sig { params(value: T.nilable(Google::Protobuf::Empty)).void }
  def first_workflow_task=(value)
  end

  # Resets to the first workflow task completed or started event.
  sig { void }
  def clear_first_workflow_task
  end

  # Resets to the last workflow task completed or started event.
  sig { returns(T.nilable(Google::Protobuf::Empty)) }
  def last_workflow_task
  end

  # Resets to the last workflow task completed or started event.
  sig { params(value: T.nilable(Google::Protobuf::Empty)).void }
  def last_workflow_task=(value)
  end

  # Resets to the last workflow task completed or started event.
  sig { void }
  def clear_last_workflow_task
  end

  # The id of a specific `WORKFLOW_TASK_COMPLETED`,`WORKFLOW_TASK_TIMED_OUT`, `WORKFLOW_TASK_FAILED`, or
# `WORKFLOW_TASK_STARTED` event to reset to.
# Note that this option doesn't make sense when used as part of a batch request.
  sig { returns(Integer) }
  def workflow_task_id
  end

  # The id of a specific `WORKFLOW_TASK_COMPLETED`,`WORKFLOW_TASK_TIMED_OUT`, `WORKFLOW_TASK_FAILED`, or
# `WORKFLOW_TASK_STARTED` event to reset to.
# Note that this option doesn't make sense when used as part of a batch request.
  sig { params(value: Integer).void }
  def workflow_task_id=(value)
  end

  # The id of a specific `WORKFLOW_TASK_COMPLETED`,`WORKFLOW_TASK_TIMED_OUT`, `WORKFLOW_TASK_FAILED`, or
# `WORKFLOW_TASK_STARTED` event to reset to.
# Note that this option doesn't make sense when used as part of a batch request.
  sig { void }
  def clear_workflow_task_id
  end

  # Resets to the first workflow task processed by this build id.
# If the workflow was not processed by the build id, or the workflow task can't be
# determined, no reset will be performed.
# Note that by default, this reset is allowed to be to a prior run in a chain of
# continue-as-new.
  sig { returns(String) }
  def build_id
  end

  # Resets to the first workflow task processed by this build id.
# If the workflow was not processed by the build id, or the workflow task can't be
# determined, no reset will be performed.
# Note that by default, this reset is allowed to be to a prior run in a chain of
# continue-as-new.
  sig { params(value: String).void }
  def build_id=(value)
  end

  # Resets to the first workflow task processed by this build id.
# If the workflow was not processed by the build id, or the workflow task can't be
# determined, no reset will be performed.
# Note that by default, this reset is allowed to be to a prior run in a chain of
# continue-as-new.
  sig { void }
  def clear_build_id
  end

  # Event types to be reapplied (deprecated)
# Default: RESET_REAPPLY_TYPE_SIGNAL
  sig { returns(T.any(Symbol, Integer)) }
  def reset_reapply_type
  end

  # Event types to be reapplied (deprecated)
# Default: RESET_REAPPLY_TYPE_SIGNAL
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def reset_reapply_type=(value)
  end

  # Event types to be reapplied (deprecated)
# Default: RESET_REAPPLY_TYPE_SIGNAL
  sig { void }
  def clear_reset_reapply_type
  end

  # If true, limit the reset to only within the current run. (Applies to build_id targets and
# possibly others in the future.)
  sig { returns(T::Boolean) }
  def current_run_only
  end

  # If true, limit the reset to only within the current run. (Applies to build_id targets and
# possibly others in the future.)
  sig { params(value: T::Boolean).void }
  def current_run_only=(value)
  end

  # If true, limit the reset to only within the current run. (Applies to build_id targets and
# possibly others in the future.)
  sig { void }
  def clear_current_run_only
  end

  # Event types not to be reapplied
  sig { returns(T::Array[T.any(Symbol, Integer)]) }
  def reset_reapply_exclude_types
  end

  # Event types not to be reapplied
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def reset_reapply_exclude_types=(value)
  end

  # Event types not to be reapplied
  sig { void }
  def clear_reset_reapply_exclude_types
  end

  sig { returns(T.nilable(Symbol)) }
  def target
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Callback to attach to various events in the system, e.g. workflow run completion.
class Temporalio::Api::Common::V1::Callback
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Common::V1::Callback) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Common::V1::Callback).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Common::V1::Callback) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Common::V1::Callback, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      nexus: T.nilable(Temporalio::Api::Common::V1::Callback::Nexus)
    ).void
  end
  def initialize(
    nexus: nil
  )
  end

  sig { returns(T.nilable(Temporalio::Api::Common::V1::Callback::Nexus)) }
  def nexus
  end

  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Callback::Nexus)).void }
  def nexus=(value)
  end

  sig { void }
  def clear_nexus
  end

  sig { returns(T.nilable(Symbol)) }
  def variant
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Common::V1::Callback::Nexus
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Common::V1::Callback::Nexus) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Common::V1::Callback::Nexus).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Common::V1::Callback::Nexus) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Common::V1::Callback::Nexus, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      url: T.nilable(String),
      header: T.nilable(T::Hash[String, String])
    ).void
  end
  def initialize(
    url: "",
    header: ::Google::Protobuf::Map.new(:string, :string)
  )
  end

  # Callback URL.
  sig { returns(String) }
  def url
  end

  # Callback URL.
  sig { params(value: String).void }
  def url=(value)
  end

  # Callback URL.
  sig { void }
  def clear_url
  end

  # Header to attach to callback request.
  sig { returns(T::Hash[String, String]) }
  def header
  end

  # Header to attach to callback request.
  sig { params(value: ::Google::Protobuf::Map).void }
  def header=(value)
  end

  # Header to attach to callback request.
  sig { void }
  def clear_header
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end
