# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: temporal/api/cloud/operation/v1/message.proto
# typed: strict

class Temporalio::Api::Cloud::Operation::V1::AsyncOperation
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Operation::V1::AsyncOperation) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Operation::V1::AsyncOperation).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Operation::V1::AsyncOperation) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Operation::V1::AsyncOperation, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      id: T.nilable(String),
      state: T.nilable(String),
      check_duration: T.nilable(Google::Protobuf::Duration),
      operation_type: T.nilable(String),
      operation_input: T.nilable(Google::Protobuf::Any),
      failure_reason: T.nilable(String),
      started_time: T.nilable(Google::Protobuf::Timestamp),
      finished_time: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(
    id: "",
    state: "",
    check_duration: nil,
    operation_type: "",
    operation_input: nil,
    failure_reason: "",
    started_time: nil,
    finished_time: nil
  )
  end

  # The operation id
  sig { returns(String) }
  def id
  end

  # The operation id
  sig { params(value: String).void }
  def id=(value)
  end

  # The operation id
  sig { void }
  def clear_id
  end

  # The current state of this operation
# Possible values are: pending, in_progress, failed, cancelled, fulfilled
  sig { returns(String) }
  def state
  end

  # The current state of this operation
# Possible values are: pending, in_progress, failed, cancelled, fulfilled
  sig { params(value: String).void }
  def state=(value)
  end

  # The current state of this operation
# Possible values are: pending, in_progress, failed, cancelled, fulfilled
  sig { void }
  def clear_state
  end

  # The recommended duration to check back for an update in the operation's state
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def check_duration
  end

  # The recommended duration to check back for an update in the operation's state
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def check_duration=(value)
  end

  # The recommended duration to check back for an update in the operation's state
  sig { void }
  def clear_check_duration
  end

  # The type of operation being performed
  sig { returns(String) }
  def operation_type
  end

  # The type of operation being performed
  sig { params(value: String).void }
  def operation_type=(value)
  end

  # The type of operation being performed
  sig { void }
  def clear_operation_type
  end

  # The input to the operation being performed
#
# (-- api-linter: core::0146::any=disabled --)
  sig { returns(T.nilable(Google::Protobuf::Any)) }
  def operation_input
  end

  # The input to the operation being performed
#
# (-- api-linter: core::0146::any=disabled --)
  sig { params(value: T.nilable(Google::Protobuf::Any)).void }
  def operation_input=(value)
  end

  # The input to the operation being performed
#
# (-- api-linter: core::0146::any=disabled --)
  sig { void }
  def clear_operation_input
  end

  # If the operation failed, the reason for the failure
  sig { returns(String) }
  def failure_reason
  end

  # If the operation failed, the reason for the failure
  sig { params(value: String).void }
  def failure_reason=(value)
  end

  # If the operation failed, the reason for the failure
  sig { void }
  def clear_failure_reason
  end

  # The date and time when the operation initiated
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def started_time
  end

  # The date and time when the operation initiated
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def started_time=(value)
  end

  # The date and time when the operation initiated
  sig { void }
  def clear_started_time
  end

  # The date and time when the operation completed
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def finished_time
  end

  # The date and time when the operation completed
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def finished_time=(value)
  end

  # The date and time when the operation completed
  sig { void }
  def clear_finished_time
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end
