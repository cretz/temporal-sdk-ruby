# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: temporal/api/cloud/namespace/v1/message.proto
# typed: strict

class Temporalio::Api::Cloud::Namespace::V1::CertificateFilterSpec
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Namespace::V1::CertificateFilterSpec) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::CertificateFilterSpec).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Namespace::V1::CertificateFilterSpec) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::CertificateFilterSpec, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      common_name: T.nilable(String),
      organization: T.nilable(String),
      organizational_unit: T.nilable(String),
      subject_alternative_name: T.nilable(String)
    ).void
  end
  def initialize(
    common_name: "",
    organization: "",
    organizational_unit: "",
    subject_alternative_name: ""
  )
  end

  # The common_name in the certificate.
# Optional, default is empty.
  sig { returns(String) }
  def common_name
  end

  # The common_name in the certificate.
# Optional, default is empty.
  sig { params(value: String).void }
  def common_name=(value)
  end

  # The common_name in the certificate.
# Optional, default is empty.
  sig { void }
  def clear_common_name
  end

  # The organization in the certificate.
# Optional, default is empty.
  sig { returns(String) }
  def organization
  end

  # The organization in the certificate.
# Optional, default is empty.
  sig { params(value: String).void }
  def organization=(value)
  end

  # The organization in the certificate.
# Optional, default is empty.
  sig { void }
  def clear_organization
  end

  # The organizational_unit in the certificate.
# Optional, default is empty.
  sig { returns(String) }
  def organizational_unit
  end

  # The organizational_unit in the certificate.
# Optional, default is empty.
  sig { params(value: String).void }
  def organizational_unit=(value)
  end

  # The organizational_unit in the certificate.
# Optional, default is empty.
  sig { void }
  def clear_organizational_unit
  end

  # The subject_alternative_name in the certificate.
# Optional, default is empty.
  sig { returns(String) }
  def subject_alternative_name
  end

  # The subject_alternative_name in the certificate.
# Optional, default is empty.
  sig { params(value: String).void }
  def subject_alternative_name=(value)
  end

  # The subject_alternative_name in the certificate.
# Optional, default is empty.
  sig { void }
  def clear_subject_alternative_name
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Namespace::V1::MtlsAuthSpec
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Namespace::V1::MtlsAuthSpec) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::MtlsAuthSpec).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Namespace::V1::MtlsAuthSpec) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::MtlsAuthSpec, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      accepted_client_ca: T.nilable(String),
      certificate_filters: T.nilable(T::Array[T.nilable(Temporalio::Api::Cloud::Namespace::V1::CertificateFilterSpec)]),
      enabled: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    accepted_client_ca: "",
    certificate_filters: [],
    enabled: false
  )
  end

  # The base64 encoded ca cert(s) in PEM format that the clients can use for authentication and authorization.
# This must only be one value, but the CA can have a chain.
#
# (-- api-linter: core::0140::base64=disabled --)
  sig { returns(String) }
  def accepted_client_ca
  end

  # The base64 encoded ca cert(s) in PEM format that the clients can use for authentication and authorization.
# This must only be one value, but the CA can have a chain.
#
# (-- api-linter: core::0140::base64=disabled --)
  sig { params(value: String).void }
  def accepted_client_ca=(value)
  end

  # The base64 encoded ca cert(s) in PEM format that the clients can use for authentication and authorization.
# This must only be one value, but the CA can have a chain.
#
# (-- api-linter: core::0140::base64=disabled --)
  sig { void }
  def clear_accepted_client_ca
  end

  # Certificate filters which, if specified, only allow connections from client certificates whose distinguished name properties match at least one of the filters.
# This allows limiting access to specific end-entity certificates.
# Optional, default is empty.
  sig { returns(T::Array[T.nilable(Temporalio::Api::Cloud::Namespace::V1::CertificateFilterSpec)]) }
  def certificate_filters
  end

  # Certificate filters which, if specified, only allow connections from client certificates whose distinguished name properties match at least one of the filters.
# This allows limiting access to specific end-entity certificates.
# Optional, default is empty.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def certificate_filters=(value)
  end

  # Certificate filters which, if specified, only allow connections from client certificates whose distinguished name properties match at least one of the filters.
# This allows limiting access to specific end-entity certificates.
# Optional, default is empty.
  sig { void }
  def clear_certificate_filters
  end

  # Flag to enable mTLS auth (default: disabled).
# Note: disabling mTLS auth will cause existing mTLS connections to fail.
# temporal:versioning:min_version=2024-05-13-00
  sig { returns(T::Boolean) }
  def enabled
  end

  # Flag to enable mTLS auth (default: disabled).
# Note: disabling mTLS auth will cause existing mTLS connections to fail.
# temporal:versioning:min_version=2024-05-13-00
  sig { params(value: T::Boolean).void }
  def enabled=(value)
  end

  # Flag to enable mTLS auth (default: disabled).
# Note: disabling mTLS auth will cause existing mTLS connections to fail.
# temporal:versioning:min_version=2024-05-13-00
  sig { void }
  def clear_enabled
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Namespace::V1::ApiKeyAuthSpec
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Namespace::V1::ApiKeyAuthSpec) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::ApiKeyAuthSpec).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Namespace::V1::ApiKeyAuthSpec) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::ApiKeyAuthSpec, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      enabled: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    enabled: false
  )
  end

  # Flag to enable API key auth (default: disabled).
# Note: disabling API key auth will cause existing API key connections to fail.
  sig { returns(T::Boolean) }
  def enabled
  end

  # Flag to enable API key auth (default: disabled).
# Note: disabling API key auth will cause existing API key connections to fail.
  sig { params(value: T::Boolean).void }
  def enabled=(value)
  end

  # Flag to enable API key auth (default: disabled).
# Note: disabling API key auth will cause existing API key connections to fail.
  sig { void }
  def clear_enabled
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Namespace::V1::CodecServerSpec
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Namespace::V1::CodecServerSpec) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::CodecServerSpec).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Namespace::V1::CodecServerSpec) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::CodecServerSpec, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      endpoint: T.nilable(String),
      pass_access_token: T.nilable(T::Boolean),
      include_cross_origin_credentials: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    endpoint: "",
    pass_access_token: false,
    include_cross_origin_credentials: false
  )
  end

  # The codec server endpoint.
  sig { returns(String) }
  def endpoint
  end

  # The codec server endpoint.
  sig { params(value: String).void }
  def endpoint=(value)
  end

  # The codec server endpoint.
  sig { void }
  def clear_endpoint
  end

  # Whether to pass the user access token with your endpoint.
  sig { returns(T::Boolean) }
  def pass_access_token
  end

  # Whether to pass the user access token with your endpoint.
  sig { params(value: T::Boolean).void }
  def pass_access_token=(value)
  end

  # Whether to pass the user access token with your endpoint.
  sig { void }
  def clear_pass_access_token
  end

  # Whether to include cross-origin credentials.
  sig { returns(T::Boolean) }
  def include_cross_origin_credentials
  end

  # Whether to include cross-origin credentials.
  sig { params(value: T::Boolean).void }
  def include_cross_origin_credentials=(value)
  end

  # Whether to include cross-origin credentials.
  sig { void }
  def clear_include_cross_origin_credentials
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Namespace::V1::NamespaceSpec
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Namespace::V1::NamespaceSpec) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::NamespaceSpec).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Namespace::V1::NamespaceSpec) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::NamespaceSpec, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      name: T.nilable(String),
      regions: T.nilable(T::Array[String]),
      retention_days: T.nilable(Integer),
      mtls_auth: T.nilable(Temporalio::Api::Cloud::Namespace::V1::MtlsAuthSpec),
      api_key_auth: T.nilable(Temporalio::Api::Cloud::Namespace::V1::ApiKeyAuthSpec),
      custom_search_attributes: T.nilable(T::Hash[String, String]),
      codec_server: T.nilable(Temporalio::Api::Cloud::Namespace::V1::CodecServerSpec)
    ).void
  end
  def initialize(
    name: "",
    regions: [],
    retention_days: 0,
    mtls_auth: nil,
    api_key_auth: nil,
    custom_search_attributes: ::Google::Protobuf::Map.new(:string, :string),
    codec_server: nil
  )
  end

  # The name to use for the namespace.
# This will create a namespace that's available at '<name>.<account>.tmprl.cloud:7233'.
# The name is immutable. Once set, it cannot be changed.
  sig { returns(String) }
  def name
  end

  # The name to use for the namespace.
# This will create a namespace that's available at '<name>.<account>.tmprl.cloud:7233'.
# The name is immutable. Once set, it cannot be changed.
  sig { params(value: String).void }
  def name=(value)
  end

  # The name to use for the namespace.
# This will create a namespace that's available at '<name>.<account>.tmprl.cloud:7233'.
# The name is immutable. Once set, it cannot be changed.
  sig { void }
  def clear_name
  end

  # The ids of the regions where the namespace should be available.
# The GetRegions API can be used to get the list of valid region ids.
# Specifying more than one region makes the namespace "global", which is currently a preview only feature with restricted access.
# Please reach out to Temporal support for more information on global namespaces.
# When provisioned the global namespace will be active on the first region in the list and passive on the rest.
# Number of supported regions is 2.
# The regions is immutable. Once set, it cannot be changed.
# Example: ["aws-us-west-2"].
  sig { returns(T::Array[String]) }
  def regions
  end

  # The ids of the regions where the namespace should be available.
# The GetRegions API can be used to get the list of valid region ids.
# Specifying more than one region makes the namespace "global", which is currently a preview only feature with restricted access.
# Please reach out to Temporal support for more information on global namespaces.
# When provisioned the global namespace will be active on the first region in the list and passive on the rest.
# Number of supported regions is 2.
# The regions is immutable. Once set, it cannot be changed.
# Example: ["aws-us-west-2"].
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def regions=(value)
  end

  # The ids of the regions where the namespace should be available.
# The GetRegions API can be used to get the list of valid region ids.
# Specifying more than one region makes the namespace "global", which is currently a preview only feature with restricted access.
# Please reach out to Temporal support for more information on global namespaces.
# When provisioned the global namespace will be active on the first region in the list and passive on the rest.
# Number of supported regions is 2.
# The regions is immutable. Once set, it cannot be changed.
# Example: ["aws-us-west-2"].
  sig { void }
  def clear_regions
  end

  # The number of days the workflows data will be retained for.
# Changes to the retention period may impact your storage costs.
# Any changes to the retention period will be applied to all new running workflows.
  sig { returns(Integer) }
  def retention_days
  end

  # The number of days the workflows data will be retained for.
# Changes to the retention period may impact your storage costs.
# Any changes to the retention period will be applied to all new running workflows.
  sig { params(value: Integer).void }
  def retention_days=(value)
  end

  # The number of days the workflows data will be retained for.
# Changes to the retention period may impact your storage costs.
# Any changes to the retention period will be applied to all new running workflows.
  sig { void }
  def clear_retention_days
  end

  # The mTLS auth configuration for the namespace.
# If unspecified, mTLS will be disabled.
  sig { returns(T.nilable(Temporalio::Api::Cloud::Namespace::V1::MtlsAuthSpec)) }
  def mtls_auth
  end

  # The mTLS auth configuration for the namespace.
# If unspecified, mTLS will be disabled.
  sig { params(value: T.nilable(Temporalio::Api::Cloud::Namespace::V1::MtlsAuthSpec)).void }
  def mtls_auth=(value)
  end

  # The mTLS auth configuration for the namespace.
# If unspecified, mTLS will be disabled.
  sig { void }
  def clear_mtls_auth
  end

  # The API key auth configuration for the namespace.
# If unspecified, API keys will be disabled.
# temporal:versioning:min_version=2024-05-13-00
  sig { returns(T.nilable(Temporalio::Api::Cloud::Namespace::V1::ApiKeyAuthSpec)) }
  def api_key_auth
  end

  # The API key auth configuration for the namespace.
# If unspecified, API keys will be disabled.
# temporal:versioning:min_version=2024-05-13-00
  sig { params(value: T.nilable(Temporalio::Api::Cloud::Namespace::V1::ApiKeyAuthSpec)).void }
  def api_key_auth=(value)
  end

  # The API key auth configuration for the namespace.
# If unspecified, API keys will be disabled.
# temporal:versioning:min_version=2024-05-13-00
  sig { void }
  def clear_api_key_auth
  end

  # The custom search attributes to use for the namespace.
# The name of the attribute is the key and the type is the value.
# Supported attribute types: text, keyword, int, double, bool, datetime, keyword_list.
# NOTE: currently deleting a search attribute is not supported.
# Optional, default is empty.
  sig { returns(T::Hash[String, String]) }
  def custom_search_attributes
  end

  # The custom search attributes to use for the namespace.
# The name of the attribute is the key and the type is the value.
# Supported attribute types: text, keyword, int, double, bool, datetime, keyword_list.
# NOTE: currently deleting a search attribute is not supported.
# Optional, default is empty.
  sig { params(value: ::Google::Protobuf::Map).void }
  def custom_search_attributes=(value)
  end

  # The custom search attributes to use for the namespace.
# The name of the attribute is the key and the type is the value.
# Supported attribute types: text, keyword, int, double, bool, datetime, keyword_list.
# NOTE: currently deleting a search attribute is not supported.
# Optional, default is empty.
  sig { void }
  def clear_custom_search_attributes
  end

  # Codec server spec used by UI to decode payloads for all users interacting with this namespace.
# Optional, default is unset.
  sig { returns(T.nilable(Temporalio::Api::Cloud::Namespace::V1::CodecServerSpec)) }
  def codec_server
  end

  # Codec server spec used by UI to decode payloads for all users interacting with this namespace.
# Optional, default is unset.
  sig { params(value: T.nilable(Temporalio::Api::Cloud::Namespace::V1::CodecServerSpec)).void }
  def codec_server=(value)
  end

  # Codec server spec used by UI to decode payloads for all users interacting with this namespace.
# Optional, default is unset.
  sig { void }
  def clear_codec_server
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Namespace::V1::Endpoints
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Namespace::V1::Endpoints) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::Endpoints).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Namespace::V1::Endpoints) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::Endpoints, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      web_address: T.nilable(String),
      mtls_grpc_address: T.nilable(String),
      grpc_address: T.nilable(String)
    ).void
  end
  def initialize(
    web_address: "",
    mtls_grpc_address: "",
    grpc_address: ""
  )
  end

  # The web UI address.
  sig { returns(String) }
  def web_address
  end

  # The web UI address.
  sig { params(value: String).void }
  def web_address=(value)
  end

  # The web UI address.
  sig { void }
  def clear_web_address
  end

  # The gRPC address for mTLS client connections (may be empty if mTLS is disabled).
  sig { returns(String) }
  def mtls_grpc_address
  end

  # The gRPC address for mTLS client connections (may be empty if mTLS is disabled).
  sig { params(value: String).void }
  def mtls_grpc_address=(value)
  end

  # The gRPC address for mTLS client connections (may be empty if mTLS is disabled).
  sig { void }
  def clear_mtls_grpc_address
  end

  # The gRPC address for API key client connections (may be empty if API keys are disabled).
  sig { returns(String) }
  def grpc_address
  end

  # The gRPC address for API key client connections (may be empty if API keys are disabled).
  sig { params(value: String).void }
  def grpc_address=(value)
  end

  # The gRPC address for API key client connections (may be empty if API keys are disabled).
  sig { void }
  def clear_grpc_address
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Namespace::V1::Limits
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Namespace::V1::Limits) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::Limits).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Namespace::V1::Limits) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::Limits, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      actions_per_second_limit: T.nilable(Integer)
    ).void
  end
  def initialize(
    actions_per_second_limit: 0
  )
  end

  # The number of actions per second (APS) that is currently allowed for the namespace.
# The namespace may be throttled if its APS exceeds the limit.
  sig { returns(Integer) }
  def actions_per_second_limit
  end

  # The number of actions per second (APS) that is currently allowed for the namespace.
# The namespace may be throttled if its APS exceeds the limit.
  sig { params(value: Integer).void }
  def actions_per_second_limit=(value)
  end

  # The number of actions per second (APS) that is currently allowed for the namespace.
# The namespace may be throttled if its APS exceeds the limit.
  sig { void }
  def clear_actions_per_second_limit
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Namespace::V1::AWSPrivateLinkInfo
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Namespace::V1::AWSPrivateLinkInfo) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::AWSPrivateLinkInfo).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Namespace::V1::AWSPrivateLinkInfo) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::AWSPrivateLinkInfo, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      allowed_principal_arns: T.nilable(T::Array[String]),
      vpc_endpoint_service_names: T.nilable(T::Array[String])
    ).void
  end
  def initialize(
    allowed_principal_arns: [],
    vpc_endpoint_service_names: []
  )
  end

  # The list of principal arns that are allowed to access the namespace on the private link.
  sig { returns(T::Array[String]) }
  def allowed_principal_arns
  end

  # The list of principal arns that are allowed to access the namespace on the private link.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def allowed_principal_arns=(value)
  end

  # The list of principal arns that are allowed to access the namespace on the private link.
  sig { void }
  def clear_allowed_principal_arns
  end

  # The list of vpc endpoint service names that are associated with the namespace.
  sig { returns(T::Array[String]) }
  def vpc_endpoint_service_names
  end

  # The list of vpc endpoint service names that are associated with the namespace.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def vpc_endpoint_service_names=(value)
  end

  # The list of vpc endpoint service names that are associated with the namespace.
  sig { void }
  def clear_vpc_endpoint_service_names
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Namespace::V1::PrivateConnectivity
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Namespace::V1::PrivateConnectivity) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::PrivateConnectivity).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Namespace::V1::PrivateConnectivity) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::PrivateConnectivity, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      region: T.nilable(String),
      aws_private_link: T.nilable(Temporalio::Api::Cloud::Namespace::V1::AWSPrivateLinkInfo)
    ).void
  end
  def initialize(
    region: "",
    aws_private_link: nil
  )
  end

  # The id of the region where the private connectivity applies.
  sig { returns(String) }
  def region
  end

  # The id of the region where the private connectivity applies.
  sig { params(value: String).void }
  def region=(value)
  end

  # The id of the region where the private connectivity applies.
  sig { void }
  def clear_region
  end

  # The AWS PrivateLink info.
# This will only be set for an aws region.
  sig { returns(T.nilable(Temporalio::Api::Cloud::Namespace::V1::AWSPrivateLinkInfo)) }
  def aws_private_link
  end

  # The AWS PrivateLink info.
# This will only be set for an aws region.
  sig { params(value: T.nilable(Temporalio::Api::Cloud::Namespace::V1::AWSPrivateLinkInfo)).void }
  def aws_private_link=(value)
  end

  # The AWS PrivateLink info.
# This will only be set for an aws region.
  sig { void }
  def clear_aws_private_link
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Namespace::V1::Namespace
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Namespace::V1::Namespace) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::Namespace).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Namespace::V1::Namespace) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::Namespace, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      namespace: T.nilable(String),
      resource_version: T.nilable(String),
      spec: T.nilable(Temporalio::Api::Cloud::Namespace::V1::NamespaceSpec),
      state: T.nilable(String),
      async_operation_id: T.nilable(String),
      endpoints: T.nilable(Temporalio::Api::Cloud::Namespace::V1::Endpoints),
      active_region: T.nilable(String),
      limits: T.nilable(Temporalio::Api::Cloud::Namespace::V1::Limits),
      private_connectivities: T.nilable(T::Array[T.nilable(Temporalio::Api::Cloud::Namespace::V1::PrivateConnectivity)]),
      created_time: T.nilable(Google::Protobuf::Timestamp),
      last_modified_time: T.nilable(Google::Protobuf::Timestamp),
      region_status: T.nilable(T::Hash[String, T.nilable(Temporalio::Api::Cloud::Namespace::V1::NamespaceRegionStatus)])
    ).void
  end
  def initialize(
    namespace: "",
    resource_version: "",
    spec: nil,
    state: "",
    async_operation_id: "",
    endpoints: nil,
    active_region: "",
    limits: nil,
    private_connectivities: [],
    created_time: nil,
    last_modified_time: nil,
    region_status: ::Google::Protobuf::Map.new(:string, :message, Temporalio::Api::Cloud::Namespace::V1::NamespaceRegionStatus)
  )
  end

  # The namespace identifier.
  sig { returns(String) }
  def namespace
  end

  # The namespace identifier.
  sig { params(value: String).void }
  def namespace=(value)
  end

  # The namespace identifier.
  sig { void }
  def clear_namespace
  end

  # The current version of the namespace specification.
# The next update operation will have to include this version.
  sig { returns(String) }
  def resource_version
  end

  # The current version of the namespace specification.
# The next update operation will have to include this version.
  sig { params(value: String).void }
  def resource_version=(value)
  end

  # The current version of the namespace specification.
# The next update operation will have to include this version.
  sig { void }
  def clear_resource_version
  end

  # The namespace specification.
  sig { returns(T.nilable(Temporalio::Api::Cloud::Namespace::V1::NamespaceSpec)) }
  def spec
  end

  # The namespace specification.
  sig { params(value: T.nilable(Temporalio::Api::Cloud::Namespace::V1::NamespaceSpec)).void }
  def spec=(value)
  end

  # The namespace specification.
  sig { void }
  def clear_spec
  end

  # The current state of the namespace.
  sig { returns(String) }
  def state
  end

  # The current state of the namespace.
  sig { params(value: String).void }
  def state=(value)
  end

  # The current state of the namespace.
  sig { void }
  def clear_state
  end

  # The id of the async operation that is creating/updating/deleting the namespace, if any.
  sig { returns(String) }
  def async_operation_id
  end

  # The id of the async operation that is creating/updating/deleting the namespace, if any.
  sig { params(value: String).void }
  def async_operation_id=(value)
  end

  # The id of the async operation that is creating/updating/deleting the namespace, if any.
  sig { void }
  def clear_async_operation_id
  end

  # The endpoints for the namespace.
  sig { returns(T.nilable(Temporalio::Api::Cloud::Namespace::V1::Endpoints)) }
  def endpoints
  end

  # The endpoints for the namespace.
  sig { params(value: T.nilable(Temporalio::Api::Cloud::Namespace::V1::Endpoints)).void }
  def endpoints=(value)
  end

  # The endpoints for the namespace.
  sig { void }
  def clear_endpoints
  end

  # The currently active region for the namespace.
  sig { returns(String) }
  def active_region
  end

  # The currently active region for the namespace.
  sig { params(value: String).void }
  def active_region=(value)
  end

  # The currently active region for the namespace.
  sig { void }
  def clear_active_region
  end

  # The limits set on the namespace currently.
  sig { returns(T.nilable(Temporalio::Api::Cloud::Namespace::V1::Limits)) }
  def limits
  end

  # The limits set on the namespace currently.
  sig { params(value: T.nilable(Temporalio::Api::Cloud::Namespace::V1::Limits)).void }
  def limits=(value)
  end

  # The limits set on the namespace currently.
  sig { void }
  def clear_limits
  end

  # The private connectivities for the namespace, if any.
  sig { returns(T::Array[T.nilable(Temporalio::Api::Cloud::Namespace::V1::PrivateConnectivity)]) }
  def private_connectivities
  end

  # The private connectivities for the namespace, if any.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def private_connectivities=(value)
  end

  # The private connectivities for the namespace, if any.
  sig { void }
  def clear_private_connectivities
  end

  # The date and time when the namespace was created.
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_time
  end

  # The date and time when the namespace was created.
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_time=(value)
  end

  # The date and time when the namespace was created.
  sig { void }
  def clear_created_time
  end

  # The date and time when the namespace was last modified.
# Will not be set if the namespace has never been modified.
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def last_modified_time
  end

  # The date and time when the namespace was last modified.
# Will not be set if the namespace has never been modified.
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def last_modified_time=(value)
  end

  # The date and time when the namespace was last modified.
# Will not be set if the namespace has never been modified.
  sig { void }
  def clear_last_modified_time
  end

  # The status of each region where the namespace is available.
# The id of the region is the key and the status is the value of the map.
  sig { returns(T::Hash[String, T.nilable(Temporalio::Api::Cloud::Namespace::V1::NamespaceRegionStatus)]) }
  def region_status
  end

  # The status of each region where the namespace is available.
# The id of the region is the key and the status is the value of the map.
  sig { params(value: ::Google::Protobuf::Map).void }
  def region_status=(value)
  end

  # The status of each region where the namespace is available.
# The id of the region is the key and the status is the value of the map.
  sig { void }
  def clear_region_status
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Namespace::V1::NamespaceRegionStatus
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Namespace::V1::NamespaceRegionStatus) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::NamespaceRegionStatus).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Namespace::V1::NamespaceRegionStatus) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Namespace::V1::NamespaceRegionStatus, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      state: T.nilable(String),
      async_operation_id: T.nilable(String)
    ).void
  end
  def initialize(
    state: "",
    async_operation_id: ""
  )
  end

  # The current state of the namespace region.
# Possible values: adding, active, passive, removing, failed.
# For any failed state, reach out to Temporal Cloud support for remediation.
  sig { returns(String) }
  def state
  end

  # The current state of the namespace region.
# Possible values: adding, active, passive, removing, failed.
# For any failed state, reach out to Temporal Cloud support for remediation.
  sig { params(value: String).void }
  def state=(value)
  end

  # The current state of the namespace region.
# Possible values: adding, active, passive, removing, failed.
# For any failed state, reach out to Temporal Cloud support for remediation.
  sig { void }
  def clear_state
  end

  # The id of the async operation that is making changes to where the namespace is available, if any.
  sig { returns(String) }
  def async_operation_id
  end

  # The id of the async operation that is making changes to where the namespace is available, if any.
  sig { params(value: String).void }
  def async_operation_id=(value)
  end

  # The id of the async operation that is making changes to where the namespace is available, if any.
  sig { void }
  def clear_async_operation_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end
