# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: temporal/api/cloud/identity/v1/message.proto
# typed: strict

class Temporalio::Api::Cloud::Identity::V1::AccountAccess
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Identity::V1::AccountAccess) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::AccountAccess).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Identity::V1::AccountAccess) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::AccountAccess, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      role: T.nilable(String)
    ).void
  end
  def initialize(
    role: ""
  )
  end

  # The role on the account, should be one of [admin, developer, read]
# admin - gives full access the account, including users and namespaces
# developer - gives access to create namespaces on the account
# read - gives read only access to the account
  sig { returns(String) }
  def role
  end

  # The role on the account, should be one of [admin, developer, read]
# admin - gives full access the account, including users and namespaces
# developer - gives access to create namespaces on the account
# read - gives read only access to the account
  sig { params(value: String).void }
  def role=(value)
  end

  # The role on the account, should be one of [admin, developer, read]
# admin - gives full access the account, including users and namespaces
# developer - gives access to create namespaces on the account
# read - gives read only access to the account
  sig { void }
  def clear_role
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Identity::V1::NamespaceAccess
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Identity::V1::NamespaceAccess) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::NamespaceAccess).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Identity::V1::NamespaceAccess) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::NamespaceAccess, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      permission: T.nilable(String)
    ).void
  end
  def initialize(
    permission: ""
  )
  end

  # The permission to the namespace, should be one of [admin, write, read]
# admin - gives full access to the namespace, including assigning namespace access to other users
# write - gives write access to the namespace configuration and workflows within the namespace
# read - gives read only access to the namespace configuration and workflows within the namespace
  sig { returns(String) }
  def permission
  end

  # The permission to the namespace, should be one of [admin, write, read]
# admin - gives full access to the namespace, including assigning namespace access to other users
# write - gives write access to the namespace configuration and workflows within the namespace
# read - gives read only access to the namespace configuration and workflows within the namespace
  sig { params(value: String).void }
  def permission=(value)
  end

  # The permission to the namespace, should be one of [admin, write, read]
# admin - gives full access to the namespace, including assigning namespace access to other users
# write - gives write access to the namespace configuration and workflows within the namespace
# read - gives read only access to the namespace configuration and workflows within the namespace
  sig { void }
  def clear_permission
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Identity::V1::Access
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Identity::V1::Access) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::Access).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Identity::V1::Access) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::Access, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      account_access: T.nilable(Temporalio::Api::Cloud::Identity::V1::AccountAccess),
      namespace_accesses: T.nilable(T::Hash[String, T.nilable(Temporalio::Api::Cloud::Identity::V1::NamespaceAccess)])
    ).void
  end
  def initialize(
    account_access: nil,
    namespace_accesses: ::Google::Protobuf::Map.new(:string, :message, Temporalio::Api::Cloud::Identity::V1::NamespaceAccess)
  )
  end

  # The account access
  sig { returns(T.nilable(Temporalio::Api::Cloud::Identity::V1::AccountAccess)) }
  def account_access
  end

  # The account access
  sig { params(value: T.nilable(Temporalio::Api::Cloud::Identity::V1::AccountAccess)).void }
  def account_access=(value)
  end

  # The account access
  sig { void }
  def clear_account_access
  end

  # The map of namespace accesses
# The key is the namespace name and the value is the access to the namespace
  sig { returns(T::Hash[String, T.nilable(Temporalio::Api::Cloud::Identity::V1::NamespaceAccess)]) }
  def namespace_accesses
  end

  # The map of namespace accesses
# The key is the namespace name and the value is the access to the namespace
  sig { params(value: ::Google::Protobuf::Map).void }
  def namespace_accesses=(value)
  end

  # The map of namespace accesses
# The key is the namespace name and the value is the access to the namespace
  sig { void }
  def clear_namespace_accesses
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Identity::V1::UserSpec
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Identity::V1::UserSpec) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::UserSpec).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Identity::V1::UserSpec) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::UserSpec, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      email: T.nilable(String),
      access: T.nilable(Temporalio::Api::Cloud::Identity::V1::Access)
    ).void
  end
  def initialize(
    email: "",
    access: nil
  )
  end

  # The email address associated to the user
  sig { returns(String) }
  def email
  end

  # The email address associated to the user
  sig { params(value: String).void }
  def email=(value)
  end

  # The email address associated to the user
  sig { void }
  def clear_email
  end

  # The access to assigned to the user
  sig { returns(T.nilable(Temporalio::Api::Cloud::Identity::V1::Access)) }
  def access
  end

  # The access to assigned to the user
  sig { params(value: T.nilable(Temporalio::Api::Cloud::Identity::V1::Access)).void }
  def access=(value)
  end

  # The access to assigned to the user
  sig { void }
  def clear_access
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Identity::V1::Invitation
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Identity::V1::Invitation) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::Invitation).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Identity::V1::Invitation) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::Invitation, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      created_time: T.nilable(Google::Protobuf::Timestamp),
      expired_time: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(
    created_time: nil,
    expired_time: nil
  )
  end

  # The date and time when the user was created
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_time
  end

  # The date and time when the user was created
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_time=(value)
  end

  # The date and time when the user was created
  sig { void }
  def clear_created_time
  end

  # The date and time when the invitation expires or has expired
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def expired_time
  end

  # The date and time when the invitation expires or has expired
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def expired_time=(value)
  end

  # The date and time when the invitation expires or has expired
  sig { void }
  def clear_expired_time
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Identity::V1::User
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Identity::V1::User) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::User).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Identity::V1::User) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::User, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      id: T.nilable(String),
      resource_version: T.nilable(String),
      spec: T.nilable(Temporalio::Api::Cloud::Identity::V1::UserSpec),
      state: T.nilable(String),
      async_operation_id: T.nilable(String),
      invitation: T.nilable(Temporalio::Api::Cloud::Identity::V1::Invitation),
      created_time: T.nilable(Google::Protobuf::Timestamp),
      last_modified_time: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(
    id: "",
    resource_version: "",
    spec: nil,
    state: "",
    async_operation_id: "",
    invitation: nil,
    created_time: nil,
    last_modified_time: nil
  )
  end

  # The id of the user
  sig { returns(String) }
  def id
  end

  # The id of the user
  sig { params(value: String).void }
  def id=(value)
  end

  # The id of the user
  sig { void }
  def clear_id
  end

  # The current version of the user specification
# The next update operation will have to include this version
  sig { returns(String) }
  def resource_version
  end

  # The current version of the user specification
# The next update operation will have to include this version
  sig { params(value: String).void }
  def resource_version=(value)
  end

  # The current version of the user specification
# The next update operation will have to include this version
  sig { void }
  def clear_resource_version
  end

  # The user specification
  sig { returns(T.nilable(Temporalio::Api::Cloud::Identity::V1::UserSpec)) }
  def spec
  end

  # The user specification
  sig { params(value: T.nilable(Temporalio::Api::Cloud::Identity::V1::UserSpec)).void }
  def spec=(value)
  end

  # The user specification
  sig { void }
  def clear_spec
  end

  # The current state of the user
  sig { returns(String) }
  def state
  end

  # The current state of the user
  sig { params(value: String).void }
  def state=(value)
  end

  # The current state of the user
  sig { void }
  def clear_state
  end

  # The id of the async operation that is creating/updating/deleting the user, if any
  sig { returns(String) }
  def async_operation_id
  end

  # The id of the async operation that is creating/updating/deleting the user, if any
  sig { params(value: String).void }
  def async_operation_id=(value)
  end

  # The id of the async operation that is creating/updating/deleting the user, if any
  sig { void }
  def clear_async_operation_id
  end

  # The details of the open invitation sent to the user, if any
  sig { returns(T.nilable(Temporalio::Api::Cloud::Identity::V1::Invitation)) }
  def invitation
  end

  # The details of the open invitation sent to the user, if any
  sig { params(value: T.nilable(Temporalio::Api::Cloud::Identity::V1::Invitation)).void }
  def invitation=(value)
  end

  # The details of the open invitation sent to the user, if any
  sig { void }
  def clear_invitation
  end

  # The date and time when the user was created
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_time
  end

  # The date and time when the user was created
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_time=(value)
  end

  # The date and time when the user was created
  sig { void }
  def clear_created_time
  end

  # The date and time when the user was last modified
# Will not be set if the user has never been modified
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def last_modified_time
  end

  # The date and time when the user was last modified
# Will not be set if the user has never been modified
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def last_modified_time=(value)
  end

  # The date and time when the user was last modified
# Will not be set if the user has never been modified
  sig { void }
  def clear_last_modified_time
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Identity::V1::UserGroupSpec
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Identity::V1::UserGroupSpec) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::UserGroupSpec).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Identity::V1::UserGroupSpec) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::UserGroupSpec, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      name: T.nilable(String),
      access: T.nilable(Temporalio::Api::Cloud::Identity::V1::Access)
    ).void
  end
  def initialize(
    name: "",
    access: nil
  )
  end

  # The name of the group as defined in the customer's IdP (e.g. Google group name in Google Workspace)
# The name is immutable. Once set, it cannot be changed
  sig { returns(String) }
  def name
  end

  # The name of the group as defined in the customer's IdP (e.g. Google group name in Google Workspace)
# The name is immutable. Once set, it cannot be changed
  sig { params(value: String).void }
  def name=(value)
  end

  # The name of the group as defined in the customer's IdP (e.g. Google group name in Google Workspace)
# The name is immutable. Once set, it cannot be changed
  sig { void }
  def clear_name
  end

  # The access assigned to the group
  sig { returns(T.nilable(Temporalio::Api::Cloud::Identity::V1::Access)) }
  def access
  end

  # The access assigned to the group
  sig { params(value: T.nilable(Temporalio::Api::Cloud::Identity::V1::Access)).void }
  def access=(value)
  end

  # The access assigned to the group
  sig { void }
  def clear_access
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Identity::V1::UserGroup
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Identity::V1::UserGroup) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::UserGroup).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Identity::V1::UserGroup) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::UserGroup, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      id: T.nilable(String),
      resource_version: T.nilable(String),
      spec: T.nilable(Temporalio::Api::Cloud::Identity::V1::UserGroupSpec),
      state: T.nilable(String),
      async_operation_id: T.nilable(String),
      created_time: T.nilable(Google::Protobuf::Timestamp),
      last_modified_time: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(
    id: "",
    resource_version: "",
    spec: nil,
    state: "",
    async_operation_id: "",
    created_time: nil,
    last_modified_time: nil
  )
  end

  # The id of the group
  sig { returns(String) }
  def id
  end

  # The id of the group
  sig { params(value: String).void }
  def id=(value)
  end

  # The id of the group
  sig { void }
  def clear_id
  end

  # The current version of the group specification
# The next update operation will have to include this version
  sig { returns(String) }
  def resource_version
  end

  # The current version of the group specification
# The next update operation will have to include this version
  sig { params(value: String).void }
  def resource_version=(value)
  end

  # The current version of the group specification
# The next update operation will have to include this version
  sig { void }
  def clear_resource_version
  end

  # The group specification
  sig { returns(T.nilable(Temporalio::Api::Cloud::Identity::V1::UserGroupSpec)) }
  def spec
  end

  # The group specification
  sig { params(value: T.nilable(Temporalio::Api::Cloud::Identity::V1::UserGroupSpec)).void }
  def spec=(value)
  end

  # The group specification
  sig { void }
  def clear_spec
  end

  # The current state of the group
  sig { returns(String) }
  def state
  end

  # The current state of the group
  sig { params(value: String).void }
  def state=(value)
  end

  # The current state of the group
  sig { void }
  def clear_state
  end

  # The id of the async operation that is creating/updating/deleting the group, if any
  sig { returns(String) }
  def async_operation_id
  end

  # The id of the async operation that is creating/updating/deleting the group, if any
  sig { params(value: String).void }
  def async_operation_id=(value)
  end

  # The id of the async operation that is creating/updating/deleting the group, if any
  sig { void }
  def clear_async_operation_id
  end

  # The date and time when the group was created
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_time
  end

  # The date and time when the group was created
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_time=(value)
  end

  # The date and time when the group was created
  sig { void }
  def clear_created_time
  end

  # The date and time when the group was last modified
# Will not be set if the group has never been modified
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def last_modified_time
  end

  # The date and time when the group was last modified
# Will not be set if the group has never been modified
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def last_modified_time=(value)
  end

  # The date and time when the group was last modified
# Will not be set if the group has never been modified
  sig { void }
  def clear_last_modified_time
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Identity::V1::ServiceAccount
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Identity::V1::ServiceAccount) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::ServiceAccount).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Identity::V1::ServiceAccount) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::ServiceAccount, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      id: T.nilable(String),
      resource_version: T.nilable(String),
      spec: T.nilable(Temporalio::Api::Cloud::Identity::V1::ServiceAccountSpec),
      state: T.nilable(String),
      async_operation_id: T.nilable(String),
      created_time: T.nilable(Google::Protobuf::Timestamp),
      last_modified_time: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(
    id: "",
    resource_version: "",
    spec: nil,
    state: "",
    async_operation_id: "",
    created_time: nil,
    last_modified_time: nil
  )
  end

  # The id of the service account.
  sig { returns(String) }
  def id
  end

  # The id of the service account.
  sig { params(value: String).void }
  def id=(value)
  end

  # The id of the service account.
  sig { void }
  def clear_id
  end

  # The current version of the service account specification.
# The next update operation will have to include this version.
  sig { returns(String) }
  def resource_version
  end

  # The current version of the service account specification.
# The next update operation will have to include this version.
  sig { params(value: String).void }
  def resource_version=(value)
  end

  # The current version of the service account specification.
# The next update operation will have to include this version.
  sig { void }
  def clear_resource_version
  end

  # The service account specification.
  sig { returns(T.nilable(Temporalio::Api::Cloud::Identity::V1::ServiceAccountSpec)) }
  def spec
  end

  # The service account specification.
  sig { params(value: T.nilable(Temporalio::Api::Cloud::Identity::V1::ServiceAccountSpec)).void }
  def spec=(value)
  end

  # The service account specification.
  sig { void }
  def clear_spec
  end

  # The current state of the service account.
# Possible values: activating, activationfailed, active, updating, updatefailed, deleting, deletefailed, deleted, suspending, suspendfailed, suspended.
# For any failed state, reach out to Temporal Cloud support for remediation.
  sig { returns(String) }
  def state
  end

  # The current state of the service account.
# Possible values: activating, activationfailed, active, updating, updatefailed, deleting, deletefailed, deleted, suspending, suspendfailed, suspended.
# For any failed state, reach out to Temporal Cloud support for remediation.
  sig { params(value: String).void }
  def state=(value)
  end

  # The current state of the service account.
# Possible values: activating, activationfailed, active, updating, updatefailed, deleting, deletefailed, deleted, suspending, suspendfailed, suspended.
# For any failed state, reach out to Temporal Cloud support for remediation.
  sig { void }
  def clear_state
  end

  # The id of the async operation that is creating/updating/deleting the service account, if any.
  sig { returns(String) }
  def async_operation_id
  end

  # The id of the async operation that is creating/updating/deleting the service account, if any.
  sig { params(value: String).void }
  def async_operation_id=(value)
  end

  # The id of the async operation that is creating/updating/deleting the service account, if any.
  sig { void }
  def clear_async_operation_id
  end

  # The date and time when the service account was created.
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_time
  end

  # The date and time when the service account was created.
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_time=(value)
  end

  # The date and time when the service account was created.
  sig { void }
  def clear_created_time
  end

  # The date and time when the service account was last modified
# Will not be set if the service account has never been modified.
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def last_modified_time
  end

  # The date and time when the service account was last modified
# Will not be set if the service account has never been modified.
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def last_modified_time=(value)
  end

  # The date and time when the service account was last modified
# Will not be set if the service account has never been modified.
  sig { void }
  def clear_last_modified_time
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Identity::V1::ServiceAccountSpec
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Identity::V1::ServiceAccountSpec) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::ServiceAccountSpec).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Identity::V1::ServiceAccountSpec) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::ServiceAccountSpec, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      name: T.nilable(String),
      access: T.nilable(Temporalio::Api::Cloud::Identity::V1::Access),
      description: T.nilable(String)
    ).void
  end
  def initialize(
    name: "",
    access: nil,
    description: ""
  )
  end

  # The name associated with the service account.
# The name is mutable, but must be unique across all your active service accounts.
  sig { returns(String) }
  def name
  end

  # The name associated with the service account.
# The name is mutable, but must be unique across all your active service accounts.
  sig { params(value: String).void }
  def name=(value)
  end

  # The name associated with the service account.
# The name is mutable, but must be unique across all your active service accounts.
  sig { void }
  def clear_name
  end

  # The access assigned to the service account.
# The access is mutable.
  sig { returns(T.nilable(Temporalio::Api::Cloud::Identity::V1::Access)) }
  def access
  end

  # The access assigned to the service account.
# The access is mutable.
  sig { params(value: T.nilable(Temporalio::Api::Cloud::Identity::V1::Access)).void }
  def access=(value)
  end

  # The access assigned to the service account.
# The access is mutable.
  sig { void }
  def clear_access
  end

  # The description associated with the service account - optional.
# The description is mutable.
  sig { returns(String) }
  def description
  end

  # The description associated with the service account - optional.
# The description is mutable.
  sig { params(value: String).void }
  def description=(value)
  end

  # The description associated with the service account - optional.
# The description is mutable.
  sig { void }
  def clear_description
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Identity::V1::ApiKey
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Identity::V1::ApiKey) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::ApiKey).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Identity::V1::ApiKey) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::ApiKey, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      id: T.nilable(String),
      resource_version: T.nilable(String),
      spec: T.nilable(Temporalio::Api::Cloud::Identity::V1::ApiKeySpec),
      state: T.nilable(String),
      async_operation_id: T.nilable(String),
      created_time: T.nilable(Google::Protobuf::Timestamp),
      last_modified_time: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(
    id: "",
    resource_version: "",
    spec: nil,
    state: "",
    async_operation_id: "",
    created_time: nil,
    last_modified_time: nil
  )
  end

  # The id of the API Key.
  sig { returns(String) }
  def id
  end

  # The id of the API Key.
  sig { params(value: String).void }
  def id=(value)
  end

  # The id of the API Key.
  sig { void }
  def clear_id
  end

  # The current version of the API key specification.
# The next update operation will have to include this version.
  sig { returns(String) }
  def resource_version
  end

  # The current version of the API key specification.
# The next update operation will have to include this version.
  sig { params(value: String).void }
  def resource_version=(value)
  end

  # The current version of the API key specification.
# The next update operation will have to include this version.
  sig { void }
  def clear_resource_version
  end

  # The API key specification.
  sig { returns(T.nilable(Temporalio::Api::Cloud::Identity::V1::ApiKeySpec)) }
  def spec
  end

  # The API key specification.
  sig { params(value: T.nilable(Temporalio::Api::Cloud::Identity::V1::ApiKeySpec)).void }
  def spec=(value)
  end

  # The API key specification.
  sig { void }
  def clear_spec
  end

  # The current state of the API key.
# Possible values: activating, activationfailed, active, updating, updatefailed, deleting, deletefailed, deleted, suspending, suspendfailed, suspended.
# For any failed state, reach out to Temporal Cloud support for remediation.
  sig { returns(String) }
  def state
  end

  # The current state of the API key.
# Possible values: activating, activationfailed, active, updating, updatefailed, deleting, deletefailed, deleted, suspending, suspendfailed, suspended.
# For any failed state, reach out to Temporal Cloud support for remediation.
  sig { params(value: String).void }
  def state=(value)
  end

  # The current state of the API key.
# Possible values: activating, activationfailed, active, updating, updatefailed, deleting, deletefailed, deleted, suspending, suspendfailed, suspended.
# For any failed state, reach out to Temporal Cloud support for remediation.
  sig { void }
  def clear_state
  end

  # The id of the async operation that is creating/updating/deleting the API key, if any.
  sig { returns(String) }
  def async_operation_id
  end

  # The id of the async operation that is creating/updating/deleting the API key, if any.
  sig { params(value: String).void }
  def async_operation_id=(value)
  end

  # The id of the async operation that is creating/updating/deleting the API key, if any.
  sig { void }
  def clear_async_operation_id
  end

  # The date and time when the API key was created.
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_time
  end

  # The date and time when the API key was created.
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_time=(value)
  end

  # The date and time when the API key was created.
  sig { void }
  def clear_created_time
  end

  # The date and time when the API key was last modified.
# Will not be set if the API key has never been modified.
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def last_modified_time
  end

  # The date and time when the API key was last modified.
# Will not be set if the API key has never been modified.
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def last_modified_time=(value)
  end

  # The date and time when the API key was last modified.
# Will not be set if the API key has never been modified.
  sig { void }
  def clear_last_modified_time
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Cloud::Identity::V1::ApiKeySpec
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Cloud::Identity::V1::ApiKeySpec) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::ApiKeySpec).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Cloud::Identity::V1::ApiKeySpec) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Cloud::Identity::V1::ApiKeySpec, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      owner_id: T.nilable(String),
      owner_type: T.nilable(String),
      display_name: T.nilable(String),
      description: T.nilable(String),
      expiry_time: T.nilable(Google::Protobuf::Timestamp),
      disabled: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    owner_id: "",
    owner_type: "",
    display_name: "",
    description: "",
    expiry_time: nil,
    disabled: false
  )
  end

  # The id of the owner to create the API key for.
# The owner id is immutable. Once set during creation, it cannot be changed.
# The owner id is the id of the user when the owner type is 'user'.
# The owner id is the id of the service account when the owner type is 'service-account'.
  sig { returns(String) }
  def owner_id
  end

  # The id of the owner to create the API key for.
# The owner id is immutable. Once set during creation, it cannot be changed.
# The owner id is the id of the user when the owner type is 'user'.
# The owner id is the id of the service account when the owner type is 'service-account'.
  sig { params(value: String).void }
  def owner_id=(value)
  end

  # The id of the owner to create the API key for.
# The owner id is immutable. Once set during creation, it cannot be changed.
# The owner id is the id of the user when the owner type is 'user'.
# The owner id is the id of the service account when the owner type is 'service-account'.
  sig { void }
  def clear_owner_id
  end

  # The type of the owner to create the API key for.
# The owner type is immutable. Once set during creation, it cannot be changed.
# Possible values: user, service-account.
  sig { returns(String) }
  def owner_type
  end

  # The type of the owner to create the API key for.
# The owner type is immutable. Once set during creation, it cannot be changed.
# Possible values: user, service-account.
  sig { params(value: String).void }
  def owner_type=(value)
  end

  # The type of the owner to create the API key for.
# The owner type is immutable. Once set during creation, it cannot be changed.
# Possible values: user, service-account.
  sig { void }
  def clear_owner_type
  end

  # The display name of the API key.
  sig { returns(String) }
  def display_name
  end

  # The display name of the API key.
  sig { params(value: String).void }
  def display_name=(value)
  end

  # The display name of the API key.
  sig { void }
  def clear_display_name
  end

  # The description of the API key.
  sig { returns(String) }
  def description
  end

  # The description of the API key.
  sig { params(value: String).void }
  def description=(value)
  end

  # The description of the API key.
  sig { void }
  def clear_description
  end

  # The expiry time of the API key.
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def expiry_time
  end

  # The expiry time of the API key.
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def expiry_time=(value)
  end

  # The expiry time of the API key.
  sig { void }
  def clear_expiry_time
  end

  # True if the API key is disabled.
  sig { returns(T::Boolean) }
  def disabled
  end

  # True if the API key is disabled.
  sig { params(value: T::Boolean).void }
  def disabled=(value)
  end

  # True if the API key is disabled.
  sig { void }
  def clear_disabled
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end
