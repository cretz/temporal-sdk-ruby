# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: temporal/api/query/v1/message.proto
# typed: strict

# See https://docs.temporal.io/docs/concepts/queries/
class Temporalio::Api::Query::V1::WorkflowQuery
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Query::V1::WorkflowQuery) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Query::V1::WorkflowQuery).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Query::V1::WorkflowQuery) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Query::V1::WorkflowQuery, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      query_type: T.nilable(String),
      query_args: T.nilable(Temporalio::Api::Common::V1::Payloads),
      header: T.nilable(Temporalio::Api::Common::V1::Header)
    ).void
  end
  def initialize(
    query_type: "",
    query_args: nil,
    header: nil
  )
  end

  # The workflow-author-defined identifier of the query. Typically a function name.
  sig { returns(String) }
  def query_type
  end

  # The workflow-author-defined identifier of the query. Typically a function name.
  sig { params(value: String).void }
  def query_type=(value)
  end

  # The workflow-author-defined identifier of the query. Typically a function name.
  sig { void }
  def clear_query_type
  end

  # Serialized arguments that will be provided to the query handler.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def query_args
  end

  # Serialized arguments that will be provided to the query handler.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def query_args=(value)
  end

  # Serialized arguments that will be provided to the query handler.
  sig { void }
  def clear_query_args
  end

  # Headers that were passed by the caller of the query and copied by temporal 
# server into the workflow task.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Header)) }
  def header
  end

  # Headers that were passed by the caller of the query and copied by temporal 
# server into the workflow task.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Header)).void }
  def header=(value)
  end

  # Headers that were passed by the caller of the query and copied by temporal 
# server into the workflow task.
  sig { void }
  def clear_header
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Answer to a `WorkflowQuery`
class Temporalio::Api::Query::V1::WorkflowQueryResult
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Query::V1::WorkflowQueryResult) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Query::V1::WorkflowQueryResult).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Query::V1::WorkflowQueryResult) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Query::V1::WorkflowQueryResult, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      result_type: T.nilable(T.any(Symbol, String, Integer)),
      answer: T.nilable(Temporalio::Api::Common::V1::Payloads),
      error_message: T.nilable(String)
    ).void
  end
  def initialize(
    result_type: :QUERY_RESULT_TYPE_UNSPECIFIED,
    answer: nil,
    error_message: ""
  )
  end

  # Did the query succeed or fail?
  sig { returns(T.any(Symbol, Integer)) }
  def result_type
  end

  # Did the query succeed or fail?
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def result_type=(value)
  end

  # Did the query succeed or fail?
  sig { void }
  def clear_result_type
  end

  # Set when the query succeeds with the results
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def answer
  end

  # Set when the query succeeds with the results
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def answer=(value)
  end

  # Set when the query succeeds with the results
  sig { void }
  def clear_answer
  end

  # Mutually exclusive with `answer`. Set when the query fails.
  sig { returns(String) }
  def error_message
  end

  # Mutually exclusive with `answer`. Set when the query fails.
  sig { params(value: String).void }
  def error_message=(value)
  end

  # Mutually exclusive with `answer`. Set when the query fails.
  sig { void }
  def clear_error_message
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Temporalio::Api::Query::V1::QueryRejected
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Query::V1::QueryRejected) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Query::V1::QueryRejected).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Query::V1::QueryRejected) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Query::V1::QueryRejected, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      status: T.nilable(T.any(Symbol, String, Integer))
    ).void
  end
  def initialize(
    status: :WORKFLOW_EXECUTION_STATUS_UNSPECIFIED
  )
  end

  sig { returns(T.any(Symbol, Integer)) }
  def status
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def status=(value)
  end

  sig { void }
  def clear_status
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end
