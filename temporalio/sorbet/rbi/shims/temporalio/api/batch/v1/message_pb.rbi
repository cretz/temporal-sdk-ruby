# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: temporal/api/batch/v1/message.proto
# typed: strict

class Temporalio::Api::Batch::V1::BatchOperationInfo
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Batch::V1::BatchOperationInfo) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Batch::V1::BatchOperationInfo).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Batch::V1::BatchOperationInfo) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Batch::V1::BatchOperationInfo, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      job_id: T.nilable(String),
      state: T.nilable(T.any(Symbol, String, Integer)),
      start_time: T.nilable(Google::Protobuf::Timestamp),
      close_time: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(
    job_id: "",
    state: :BATCH_OPERATION_STATE_UNSPECIFIED,
    start_time: nil,
    close_time: nil
  )
  end

  # Batch job ID
  sig { returns(String) }
  def job_id
  end

  # Batch job ID
  sig { params(value: String).void }
  def job_id=(value)
  end

  # Batch job ID
  sig { void }
  def clear_job_id
  end

  # Batch operation state
  sig { returns(T.any(Symbol, Integer)) }
  def state
  end

  # Batch operation state
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def state=(value)
  end

  # Batch operation state
  sig { void }
  def clear_state
  end

  # Batch operation start time
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def start_time
  end

  # Batch operation start time
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def start_time=(value)
  end

  # Batch operation start time
  sig { void }
  def clear_start_time
  end

  # Batch operation close time
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def close_time
  end

  # Batch operation close time
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def close_time=(value)
  end

  # Batch operation close time
  sig { void }
  def clear_close_time
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# BatchOperationTermination sends terminate requests to batch workflows.
# Keep the parameter in sync with temporal.api.workflowservice.v1.TerminateWorkflowExecutionRequest.
# Ignore first_execution_run_id because this is used for single workflow operation.
class Temporalio::Api::Batch::V1::BatchOperationTermination
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Batch::V1::BatchOperationTermination) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Batch::V1::BatchOperationTermination).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Batch::V1::BatchOperationTermination) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Batch::V1::BatchOperationTermination, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      details: T.nilable(Temporalio::Api::Common::V1::Payloads),
      identity: T.nilable(String)
    ).void
  end
  def initialize(
    details: nil,
    identity: ""
  )
  end

  # Serialized value(s) to provide to the termination event
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def details
  end

  # Serialized value(s) to provide to the termination event
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def details=(value)
  end

  # Serialized value(s) to provide to the termination event
  sig { void }
  def clear_details
  end

  # The identity of the worker/client
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client
  sig { void }
  def clear_identity
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# BatchOperationSignal sends signals to batch workflows.
# Keep the parameter in sync with temporal.api.workflowservice.v1.SignalWorkflowExecutionRequest.
class Temporalio::Api::Batch::V1::BatchOperationSignal
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Batch::V1::BatchOperationSignal) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Batch::V1::BatchOperationSignal).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Batch::V1::BatchOperationSignal) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Batch::V1::BatchOperationSignal, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      signal: T.nilable(String),
      input: T.nilable(Temporalio::Api::Common::V1::Payloads),
      header: T.nilable(Temporalio::Api::Common::V1::Header),
      identity: T.nilable(String)
    ).void
  end
  def initialize(
    signal: "",
    input: nil,
    header: nil,
    identity: ""
  )
  end

  # The workflow author-defined name of the signal to send to the workflow
  sig { returns(String) }
  def signal
  end

  # The workflow author-defined name of the signal to send to the workflow
  sig { params(value: String).void }
  def signal=(value)
  end

  # The workflow author-defined name of the signal to send to the workflow
  sig { void }
  def clear_signal
  end

  # Serialized value(s) to provide with the signal
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Payloads)) }
  def input
  end

  # Serialized value(s) to provide with the signal
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Payloads)).void }
  def input=(value)
  end

  # Serialized value(s) to provide with the signal
  sig { void }
  def clear_input
  end

  # Headers that are passed with the signal to the processing workflow.
# These can include things like auth or tracing tokens.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::Header)) }
  def header
  end

  # Headers that are passed with the signal to the processing workflow.
# These can include things like auth or tracing tokens.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::Header)).void }
  def header=(value)
  end

  # Headers that are passed with the signal to the processing workflow.
# These can include things like auth or tracing tokens.
  sig { void }
  def clear_header
  end

  # The identity of the worker/client
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client
  sig { void }
  def clear_identity
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# BatchOperationCancellation sends cancel requests to batch workflows.
# Keep the parameter in sync with temporal.api.workflowservice.v1.RequestCancelWorkflowExecutionRequest.
# Ignore first_execution_run_id because this is used for single workflow operation.
class Temporalio::Api::Batch::V1::BatchOperationCancellation
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Batch::V1::BatchOperationCancellation) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Batch::V1::BatchOperationCancellation).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Batch::V1::BatchOperationCancellation) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Batch::V1::BatchOperationCancellation, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      identity: T.nilable(String)
    ).void
  end
  def initialize(
    identity: ""
  )
  end

  # The identity of the worker/client
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client
  sig { void }
  def clear_identity
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# BatchOperationDeletion sends deletion requests to batch workflows.
# Keep the parameter in sync with temporal.api.workflowservice.v1.DeleteWorkflowExecutionRequest.
class Temporalio::Api::Batch::V1::BatchOperationDeletion
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Batch::V1::BatchOperationDeletion) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Batch::V1::BatchOperationDeletion).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Batch::V1::BatchOperationDeletion) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Batch::V1::BatchOperationDeletion, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      identity: T.nilable(String)
    ).void
  end
  def initialize(
    identity: ""
  )
  end

  # The identity of the worker/client
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client
  sig { void }
  def clear_identity
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# BatchOperationReset sends reset requests to batch workflows.
# Keep the parameter in sync with temporal.api.workflowservice.v1.ResetWorkflowExecutionRequest.
class Temporalio::Api::Batch::V1::BatchOperationReset
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Api::Batch::V1::BatchOperationReset) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Api::Batch::V1::BatchOperationReset).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Api::Batch::V1::BatchOperationReset) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Api::Batch::V1::BatchOperationReset, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      identity: T.nilable(String),
      options: T.nilable(Temporalio::Api::Common::V1::ResetOptions),
      reset_type: T.nilable(T.any(Symbol, String, Integer)),
      reset_reapply_type: T.nilable(T.any(Symbol, String, Integer))
    ).void
  end
  def initialize(
    identity: "",
    options: nil,
    reset_type: :RESET_TYPE_UNSPECIFIED,
    reset_reapply_type: :RESET_REAPPLY_TYPE_UNSPECIFIED
  )
  end

  # The identity of the worker/client.
  sig { returns(String) }
  def identity
  end

  # The identity of the worker/client.
  sig { params(value: String).void }
  def identity=(value)
  end

  # The identity of the worker/client.
  sig { void }
  def clear_identity
  end

  # Describes what to reset to and how. If set, `reset_type` and `reset_reapply_type` are ignored.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::ResetOptions)) }
  def options
  end

  # Describes what to reset to and how. If set, `reset_type` and `reset_reapply_type` are ignored.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::ResetOptions)).void }
  def options=(value)
  end

  # Describes what to reset to and how. If set, `reset_type` and `reset_reapply_type` are ignored.
  sig { void }
  def clear_options
  end

  # Reset type (deprecated, use `options`).
  sig { returns(T.any(Symbol, Integer)) }
  def reset_type
  end

  # Reset type (deprecated, use `options`).
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def reset_type=(value)
  end

  # Reset type (deprecated, use `options`).
  sig { void }
  def clear_reset_type
  end

  # History event reapply options (deprecated, use `options`).
  sig { returns(T.any(Symbol, Integer)) }
  def reset_reapply_type
  end

  # History event reapply options (deprecated, use `options`).
  sig { params(value: T.any(Symbol, String, Integer)).void }
  def reset_reapply_type=(value)
  end

  # History event reapply options (deprecated, use `options`).
  sig { void }
  def clear_reset_reapply_type
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end
