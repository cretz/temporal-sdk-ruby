# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: temporal/sdk/core/activity_task/activity_task.proto
# typed: strict

class Temporalio::Internal::Bridge::Api::ActivityTask::ActivityTask
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Internal::Bridge::Api::ActivityTask::ActivityTask) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Internal::Bridge::Api::ActivityTask::ActivityTask).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Internal::Bridge::Api::ActivityTask::ActivityTask) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Internal::Bridge::Api::ActivityTask::ActivityTask, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      task_token: T.nilable(String),
      start: T.nilable(Temporalio::Internal::Bridge::Api::ActivityTask::Start),
      cancel: T.nilable(Temporalio::Internal::Bridge::Api::ActivityTask::Cancel)
    ).void
  end
  def initialize(
    task_token: "",
    start: nil,
    cancel: nil
  )
  end

  # A unique identifier for this task
  sig { returns(String) }
  def task_token
  end

  # A unique identifier for this task
  sig { params(value: String).void }
  def task_token=(value)
  end

  # A unique identifier for this task
  sig { void }
  def clear_task_token
  end

  # Start activity execution.
  sig { returns(T.nilable(Temporalio::Internal::Bridge::Api::ActivityTask::Start)) }
  def start
  end

  # Start activity execution.
  sig { params(value: T.nilable(Temporalio::Internal::Bridge::Api::ActivityTask::Start)).void }
  def start=(value)
  end

  # Start activity execution.
  sig { void }
  def clear_start
  end

  # Attempt to cancel activity execution.
  sig { returns(T.nilable(Temporalio::Internal::Bridge::Api::ActivityTask::Cancel)) }
  def cancel
  end

  # Attempt to cancel activity execution.
  sig { params(value: T.nilable(Temporalio::Internal::Bridge::Api::ActivityTask::Cancel)).void }
  def cancel=(value)
  end

  # Attempt to cancel activity execution.
  sig { void }
  def clear_cancel
  end

  sig { returns(T.nilable(Symbol)) }
  def variant
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Begin executing an activity
class Temporalio::Internal::Bridge::Api::ActivityTask::Start
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Internal::Bridge::Api::ActivityTask::Start) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Internal::Bridge::Api::ActivityTask::Start).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Internal::Bridge::Api::ActivityTask::Start) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Internal::Bridge::Api::ActivityTask::Start, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      workflow_namespace: T.nilable(String),
      workflow_type: T.nilable(String),
      workflow_execution: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution),
      activity_id: T.nilable(String),
      activity_type: T.nilable(String),
      header_fields: T.nilable(T::Hash[String, T.nilable(Temporalio::Api::Common::V1::Payload)]),
      input: T.nilable(T::Array[T.nilable(Temporalio::Api::Common::V1::Payload)]),
      heartbeat_details: T.nilable(T::Array[T.nilable(Temporalio::Api::Common::V1::Payload)]),
      scheduled_time: T.nilable(Google::Protobuf::Timestamp),
      current_attempt_scheduled_time: T.nilable(Google::Protobuf::Timestamp),
      started_time: T.nilable(Google::Protobuf::Timestamp),
      attempt: T.nilable(Integer),
      schedule_to_close_timeout: T.nilable(Google::Protobuf::Duration),
      start_to_close_timeout: T.nilable(Google::Protobuf::Duration),
      heartbeat_timeout: T.nilable(Google::Protobuf::Duration),
      retry_policy: T.nilable(Temporalio::Api::Common::V1::RetryPolicy),
      is_local: T.nilable(T::Boolean)
    ).void
  end
  def initialize(
    workflow_namespace: "",
    workflow_type: "",
    workflow_execution: nil,
    activity_id: "",
    activity_type: "",
    header_fields: ::Google::Protobuf::Map.new(:string, :message, Temporalio::Api::Common::V1::Payload),
    input: [],
    heartbeat_details: [],
    scheduled_time: nil,
    current_attempt_scheduled_time: nil,
    started_time: nil,
    attempt: 0,
    schedule_to_close_timeout: nil,
    start_to_close_timeout: nil,
    heartbeat_timeout: nil,
    retry_policy: nil,
    is_local: false
  )
  end

  # The namespace the workflow lives in
  sig { returns(String) }
  def workflow_namespace
  end

  # The namespace the workflow lives in
  sig { params(value: String).void }
  def workflow_namespace=(value)
  end

  # The namespace the workflow lives in
  sig { void }
  def clear_workflow_namespace
  end

  # The workflow's type name or function identifier
  sig { returns(String) }
  def workflow_type
  end

  # The workflow's type name or function identifier
  sig { params(value: String).void }
  def workflow_type=(value)
  end

  # The workflow's type name or function identifier
  sig { void }
  def clear_workflow_type
  end

  # The workflow execution which requested this activity
  sig { returns(T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)) }
  def workflow_execution
  end

  # The workflow execution which requested this activity
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::WorkflowExecution)).void }
  def workflow_execution=(value)
  end

  # The workflow execution which requested this activity
  sig { void }
  def clear_workflow_execution
  end

  # The activity's ID
  sig { returns(String) }
  def activity_id
  end

  # The activity's ID
  sig { params(value: String).void }
  def activity_id=(value)
  end

  # The activity's ID
  sig { void }
  def clear_activity_id
  end

  # The activity's type name or function identifier
  sig { returns(String) }
  def activity_type
  end

  # The activity's type name or function identifier
  sig { params(value: String).void }
  def activity_type=(value)
  end

  # The activity's type name or function identifier
  sig { void }
  def clear_activity_type
  end

  sig { returns(T::Hash[String, T.nilable(Temporalio::Api::Common::V1::Payload)]) }
  def header_fields
  end

  sig { params(value: ::Google::Protobuf::Map).void }
  def header_fields=(value)
  end

  sig { void }
  def clear_header_fields
  end

  # Arguments to the activity
  sig { returns(T::Array[T.nilable(Temporalio::Api::Common::V1::Payload)]) }
  def input
  end

  # Arguments to the activity
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def input=(value)
  end

  # Arguments to the activity
  sig { void }
  def clear_input
  end

  # The last details that were recorded by a heartbeat when this task was generated
  sig { returns(T::Array[T.nilable(Temporalio::Api::Common::V1::Payload)]) }
  def heartbeat_details
  end

  # The last details that were recorded by a heartbeat when this task was generated
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def heartbeat_details=(value)
  end

  # The last details that were recorded by a heartbeat when this task was generated
  sig { void }
  def clear_heartbeat_details
  end

  # When the task was *first* scheduled
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def scheduled_time
  end

  # When the task was *first* scheduled
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def scheduled_time=(value)
  end

  # When the task was *first* scheduled
  sig { void }
  def clear_scheduled_time
  end

  # When this current attempt at the task was scheduled
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def current_attempt_scheduled_time
  end

  # When this current attempt at the task was scheduled
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def current_attempt_scheduled_time=(value)
  end

  # When this current attempt at the task was scheduled
  sig { void }
  def clear_current_attempt_scheduled_time
  end

  # When this attempt was started, which is to say when core received it by polling.
  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def started_time
  end

  # When this attempt was started, which is to say when core received it by polling.
  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def started_time=(value)
  end

  # When this attempt was started, which is to say when core received it by polling.
  sig { void }
  def clear_started_time
  end

  sig { returns(Integer) }
  def attempt
  end

  sig { params(value: Integer).void }
  def attempt=(value)
  end

  sig { void }
  def clear_attempt
  end

  # Timeout from the first schedule time to completion
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def schedule_to_close_timeout
  end

  # Timeout from the first schedule time to completion
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def schedule_to_close_timeout=(value)
  end

  # Timeout from the first schedule time to completion
  sig { void }
  def clear_schedule_to_close_timeout
  end

  # Timeout from starting an attempt to reporting its result
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def start_to_close_timeout
  end

  # Timeout from starting an attempt to reporting its result
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def start_to_close_timeout=(value)
  end

  # Timeout from starting an attempt to reporting its result
  sig { void }
  def clear_start_to_close_timeout
  end

  # If set a heartbeat must be reported within this interval
  sig { returns(T.nilable(Google::Protobuf::Duration)) }
  def heartbeat_timeout
  end

  # If set a heartbeat must be reported within this interval
  sig { params(value: T.nilable(Google::Protobuf::Duration)).void }
  def heartbeat_timeout=(value)
  end

  # If set a heartbeat must be reported within this interval
  sig { void }
  def clear_heartbeat_timeout
  end

  # This is an actual retry policy the service uses. It can be different from the one provided
# (or not) during activity scheduling as the service can override the provided one in case its
# values are not specified or exceed configured system limits.
  sig { returns(T.nilable(Temporalio::Api::Common::V1::RetryPolicy)) }
  def retry_policy
  end

  # This is an actual retry policy the service uses. It can be different from the one provided
# (or not) during activity scheduling as the service can override the provided one in case its
# values are not specified or exceed configured system limits.
  sig { params(value: T.nilable(Temporalio::Api::Common::V1::RetryPolicy)).void }
  def retry_policy=(value)
  end

  # This is an actual retry policy the service uses. It can be different from the one provided
# (or not) during activity scheduling as the service can override the provided one in case its
# values are not specified or exceed configured system limits.
  sig { void }
  def clear_retry_policy
  end

  # Set to true if this is a local activity. Note that heartbeating does not apply to local
# activities.
  sig { returns(T::Boolean) }
  def is_local
  end

  # Set to true if this is a local activity. Note that heartbeating does not apply to local
# activities.
  sig { params(value: T::Boolean).void }
  def is_local=(value)
  end

  # Set to true if this is a local activity. Note that heartbeating does not apply to local
# activities.
  sig { void }
  def clear_is_local
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

# Attempt to cancel a running activity
class Temporalio::Internal::Bridge::Api::ActivityTask::Cancel
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Temporalio::Internal::Bridge::Api::ActivityTask::Cancel) }
  def self.decode(str)
  end

  sig { params(msg: Temporalio::Internal::Bridge::Api::ActivityTask::Cancel).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Temporalio::Internal::Bridge::Api::ActivityTask::Cancel) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Temporalio::Internal::Bridge::Api::ActivityTask::Cancel, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      reason: T.nilable(T.any(Symbol, String, Integer))
    ).void
  end
  def initialize(
    reason: :NOT_FOUND
  )
  end

  sig { returns(T.any(Symbol, Integer)) }
  def reason
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def reason=(value)
  end

  sig { void }
  def clear_reason
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

module Temporalio::Internal::Bridge::Api::ActivityTask::ActivityCancelReason
  self::NOT_FOUND = T.let(0, Integer)
  self::CANCELLED = T.let(1, Integer)
  self::TIMED_OUT = T.let(2, Integer)
  self::WORKER_SHUTDOWN = T.let(3, Integer)

  sig { params(value: Integer).returns(T.nilable(Symbol)) }
  def self.lookup(value)
  end

  sig { params(value: Symbol).returns(T.nilable(Integer)) }
  def self.resolve(value)
  end

  sig { returns(::Google::Protobuf::EnumDescriptor) }
  def self.descriptor
  end
end
